<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CoCoNutNut&#39;s NoteBook</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-10T10:03:43.545Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>coconutnut</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring笔记03 工厂模式</title>
    <link href="http://yoursite.com/2020/02/24/note-spring-03/"/>
    <id>http://yoursite.com/2020/02/24/note-spring-03/</id>
    <published>2020-02-24T09:58:53.000Z</published>
    <updated>2020-03-10T10:03:43.545Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://www.bilibili.com/video/av47952931" target="_blank" rel="noopener">https://www.bilibili.com/video/av47952931</a><br>p9~14</p></blockquote><hr><h1 id="程序的耦合与解耦-以jdbc注册驱动为例"><a href="#程序的耦合与解耦-以jdbc注册驱动为例" class="headerlink" title="程序的耦合与解耦 (以jdbc注册驱动为例)"></a>程序的耦合与解耦 (以jdbc注册驱动为例)</h1><p>jdbc操作中，注册数据库驱动时，有2种方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法1</span></span><br><span class="line">DriverManager.registerDriver(<span class="keyword">new</span> com.mysql.jdbc.Driver());</span><br><span class="line"><span class="comment">// 方法2</span></span><br><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br></pre></td></tr></table></figure><p>在pom.xml中添加了依赖的情况下都可以正常运行</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是，如果去掉这段依赖</p><p>方法1报Error，无法通过编译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error:(26, 56) java: 程序包com.mysql.jdbc不存在</span><br></pre></td></tr></table></figure><p>而方法2报Exception，可以通过编译（无法运行）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.ClassNotFoundException: com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure><p>因为方法1依赖一个具体的驱动类，而方法2用反射，依赖的只是一个字符串<br>但是这个字符串仍是写死在代码里的。应该写到配置文件里去，进一步减少耦合</p><p>实际开发中应该做到：</p><p><strong>编译期不依赖，运行时才依赖</strong></p><p>解耦的思路：</p><p><strong>第一步：使用反射来创建对象，而避免使用new关键字</strong></p><p><strong>第二步：通过读取配置文件来获取要创建的对象全限定类名</strong></p><hr><h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><h2 id="原始的分层实现方法"><a href="#原始的分层实现方法" class="headerlink" title="原始的分层实现方法"></a>原始的分层实现方法</h2><img src="/images/2020/202002271544168.png" width=400><ul><li>Client : 模拟一个表现层，用于调用业务层</li><li>IAccountService : 账户业务层的接口</li><li>AccountServiceImpl : 账户的业务层实现类</li><li>IAccountDao : 账户的持久层接口</li><li>AccountDaoImpl : 账户的持久层实现类</li></ul><p>其中，有两个依赖关系</p><ol><li>表现层调用业务层时<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IAccountService as = <span class="keyword">new</span> AccountServiceImpl();</span><br><span class="line">        as.saveAccount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>业务层调用持久层时<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> IAccountDao accountDao = <span class="keyword">new</span> AccountDaoImpl();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">saveAccount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        accountDao.saveAccount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>都用到了new，耦合度高<br>如果此时把AccountDaoImpl的代码删了，Service就报错了。和前面jdbc中编译期的错误一样</li></ol><p>如何解除这种依赖？</p><h2 id="Bean-amp-BeanFactory"><a href="#Bean-amp-BeanFactory" class="headerlink" title="Bean &amp; BeanFactory"></a>Bean &amp; BeanFactory</h2><p><strong>Bean</strong> —— 可重用组件<br>eg：一个Dao可能被多个Service使用，一个Service可能被多个Servlet使用，它们是可重用的</p><p><strong>JavaBean</strong> —— 用java语言编写的可重用组件</p><p><strong>BeanFactory</strong> —— 创建Bean对象的工厂<br>eg：创建Dao和Service对象</p><p>要实现这个工厂，类似前面jdbc，</p><p>1.需要一个==配置文件==来配置service和dao<br>内容：唯一标识=全限定类名（key=value)<br>配置文件可以是xml也可以是properties</p><p>2.读取配置文件中配置的内容，通过==反射==创建对象</p><h2 id="工厂模式解耦"><a href="#工厂模式解耦" class="headerlink" title="工厂模式解耦"></a>工厂模式解耦</h2><p>在resources中新建beans.properties配置文件（此处用properties因为简单，Spring中用的是xml）</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">accountService</span> = <span class="string">com.itheima.service.impl.AccountServiceImpl</span></span><br><span class="line"><span class="attr">accountDao</span> = <span class="string">com.itheima.dao.impl.AccountDaoImpl</span></span><br></pre></td></tr></table></figure><p>创建BeanFactory类读取properties文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个Properties对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Properties props;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用静态代码块为Properties对象赋值</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 实例化对象</span></span><br><span class="line">            props = <span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">// 获取properties文件的流对象</span></span><br><span class="line">            InputStream in = BeanFactory.class.getClassLoader().getResourceAsStream("bean.properties");</span><br><span class="line">            props.load(in);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            <span class="comment">// 抛一个Error，没有获取配置信息后面想都不要想</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(<span class="string">"初始化properties失败！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据Bean的名称获取bean对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String beanName)</span></span>&#123;</span><br><span class="line">        Object bean = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String beanPath = props.getProperty(beanName);</span><br><span class="line">            bean = Class.forName(beanPath).newInstance();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>读配置文件时不要用FileInputStream，Web工程不好找路径。用类加载器。</li><li>getBean()返回的是Object类型</li></ol><p>把两处使用new创建对象的改为用反射创建</p><p>Client中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IAccountService as = new AccountServiceImpl();</span></span><br><span class="line">IAccountService as = (IAccountService) BeanFactory.getBean(<span class="string">"accountService"</span>);</span><br></pre></td></tr></table></figure><p>AccountServiceImpl中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// private IAccountDao accountDao = new AccountDaoImpl();</span></span><br><span class="line"><span class="keyword">private</span> IAccountDao accountDao = (IAccountDao) BeanFactory.getBean(<span class="string">"accountDao"</span>);</span><br></pre></td></tr></table></figure><p>Object类强转为对应的类</p><p>改进后程序的UML类图长这样</p><img src="/images/2020/20200227162837205.png" width=600><p>此时如果把AccountServiceImpl删了，程序可以运行，抛ClassNotFoundException</p><h2 id="工厂模式的问题与改进"><a href="#工厂模式的问题与改进" class="headerlink" title="工厂模式的问题与改进"></a>工厂模式的问题与改进</h2><p>如果要在Client中多次调用Service？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++) &#123;</span><br><span class="line">IAccountService as = (IAccountService) BeanFactory.getBean(<span class="string">"accountService"</span>);</span><br><span class="line">System.out.println(as);</span><br><span class="line">as.saveAccount();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并在AccountServiceImpl中加一个成员变量i</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IAccountDao accountDao = (IAccountDao) BeanFactory.getBean(<span class="string">"accountDao"</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">saveAccount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        accountDao.saveAccount();</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行</p><blockquote><p>com.itheima.service.impl.AccountServiceImpl@610455d6<br>保存了账户<br>1<br>com.itheima.service.impl.AccountServiceImpl@511d50c0<br>保存了账户<br>1<br>com.itheima.service.impl.AccountServiceImpl@60e53b93<br>保存了账户<br>1<br>com.itheima.service.impl.AccountServiceImpl@5e2de80c<br>保存了账户<br>1<br>com.itheima.service.impl.AccountServiceImpl@1d44bcfa<br>保存了账户<br>1</p><p>Process finished with exit code 0</p></blockquote><p>可以看到，AccountServiceImpl创建了5次，每次都是一个新的对象<br>此时的对象是多例，效率没有单例高</p><p>可以在BeanFactory中把创建出的对象都存起来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个Map,用于存放我们要创建的对象。我们把它称之为容器</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,Object&gt; beans;</span><br></pre></td></tr></table></figure><p>在静态代码块中，得到配置文件的输入流后，实例化这个容器。取出配置文件中所有的key-value，创建并保存它们</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例化容器</span></span><br><span class="line">beans = <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</span><br><span class="line"><span class="comment">// 取出配置文件中所有的Key</span></span><br><span class="line">Enumeration keys = props.keys();</span><br><span class="line"><span class="comment">// 遍历枚举</span></span><br><span class="line"><span class="keyword">while</span> (keys.hasMoreElements())&#123;</span><br><span class="line">    <span class="comment">// 取出每个Key</span></span><br><span class="line">    String key = keys.nextElement().toString();</span><br><span class="line">    <span class="comment">// 根据key获取value</span></span><br><span class="line">    String beanPath = props.getProperty(key);</span><br><span class="line">    <span class="comment">// 反射创建对象</span></span><br><span class="line">    Object value = Class.forName(beanPath).newInstance();</span><br><span class="line">    <span class="comment">// 把key和value存入容器中</span></span><br><span class="line">    beans.put(key,value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取Beans，不用newInstance()，直接从容器中取即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String beanName)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> beans.get(beanName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样修改后，调用5次Service打印的结果是</p><blockquote><p>com.itheima.service.impl.AccountServiceImpl@610455d6<br>保存了账户<br>1<br>com.itheima.service.impl.AccountServiceImpl@610455d6<br>保存了账户<br>2<br>com.itheima.service.impl.AccountServiceImpl@610455d6<br>保存了账户<br>3<br>com.itheima.service.impl.AccountServiceImpl@610455d6<br>保存了账户<br>4<br>com.itheima.service.impl.AccountServiceImpl@610455d6<br>保存了账户<br>5</p><p>Process finished with exit code 0</p></blockquote><p>此时的AccountServiceImpl就是单例的了</p><p>但有一个问题是，这个i在多线程时是不安全的<br>应该把它移到方法里面，就没有这个问题了（实际使用一般也是这样）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    private int i = 1;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">saveAccount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        accountDao.saveAccount();</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="工厂模式使用套路总结"><a href="#工厂模式使用套路总结" class="headerlink" title="工厂模式使用套路总结"></a>工厂模式使用套路总结</h2><p>1.创建BeanFactory</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BeanFactory.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个Properties对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Properties props;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个Map,用于存放我们要创建的对象。称之为容器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,Object&gt; beans;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用静态代码块为Properties对象赋值</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1.实例化对象</span></span><br><span class="line">            props = <span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">// 2.获取properties文件的流对象</span></span><br><span class="line">            InputStream in = BeanFactory.class.getClassLoader().getResourceAsStream("bean.properties");</span><br><span class="line">            props.load(in);</span><br><span class="line">            <span class="comment">// 3.实例化容器</span></span><br><span class="line">            beans = <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</span><br><span class="line">            <span class="comment">// 4.取出配置文件中所有的Key</span></span><br><span class="line">            Enumeration keys = props.keys();</span><br><span class="line">            <span class="comment">// 5.遍历枚举</span></span><br><span class="line">            <span class="keyword">while</span> (keys.hasMoreElements())&#123;</span><br><span class="line">                <span class="comment">// 取出每个Key</span></span><br><span class="line">                String key = keys.nextElement().toString();</span><br><span class="line">                <span class="comment">// 根据key获取value</span></span><br><span class="line">                String beanPath = props.getProperty(key);</span><br><span class="line">                <span class="comment">// 反射创建对象</span></span><br><span class="line">                Object value = Class.forName(beanPath).newInstance();</span><br><span class="line">                <span class="comment">// 把key和value存入容器中</span></span><br><span class="line">                beans.put(key,value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(<span class="string">"初始化properties失败！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据bean的名称获取对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String beanName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beans.get(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">//</span> <span class="string">beans.properties</span></span><br><span class="line"></span><br><span class="line"><span class="attr">accountService</span>=<span class="string">com.itheima.service.impl.AccountServiceImpl</span></span><br><span class="line"><span class="attr">accountDao</span>=<span class="string">com.itheima.dao.impl.AccountDaoImpl</span></span><br></pre></td></tr></table></figure><p>3.获取Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Client.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    IAccountService as = (IAccountService) BeanFactory.getBean(<span class="string">"accountService"</span>);</span><br><span class="line">    as.saveAccount();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av47952931&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.bilibili.com/video/av47952931
      
    
    </summary>
    
    
      <category term="Note" scheme="http://yoursite.com/categories/Note/"/>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Note/Spring/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring笔记02 Idea运行示例项目的坑</title>
    <link href="http://yoursite.com/2020/02/24/note-spring-02/"/>
    <id>http://yoursite.com/2020/02/24/note-spring-02/</id>
    <published>2020-02-24T09:25:11.000Z</published>
    <updated>2020-03-10T10:03:14.405Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://www.bilibili.com/video/av47952931?p=8" target="_blank" rel="noopener">https://www.bilibili.com/video/av47952931?p=8</a></p></blockquote><p>表建好之后，Idea里面直接打开示例工程跑不起来，mysql的依赖有问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.ClassNotFoundException: com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure><p>对比发现Maven路径不对</p><p>这是自己创建的可以运行的Maven项目配置<br><img src="/images/2020/20200224170149695.png" alt="img"></p><p>这是导入工程的配置<br><img src="/images/2020/20200224170322871.png" alt="img"><br>修改路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;maven&#x2F;3.6.2&#x2F;libexec</span><br><span class="line">&#x2F;Users&#x2F;coconutnut&#x2F;.m2&#x2F;settings.xml</span><br><span class="line">&#x2F;Users&#x2F;coconutnut&#x2F;.m2&#x2F;repository</span><br></pre></td></tr></table></figure><p>解决Driver问题</p><hr><p>下一个bug<br>Idea中点运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MySQLNonTransientConnectionException: Client does not support authentication protocol requested by server</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://www.cnblogs.com/inconceivable/p/9186822.html" target="_blank" rel="noopener">https://www.cnblogs.com/inconceivable/p/9186822.html</a></p></blockquote><p>在MySQL Workbench中输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">USE mysql;</span><br><span class="line">ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;iamgroot&#39;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><p>Idea中提示变成了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.sql.SQLException: Unknown initial character set index &#39;255&#39; received from server. Initial client character set can be forced via the &#39;characterEncoding&#39; property.</span><br><span class="line">at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:1055)</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://blog.csdn.net/qq1515312832/article/details/85614733" target="_blank" rel="noopener">https://blog.csdn.net/qq1515312832/article/details/85614733</a></p></blockquote><p>在连接数据库的url后加上编码方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connection conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/groot?useUnicode=true&amp;characterEncoding=utf8"</span>,<span class="string">"root"</span>,<span class="string">"iamgroot"</span>);</span><br></pre></td></tr></table></figure><p>成功</p><hr><p>总结：</p><ol><li>修改Preference-&gt;Build, Execution, Deployment-&gt;Build Tools-&gt;Maven中路径</li><li>在连接数据库的url后加上编码方式</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av47952931?p=8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.bilibili.com/video/av4795
      
    
    </summary>
    
    
      <category term="Note" scheme="http://yoursite.com/categories/Note/"/>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Note/Spring/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring笔记01 jdbc常用操作</title>
    <link href="http://yoursite.com/2020/02/24/note-spring-01/"/>
    <id>http://yoursite.com/2020/02/24/note-spring-01/</id>
    <published>2020-02-24T08:36:04.000Z</published>
    <updated>2020-03-10T10:03:02.298Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://www.bilibili.com/video/av47952931?p=8" target="_blank" rel="noopener">https://www.bilibili.com/video/av47952931?p=8</a></p></blockquote><p>之前学数据库的时候mysql踩了好多坑，主要是版本问题<br>不同版本语法有些不兼容<br>记录一下Apply生成的语句备用</p><hr><p>版本:<br>mysql-8.0.19-macos10.15-x86_64<br>MySQL Workbench 8.0.16</p><hr><h1 id="MySQL-Workbench操作"><a href="#MySQL-Workbench操作" class="headerlink" title="MySQL Workbench操作"></a>MySQL Workbench操作</h1><h2 id="创建schema"><a href="#创建schema" class="headerlink" title="创建schema"></a>创建schema</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">SCHEMA</span> <span class="string">`groot`</span> ;</span><br></pre></td></tr></table></figure><hr><h2 id="创建table"><a href="#创建table" class="headerlink" title="创建table"></a>创建table</h2><p>这是b站教程给的sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">account</span>(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">40</span>),</span><br><span class="line">money <span class="built_in">float</span></span><br><span class="line">)<span class="built_in">character</span> <span class="keyword">set</span> utf8 <span class="keyword">collate</span> utf8_general_ci;</span><br></pre></td></tr></table></figure><p>这是Workbench里生成的sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`groot`</span>.<span class="string">`account`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">45</span>) <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`money`</span> <span class="built_in">FLOAT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>));</span><br></pre></td></tr></table></figure><hr><h2 id="插入记录"><a href="#插入记录" class="headerlink" title="插入记录"></a>插入记录</h2><p>b站教程给的sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">account</span>(<span class="keyword">name</span>,money) <span class="keyword">values</span>(<span class="string">'aaa'</span>,<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">account</span>(<span class="keyword">name</span>,money) <span class="keyword">values</span>(<span class="string">'bbb'</span>,<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">account</span>(<span class="keyword">name</span>,money) <span class="keyword">values</span>(<span class="string">'ccc'</span>,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>Workbench里生成的sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`groot`</span>.<span class="string">`account`</span> (<span class="string">`name`</span>, <span class="string">`money`</span>) <span class="keyword">VALUES</span> (<span class="string">'aaa'</span>, <span class="string">'1000'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`groot`</span>.<span class="string">`account`</span> (<span class="string">`name`</span>, <span class="string">`money`</span>) <span class="keyword">VALUES</span> (<span class="string">'bbb'</span>, <span class="string">'1000'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`groot`</span>.<span class="string">`account`</span> (<span class="string">`name`</span>, <span class="string">`money`</span>) <span class="keyword">VALUES</span> (<span class="string">'ccc'</span>, <span class="string">'1000'</span>);</span><br></pre></td></tr></table></figure><hr><h2 id="查看记录"><a href="#查看记录" class="headerlink" title="查看记录"></a>查看记录</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> groot.account;</span><br></pre></td></tr></table></figure><hr><h1 id="Idea中连接数据库"><a href="#Idea中连接数据库" class="headerlink" title="Idea中连接数据库"></a>Idea中连接数据库</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.注册驱动</span></span><br><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.获取连接</span></span><br><span class="line">Connection conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/groot?useUnicode=true&amp;characterEncoding=utf8"</span>,<span class="string">"root"</span>,<span class="string">"iamgroot"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.获取操作数据库的预处理对象</span></span><br><span class="line">PreparedStatement pstm = conn.prepareStatement(<span class="string">"select * from account"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.执行SQL，得到结果集</span></span><br><span class="line">ResultSet rs = pstm.executeQuery();</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.遍历结果集</span></span><br><span class="line"><span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">    System.out.println(rs.getString(<span class="string">"name"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//6.释放资源</span></span><br><span class="line">rs.close();</span><br><span class="line">pstm.close();</span><br><span class="line">conn.close();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av47952931?p=8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.bilibili.com/video/av4795
      
    
    </summary>
    
    
      <category term="Note" scheme="http://yoursite.com/categories/Note/"/>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Note/Spring/"/>
    
    
  </entry>
  
  <entry>
    <title>IntelliJ IDEA 入门笔记</title>
    <link href="http://yoursite.com/2020/02/24/note-idea/"/>
    <id>http://yoursite.com/2020/02/24/note-idea/</id>
    <published>2020-02-24T08:07:48.000Z</published>
    <updated>2020-03-10T09:45:45.131Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://www.bilibili.com/video/av71609179?from=search&amp;seid=7606544420555480673" target="_blank" rel="noopener">https://www.bilibili.com/video/av71609179?from=search&amp;seid=7606544420555480673</a></p></blockquote><hr><p>版本<br>ideaIU-2019.3.3 (学生License)<br>macOS Catalina 10.15.3</p><hr><h1 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h1><p>鼠标悬浮提示<br>Preferences-&gt;Editor-&gt;General-&gt;Show quick documentation on mouse move</p><p>自动导包<br>Preferences-&gt;Editor-&gt;General-&gt;AutoImport-&gt;Add unambiguous imports on the fly<br>Preferences-&gt;Editor-&gt;General-&gt;AutoImport-&gt;Optimize imports on the fly (for current project)</p><p>方法间分隔符<br>Preferences-&gt;Editor-&gt;General-&gt;Appearance-&gt;Show method separators</p><p>忽略大小写提示<br>Preferences-&gt;Editor-&gt;General-&gt;Code Completion-&gt;Match case (不勾选)</p><p>文件多行显示栏<br>Preferences-&gt;Editor-&gt;General-&gt;Editor Tabs-&gt;Show tabs in one row (不勾选)</p><p>修改注释颜色<br>Preferences-&gt;Editor-&gt;Color Scheme-&gt;Language Defaults-&gt;Comments中</p><p>项目工程编码<br>Preferences-&gt;Editor-&gt;File Encodings中</p><p>自动编译<br>Preferences-&gt;Build,Execution,Deployment-&gt;Compiler-&gt;Build project automatically<br>Preferences-&gt;Build,Execution,Deployment-&gt;Compiler-&gt;Compile independent modules in parallel</p><hr><h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><p>补全提示：^+/<br>自动生成：^+Enter<br>单行补全：Command+Shift+Enter<br>方法参数提示：Command+P<br>重新排版：Option+Command+L<br>Surround With：Option+Command+T<br>复制行或选中区域：Command+D<br>删除行：Command+Delete</p><h2 id="Live-Templates-amp-Postfix-Completion"><a href="#Live-Templates-amp-Postfix-Completion" class="headerlink" title="Live Templates &amp; Postfix Completion"></a>Live Templates &amp; Postfix Completion</h2><p>查询实时代码模版：Command+J<br>Preferences-&gt;Editor-&gt;LiveTemplates和Preferences-&gt;Editor-&gt;General-&gt;Postfix Completion中修改</p><hr><h1 id="对普通Java项目打包"><a href="#对普通Java项目打包" class="headerlink" title="对普通Java项目打包"></a>对普通Java项目打包</h1><p>File-&gt;Project Structure (或工具栏直接打开)<br>Project Settings-&gt;Artifacts中加入当前项目</p><p>Build-&gt;Build Artifacts<br>在工程目录中out-&gt;artifacts中创建jar包<br>测试时，输入java -cp 包名+类名</p><hr><h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><h2 id="Idea配置Maven"><a href="#Idea配置Maven" class="headerlink" title="Idea配置Maven"></a>Idea配置Maven</h2><p>Preferences-&gt;Build,Execution,Deployment-&gt;Build Tools-&gt;Maven<br>Maven home directory中导入</p><p>Preferences-&gt;Build,Execution,Deployment-&gt;Build Tools-&gt;Maven-&gt;Importing-&gt;Import Maven projects automatically勾上</p><h2 id="创建Maven项目"><a href="#创建Maven项目" class="headerlink" title="创建Maven项目"></a>创建Maven项目</h2><p>New Project-&gt;Maven-&gt;Create from archetype勾上<br>可以选择maven-archetype-quickstart<br>运行默认的Hello World项目</p><h2 id="打包Maven项目"><a href="#打包Maven项目" class="headerlink" title="打包Maven项目"></a>打包Maven项目</h2><p>Idea的Terminal中输入 (或系统Terminal切到工程目录下输入)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package</span><br></pre></td></tr></table></figure><p>打包完在target目录下<br>运行输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp target&#x2F;xxx.jar 包名+类名</span><br></pre></td></tr></table></figure><h2 id="排查依赖包冲突"><a href="#排查依赖包冲突" class="headerlink" title="排查依赖包冲突"></a>排查依赖包冲突</h2><p>pom文件中，右键Diagram-&gt;show Dependencies<br>结构图显示依赖关系<br>红色虚线标明重复<br>有时候重复不删掉也不会报错，默认使用路径短的<br>如果报错，排除掉即可，代码中自动<exclusion>…</exclusion></p><hr><h1 id="项目目录-amp-文件夹类型"><a href="#项目目录-amp-文件夹类型" class="headerlink" title="项目目录&amp;文件夹类型"></a>项目目录&amp;文件夹类型</h1><h2 id="对项目类型手动标注"><a href="#对项目类型手动标注" class="headerlink" title="对项目类型手动标注"></a>对项目类型手动标注</h2><p>在目录上右键Mark Directory as-&gt;选择类型</p><p>Test：可编译的单元测试目录<br>Resources：资源文件目录<br>Test Resources：单元测试资源文件目录<br>Excluded：排除目录（相当于被废弃掉）<br>Generated Sources：类似src（只有这种可以新建java类和包）</p><hr><h1 id="多模块Maven项目"><a href="#多模块Maven项目" class="headerlink" title="多模块Maven项目"></a>多模块Maven项目</h1><h2 id="构建多模块Maven项目"><a href="#构建多模块Maven项目" class="headerlink" title="构建多模块Maven项目"></a>构建多模块Maven项目</h2><p>新建一个Maven项目<br>再新建Module，它也会有src、main的目录结构</p><h2 id="设置模块间依赖关系"><a href="#设置模块间依赖关系" class="headerlink" title="设置模块间依赖关系"></a>设置模块间依赖关系</h2><p>Project Structure-&gt;Modules-&gt;选中一个模块-&gt;Dependencies中添加，然后勾选上<br>pom.xml中也许添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xxx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加依赖后可以直接引用被依赖模块中的代码</p><hr><h1 id="Maven-Web项目"><a href="#Maven-Web项目" class="headerlink" title="Maven Web项目"></a>Maven Web项目</h1><h2 id="创建Maven-Web项目"><a href="#创建Maven-Web项目" class="headerlink" title="创建Maven Web项目"></a>创建Maven Web项目</h2><p>New Project-&gt;Maven-&gt;Create from archetype<br>可以选择maven-archetype-webapp</p><h2 id="配置Tomcat"><a href="#配置Tomcat" class="headerlink" title="配置Tomcat"></a>配置Tomcat</h2><p>工具栏中build(绿色锤子)旁边，Add Configuration<br>新加Tomcat-&gt;Local （需先下载放在本地，配置路径）</p><p>Server中可以修改默认浏览器，可以修改端口号</p><p>Deployment中添加Artifact<br>xxx:war exploded</p><p>即可启动运行<br>默认index.jsp显示Hello World!</p><h2 id="打包运行"><a href="#打包运行" class="headerlink" title="打包运行"></a>打包运行</h2><p>右侧Maven工具栏中<br>Lifecycle-&gt;package-&gt;Run Maven Build<br>install-&gt;Run ‘xxx [install]’<br>打包成功后，在target文件夹下</p><p>war包可以部署到服务器上</p><p>也可以拷贝到本地Tomcat的webapp目录下<br>运行Tomcat的bin目录下的startup，启动tomcat<br>即可浏览器访问<br>结束后shutdown关闭Tomcat</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av71609179?from=search&amp;amp;seid=7606544420555480673&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
      
    
    </summary>
    
    
      <category term="Note" scheme="http://yoursite.com/categories/Note/"/>
    
      <category term="Idea" scheme="http://yoursite.com/categories/Note/Idea/"/>
    
    
  </entry>
  
</feed>
