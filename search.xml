<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Spring笔记15 总结</title>
    <url>/2020/03/20/note-spring-15/</url>
    <content><![CDATA[<img src="/images/2020/spring.png">]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>mindmap</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring笔记14 Spring5的新特性</title>
    <url>/2020/03/20/note-spring-14/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/av47952931?p=82" target="_blank" rel="noopener">https://www.bilibili.com/video/av47952931?p=82</a></p>
</blockquote>
<p>基于jdk1.8，tomcat版本要求8.5以上</p>
<h1 id="利用jdk8版本更新的内容"><a href="#利用jdk8版本更新的内容" class="headerlink" title="利用jdk8版本更新的内容"></a>利用jdk8版本更新的内容</h1><h2 id="基于jdk8的反射增强"><a href="#基于jdk8的反射增强" class="headerlink" title="基于jdk8的反射增强"></a>基于jdk8的反射增强</h2><p> <strong>一个测试</strong></p>
<p>三种操作：</p>
<p>1.创建新对象并赋值</p>
<p>2.创建一个对象赋值多次</p>
<p>3.通过反射创建对象并赋值</p>
<p>分别执行10亿次，比较用时(ms)</p>
<p>jdk8：8、31、2417</p>
<p>jdk7：6212、3025、290400</p>
<h2 id="NonNull-和-Nullable-的使用"><a href="#NonNull-和-Nullable-的使用" class="headerlink" title="@NonNull 和@Nullable 的使用"></a>@NonNull 和@Nullable 的使用</h2><p>用 @Nullable 和 @NotNull 注解来表明可为空的参数和以及返回值</p>
<p>这样就够在编译的时候处理空值而不是在运行时抛出 NullPointerExceptions</p>
<h2 id="日志记录方面"><a href="#日志记录方面" class="headerlink" title="日志记录方面"></a>日志记录方面</h2><p>封装 Commons Logging 桥接模块（叫做 spring-jcl）</p>
<h1 id="核心容器的更新"><a href="#核心容器的更新" class="headerlink" title="核心容器的更新"></a>核心容器的更新</h1><p>支持候选组件索引作为类路径扫描的替代方案</p>
<p>从索引读取实体而不是扫描类路径对于小于 200 个类的小型项目没有明显差异</p>
<p>对于大型项目，应用程序的启动时间将被大大缩减</p>
<h1 id="JetBrains-Kotlin-语言支持"><a href="#JetBrains-Kotlin-语言支持" class="headerlink" title="JetBrains Kotlin 语言支持"></a>JetBrains Kotlin 语言支持</h1><h1 id="响应式编程风格"><a href="#响应式编程风格" class="headerlink" title="响应式编程风格"></a>响应式编程风格</h1><p>响应式堆栈 WEB 框架</p>
<p>这个堆栈完全的响应式且非阻塞，适合于事件循环风格的处理，可以进行少量线程的扩展</p>
<p>（有一个响应式编程实战示例，建议学完Spring Boot之后搭建  –MARK–）</p>
<h1 id="Junit5-支持"><a href="#Junit5-支持" class="headerlink" title="Junit5 支持"></a>Junit5 支持</h1>]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring笔记13 Spring中的事务控制</title>
    <url>/2020/03/19/note-spring-13/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/av47952931" target="_blank" rel="noopener">https://www.bilibili.com/video/av47952931</a><br>p75-78</p>
</blockquote>
<p>几个点：</p>
<ul>
<li>JavaEE体系进行分层开发，事务处理位于业务层</li>
<li>Spring提供事务控制的接口，在spring-tx-5.0.2.RELEASE.jar中</li>
<li>Spring的事务控制基于AOP。它既可以用配置方式实现，也可以用编程方式实现（重点是配置实现）</li>
</ul>
<h1 id="Spring中事务控制的API"><a href="#Spring中事务控制的API" class="headerlink" title="Spring中事务控制的API"></a>Spring中事务控制的API</h1><h2 id="PlatformTransactionManager"><a href="#PlatformTransactionManager" class="headerlink" title="PlatformTransactionManager"></a>PlatformTransactionManager</h2><p>该接口提供事务操作的方法：</p>
<ul>
<li>获取状态 getTransaction()</li>
<li>提交 commit()</li>
<li>回滚 rollback()</li>
</ul>
<p>常用实现类：</p>
<ul>
<li>org.springframework.jdbc.datasource.DataSourceTransactionManager </li>
<li>org.springframework.orm.hibernate5.HibernateTransactionManager </li>
</ul>
<h2 id="TransactionDefinition"><a href="#TransactionDefinition" class="headerlink" title="TransactionDefinition"></a>TransactionDefinition</h2><p>该接口是事务的定义信息对象，可以获取事务对象名称、隔离级别、传播行为、超时时间、是否只读</p>
<p>Spring默认使用数据库的隔离级别</p>
<p>传播行为指什么情况下必须有事务、什么情况可有可无</p>
<h2 id="TransactionStatus"><a href="#TransactionStatus" class="headerlink" title="TransactionStatus"></a>TransactionStatus</h2><p>该接口提供事务的运行状态，可以刷新事务、获取是否存在存储点（可以理解为按步提交，回滚可以回滚到当前点，不用全部回滚）、是否完成、是否为新的事务、是否回滚、设置回滚</p>
<h1 id="Spring的事务控制"><a href="#Spring的事务控制" class="headerlink" title="Spring的事务控制"></a>Spring的事务控制</h1><h2 id="代码准备"><a href="#代码准备" class="headerlink" title="代码准备"></a>代码准备</h2><p>pom.xml中需要导入aspectj的依赖，因为事务控制基于AOP</p>
<p>准备数据库表和实体类（还是账户）</p>
<p>实现三个方法：根据Id查询账户、根据名称查询账户、转账</p>
<p>编写Dao层和业务层接口和实现类</p>
<h2 id="基于XML的声明式事务控制"><a href="#基于XML的声明式事务控制" class="headerlink" title="基于XML的声明式事务控制"></a>基于XML的声明式事务控制</h2><p>配置步骤</p>
<p>1、配置事务管理器</p>
<p>2、配置事务的通知</p>
<p>此时需要导入事务的约束（文档首页点Data Access，搜xmlns:tx，同时也会导入AOP的约束）</p>
<p>使用tx:advice标签配置事务通知<br>属性：id：事务通知的唯一标识   transaction-manager：给事务通知提供一个事务管理器引用</p>
<p>3、配置AOP中的通用切入点表达式</p>
<p>4、建立事务通知和切入点表达式的对应关系</p>
<p>5、配置事务的属性（在事务的通知tx:advice标签的内部）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置事务的通知--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置事务的属性</span></span><br><span class="line"><span class="comment">                isolation：用于指定事务的隔离级别。默认值是DEFAULT，表示使用数据库的默认隔离级别。</span></span><br><span class="line"><span class="comment">                propagation：用于指定事务的传播行为。默认值是REQUIRED，表示一定会有事务，增删改的选择。查询方法可以选择SUPPORTS。</span></span><br><span class="line"><span class="comment">                read-only：用于指定事务是否只读。只有查询方法才能设置为true。默认值是false，表示读写。</span></span><br><span class="line"><span class="comment">                timeout：用于指定事务的超时时间，默认值是-1，表示永不超时。如果指定了数值，以秒为单位。</span></span><br><span class="line"><span class="comment">                rollback-for：用于指定一个异常，当产生该异常时，事务回滚，产生其他异常时，事务不回滚。没有默认值。表示任何异常都回滚。</span></span><br><span class="line"><span class="comment">                no-rollback-for：用于指定一个异常，当产生该异常时，事务不回滚，产生其他异常时事务回滚。没有默认值。表示任何异常都回滚。</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 后面写查询方法都以find开头 这样两行配置就够了--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:method</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置aop--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置切入点表达式--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pt1"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.itheima.service.impl.*.*(..))"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:pointcut</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--建立切入点表达式和事务通知的对应关系 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样service.impl下的实现类就都配置好事务控制了</p>
<h2 id="基于注解的声明式事务控制"><a href="#基于注解的声明式事务控制" class="headerlink" title="基于注解的声明式事务控制"></a>基于注解的声明式事务控制</h2><p>导名称空间时要多一个context，以及对应的约束</p>
<p>业务层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"accountService"</span>)</span><br><span class="line"><span class="meta">@Transactional</span>(propagation= Propagation.SUPPORTS,readOnly=<span class="keyword">true</span>) <span class="comment">// 只读型事务的配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IAccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer accountId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAccountById(accountId);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 需要的是读写型事务配置</span></span><br><span class="line">    <span class="meta">@Transactional</span>(propagation= Propagation.REQUIRED,readOnly=<span class="keyword">false</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String sourceName, String targetName, Float money)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 2.1根据名称查询转出账户</span></span><br><span class="line">            Account source = accountDao.findAccountByName(sourceName);</span><br><span class="line">            <span class="comment">// 2.2根据名称查询转入账户</span></span><br><span class="line">            Account target = accountDao.findAccountByName(targetName);</span><br><span class="line">            <span class="comment">// 2.3转出账户减钱</span></span><br><span class="line">            source.setMoney(source.getMoney()-money);</span><br><span class="line">            <span class="comment">// 2.4转入账户加钱</span></span><br><span class="line">            target.setMoney(target.getMoney()+money);</span><br><span class="line">            <span class="comment">// 2.5更新转出账户</span></span><br><span class="line">            accountDao.updateAccount(source);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> i=<span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2.6更新转入账户</span></span><br><span class="line">            accountDao.updateAccount(target);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Dao层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span>(<span class="string">"accountDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时不能再继承JdbcDaoSupport了（因为没法给jdbcTemplate加注解），必须自己定义一个jdbcTemplate，并在xml中配置（并注入dataSource，还要配置Spring在创建容器时需要扫描的包）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置spring创建容器时要扫描的包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.itheima"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置JdbcTemplate--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置数据源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/eesy"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"1234"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- spring中基于注解 的声明式事务控制配置步骤</span></span><br><span class="line"><span class="comment">            1、配置事务管理器</span></span><br><span class="line"><span class="comment">            2、开启spring对注解事务的支持</span></span><br><span class="line"><span class="comment">            3、在需要事务支持的地方使用@Transactional注解</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 开启spring对注解事务的支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>属性在@Transactional中配置</p>
<p>一个问题是，如果有十个事务，一半只读一半读写，就都得单独配置属性</p>
<p>而用xml配置时一次就解决了</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring笔记12 基于XML和注解的事务控制</title>
    <url>/2020/03/19/note-spring-12/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/av47952931" target="_blank" rel="noopener">https://www.bilibili.com/video/av47952931</a><br>p72-74</p>
</blockquote>
<h1 id="基于XML的事务控制"><a href="#基于XML的事务控制" class="headerlink" title="基于XML的事务控制"></a>基于XML的事务控制</h1><p>2个工具类：ConnectionUtils 和 TransactionManager</p>
<p>见 <a href="/2020/03/09/note-spring-09/">Spring笔记09 事务控制的问题&amp;动态代理</a></p>
<p>主要配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置Connection的工具类 ConnectionUtils --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"connectionUtils"</span> <span class="attr">class</span>=<span class="string">"com.itheima.utils.ConnectionUtils"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 注入数据源--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txManager"</span> <span class="attr">class</span>=<span class="string">"com.itheima.utils.TransactionManager"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 注入ConnectionUtils --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionUtils"</span> <span class="attr">ref</span>=<span class="string">"connectionUtils"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置aop--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--配置通用切入点表达式--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pt1"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.itheima.service.impl.*.*(..))"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:pointcut</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">ref</span>=<span class="string">"txManager"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置前置通知：开启事务--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"beginTransaction"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置后置通知：提交事务--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">"commit"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-returning</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置异常通知：回滚事务--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">"rollback"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-throwing</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置最终通知：释放连接--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"release"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="基于注解的AOP配置"><a href="#基于注解的AOP配置" class="headerlink" title="基于注解的AOP配置"></a>基于注解的AOP配置</h1><p>xml中要开启对注解的支持</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IAccountDao accountDao;</span><br><span class="line">  </span><br><span class="line">  	<span class="comment">// ...</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span>(<span class="string">"accountDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> QueryRunner runner;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ConnectionUtils connectionUtils;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"connectionUtils"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"txManager"</span>)</span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ConnectionUtils connectionUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* com.itheima.service.impl.*.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pt1</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">  </span><br><span class="line">  	<span class="meta">@Around</span>(<span class="string">"pt1()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">aroundAdvice</span><span class="params">(ProceedingJoinPoint pjp)</span></span>&#123;</span><br><span class="line">        Object rtValue = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1.获取参数</span></span><br><span class="line">            Object[] args = pjp.getArgs();</span><br><span class="line">            <span class="comment">// 2.开启事务</span></span><br><span class="line">            <span class="keyword">this</span>.beginTransaction();</span><br><span class="line">            <span class="comment">// 3.执行方法</span></span><br><span class="line">            rtValue = pjp.proceed(args);</span><br><span class="line">            <span class="comment">// 4.提交事务</span></span><br><span class="line">            <span class="keyword">this</span>.commit();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 返回结果</span></span><br><span class="line">            <span class="keyword">return</span>  rtValue;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Throwable e)&#123;</span><br><span class="line">            <span class="comment">// 5.回滚事务</span></span><br><span class="line">            <span class="keyword">this</span>.rollback();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 6.释放资源</span></span><br><span class="line">            <span class="keyword">this</span>.release();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果分别在开启事务、提交事务、回滚事务、释放连接的函数上分别加@Before(“pt1()”)、@AfterReturning(“pt1()”)、@AfterThrowing(“pt1()”)、@After(“pt1()”)</p>
<p>理论上没毛病。但是！Spring实际的执行顺序是有问题的（同 见笔记9）</p>
<p>最终通知在后置通知之前执行了，于是根本没有提交就释放了，连接已经变成了新的连接</p>
<p>所以不要分别用。用一个环绕通知，里面try-catch，自己控制顺序</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>学习Spring的一点感想</title>
    <url>/2020/03/19/note-spring/</url>
    <content><![CDATA[<p>Spring学到这里，记录一点点感想</p>
<hr>
<p>这个教程一个经常的操作就是</p>
<p>噼里啪啦噼里啪啦写了一大堆，然后灵魂质问：<strong>你都能写出来的东西Spring会没有吗？</strong></p>
<p>🥶🥶🥶</p>
<p>fine</p>
<p>不过这种过程解释了这些设计的用意，也难怪评论很多都说这个教程是看过最好的</p>
<p>然鹅，用Spring Boot的时候现在的这一堆也不用写啊！</p>
<p>最初接触java web这一大趴的时候特别迷惑，Tomcat、Spring、Spring MVC、Spring Boot…一😳脸😳懵😳逼</p>
<p>看到大多的建议是从Spring开始，不然Spring Boot能用但是不懂为什么</p>
<p>于是学了一些Spring（估计是一个四小时版本），用的时候为了方便还是直接上了Spring Boot</p>
<p>现在重新学一遍，没之前那么😳😳😳了，教程里说到Spring可以简化手撕代码的时候，也知道Spring Boot还能再简化一些</p>
<p>对它们的理解也慢慢清晰了一点点，感觉就是一个不断封装、约定&gt;配置的简化过程，和计算机中许许多多的进化过程一样，都是一层一层的抽(tou)象(lan)</p>
<hr>
<img src="/images/2020/1949370-200.png" width=100>


<p>说起来，春天到了呢</p>
<p>今天湖北已经0新增了，希望能赶快开门…</p>
<p>🦢</p>
]]></content>
      <categories>
        <category>Memo</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring笔记11 Spring中的JdbcTemplate</title>
    <url>/2020/03/19/note-spring-11/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/av47952931" target="_blank" rel="noopener">https://www.bilibili.com/video/av47952931</a></p>
<p>p67~71</p>
</blockquote>
<p>持久层总图</p>
<img src="/images/2020/20200319.jpg">

<p>Spring中的JdbcTemplate</p>
<p>作用：和数据库交互，实现对表的CRUD操作</p>
<h1 id="JdbcTemplate与DbUtils"><a href="#JdbcTemplate与DbUtils" class="headerlink" title="JdbcTemplate与DbUtils"></a>JdbcTemplate与DbUtils</h1><p>DbUtils是Apache提供的一个对JDBC进行简单封装的开源工具类库，主要有</p>
<ul>
<li>org.apache.commons.dbutils.QueryRunner — 核心类，执行SQL查询以处理结果集（线程安全）</li>
<li>org.apache.commons.dbutils.ResultSetHandler — 结果集封装器</li>
<li>org.apache.commons.dbutils.DbUtils — 提供如加载驱动、关闭连接、事务提交、回滚等常规工作的工具类</li>
</ul>
<p>JdbcTemplate是Spring提供的一个对象，是对原始Jdbc API对象的简单封装，基本方法：</p>
<ul>
<li>execute方法</li>
<li>update与batchUpdate方法</li>
<li>query与queryXXX方法</li>
<li>call方法</li>
</ul>
<p>DbUtils导的依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        dbutils--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        mysql驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        jdbc连接池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>JdbcTemplate导的依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        JdbcTemplate--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        和事务相关--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        mysql驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="表的实体类"><a href="#表的实体类" class="headerlink" title="表的实体类"></a>表的实体类</h1><p>实现Serializable接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Float money;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get set toString</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="JdbcTemplate的最基本用法"><a href="#JdbcTemplate的最基本用法" class="headerlink" title="JdbcTemplate的最基本用法"></a>JdbcTemplate的最基本用法</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateDemo1</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 准备数据源：spring的内置数据源</span></span><br><span class="line">        DriverManagerDataSource ds = <span class="keyword">new</span> DriverManagerDataSource();</span><br><span class="line">        ds.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        ds.setUrl(<span class="string">"jdbc:mysql://localhost:3306/groot?characterEncoding=utf8"</span>);</span><br><span class="line">        ds.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        ds.setPassword(<span class="string">"iamgroot"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.创建JdbcTemplate对象</span></span><br><span class="line">        JdbcTemplate jt = <span class="keyword">new</span> JdbcTemplate();</span><br><span class="line">        <span class="comment">// 给jt设置数据源</span></span><br><span class="line">        jt.setDataSource(ds);</span><br><span class="line">        <span class="comment">// 2.执行操作</span></span><br><span class="line">        jt.execute(<span class="string">"insert into account(name,money) values('ccc',1000)"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行，没有问题</p>
<img src="/images/2020/screencapture2020-03-19PM3.57.43.jpg" width=200>

<p>但是这样写数据库的配置都写死了，而且用了很多set、new</p>
<p>都可以通过IoC配置</p>
<h2 id="IoC配置"><a href="#IoC配置" class="headerlink" title="IoC配置"></a>IoC配置</h2><p>这里dataSource暂时先用Spring内置的（id=”dataSource”）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateDemo2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        <span class="comment">// 2.获取对象</span></span><br><span class="line">        JdbcTemplate jt = ac.getBean(<span class="string">"jdbcTemplate"</span>,JdbcTemplate<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 3.执行操作</span></span><br><span class="line">        jt.execute(<span class="string">"insert into account(name,money)values('ddd',2222)"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也没问题</p>
<img src="/images/2020/screencapture2020-03-19PM4.04.17.jpg" width=200>

<h1 id="使用JdbcTemplate实现基本的CRUD"><a href="#使用JdbcTemplate实现基本的CRUD" class="headerlink" title="使用JdbcTemplate实现基本的CRUD"></a>使用JdbcTemplate实现基本的CRUD</h1><p>增删改都是update方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 保存</span></span><br><span class="line">jt.update(<span class="string">"insert into account(name,money)values(?,?)"</span>,<span class="string">"eee"</span>,<span class="number">3333f</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新</span></span><br><span class="line">jt.update(<span class="string">"update account set name=?,money=? where id=?"</span>,<span class="string">"test"</span>,<span class="number">4567</span>,<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line">jt.update(<span class="string">"delete from account where id=?"</span>,<span class="number">8</span>);</span><br></pre></td></tr></table></figure>

<p>查询是query</p>
<p>query有很多很多很多重载的方法，找的时候关注两个点：我们有什么（参数）、我们要什么（返回值）</p>
<p>比如有sql语句、参数，要返回一个List，筛选出来基本就剩2个了，它们一个要传Object[] args，一个是Object… args，是针对不同版本的（前者所有版本可用，后者jdk5之后支持可变参数可用）</p>
<p>第一个方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询所有</span></span><br><span class="line">List&lt;Account&gt; accounts = jt.query(<span class="string">"select * from account where money &gt; ?"</span>,<span class="keyword">new</span> AccountRowMapper(),<span class="number">1000f</span>);</span><br></pre></td></tr></table></figure>

<p>需要写一个AccountRowMapper类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义Account的封装策略</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AccountRowMapper</span> <span class="keyword">implements</span> <span class="title">RowMapper</span>&lt;<span class="title">Account</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把结果集中的数据封装到Account中，然后由spring把每个Account加到集合中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rs</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rowNum</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">mapRow</span><span class="params">(ResultSet rs, <span class="keyword">int</span> rowNum)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account();</span><br><span class="line">        account.setId(rs.getInt(<span class="string">"id"</span>));</span><br><span class="line">        account.setName(rs.getString(<span class="string">"name"</span>));</span><br><span class="line">        account.setMoney(rs.getFloat(<span class="string">"money"</span>));</span><br><span class="line">        <span class="keyword">return</span> account;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时问题来了，对比dbutils中的QueryRunner</p>
<img src="/images/2020/2020031902.png">

<p>不同的只有ResultSetHandler和AccountRowMapper，从封装的角度作用是一样的</p>
<p>以前是用的dbutils提供的beanListHandler实现的</p>
<p>难道机智的Spring没有这个实现吗还要自己写？</p>
<p>显然必须有 -&gt; BeanPropertyRowMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询所有</span></span><br><span class="line"><span class="comment">// List&lt;Account&gt; accounts = jt.query("select * from account where money &gt; ?",new AccountRowMapper(),1000f);</span></span><br><span class="line">List&lt;Account&gt; accounts = jt.query(<span class="string">"select * from account where money &gt; ?"</span>,<span class="keyword">new</span> BeanPropertyRowMapper&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>),1000<span class="title">f</span>)</span>;</span><br><span class="line"><span class="keyword">for</span>(Account account : accounts)&#123;</span><br><span class="line">  System.out.println(account);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>能查所有了，查一个也差不多（实际使用BeanPropertyRowMapper比较多）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询一个</span></span><br><span class="line">List&lt;Account&gt; accounts = jt.query(<span class="string">"select * from account where id = ?"</span>,<span class="keyword">new</span> BeanPropertyRowMapper&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>),3)</span>;</span><br><span class="line">System.out.println(accounts.isEmpty()? <span class="string">"没有内容"</span> :accounts.get(<span class="number">0</span>));</span><br></pre></td></tr></table></figure>

<p>还有聚合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询返回一行一列（使用聚合函数，但不加group by子句）</span></span><br><span class="line">Long count = jt.queryForObject(<span class="string">"select count(*) from account where money &gt; ?"</span>,Long<span class="class">.<span class="keyword">class</span>,1000<span class="title">f</span>)</span>;</span><br><span class="line">System.out.println(count);</span><br></pre></td></tr></table></figure>

<p>第二个参数用来指定返回类型（前提是能转，为防溢出一般用Long接收）</p>
<h1 id="JdbcTemplate在Dao中的使用"><a href="#JdbcTemplate在Dao中的使用" class="headerlink" title="JdbcTemplate在Dao中的使用"></a>JdbcTemplate在Dao中的使用</h1><p>写一个IAccountDao接口，实现类中用上面的方法完成功能即可</p>
<h2 id="JdbcDaoSupport的使用"><a href="#JdbcDaoSupport的使用" class="headerlink" title="JdbcDaoSupport的使用"></a>JdbcDaoSupport的使用</h2><p>有一个问题是，如果实际开发中有多个Dao，每个实现类中都要获取JdbcTemplate</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJdbcTemplate</span><span class="params">(JdbcTemplate jdbcTemplate)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.jdbcTemplate = jdbcTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码会重复很多次</p>
<p>可以写一个JdbcDaoSupport类用于抽取这段重复代码</p>
<p>其它DaoImp继承这个类，get其中的jdbcTemplate，dataSource也在其中设置好</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 此类用于抽取dao中的重复代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcDaoSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJdbcTemplate</span><span class="params">(JdbcTemplate jdbcTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jdbcTemplate = jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">getJdbcTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(jdbcTemplate == <span class="keyword">null</span>)&#123;</span><br><span class="line">            jdbcTemplate = createJdbcTemplate(dataSource);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> JdbcTemplate <span class="title">createJdbcTemplate</span><span class="params">(DataSource dataSource)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>显然，setDataSource的时候JdbcTemplate也有了</p>
<p>于是配置的时候就不用配JdbcTemplate了</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置账户的持久层--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"com.itheima.dao.impl.AccountDaoImpl"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--        &lt;property name="jdbcTemplate" ref="jdbcTemplate"&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置JdbcTemplate--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name="dataSource" ref="dataSource"&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/bean&gt;--&gt;</span></span><br></pre></td></tr></table></figure>

<p>那么问题又来了</p>
<p>自己都能写出来的东西Spring显然必须有</p>
<p>把这个自己写的JdbcDaoSupport注释掉，还能跑，为啥呢</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.support.JdbcDaoSupport;</span><br></pre></td></tr></table></figure>

<p>自动导入了Spring的JdbcDaoSupport</p>
<p>打开这个类看一下，就有JdbcTemplate，有setDataSource方法，有上面一堆</p>
<p>所以不需要自己写，继承就完事</p>
<p>继承它的目的就是在有多个Dao时去除重复代码</p>
<p>但是由于源码不能动，就不好通过注解配置了，自己写和直接继承的区别就在于这里，需要权衡</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>记录那些让我心动的设计</title>
    <url>/2020/03/18/aha/</url>
    <content><![CDATA[<h1 id="Trello的列表完成最后一个时会扭动～还有不同的摇摆方式！"><a href="#Trello的列表完成最后一个时会扭动～还有不同的摇摆方式！" class="headerlink" title="Trello的列表完成最后一个时会扭动～还有不同的摇摆方式！"></a>Trello的列表完成最后一个时会扭动～还有不同的摇摆方式！</h1><img src="/images/2020/Mar-18-2020 22-56-56.gif" width=400>
<img src="/images/2020/Mar-18-2020 22-56-19.gif" width=400>
<img src="/images/2020/Mar-18-2020 22-57-26.gif" width=400>
啊Trello我的❤️！

<h1 id="企鹅岛里的企鹅会把花田里的花叼出来种～戳它会摔倒"><a href="#企鹅岛里的企鹅会把花田里的花叼出来种～戳它会摔倒" class="headerlink" title="企鹅岛里的企鹅会把花田里的花叼出来种～戳它会摔倒~"></a>企鹅岛里的企鹅会把花田里的花叼出来种～戳它会摔倒~</h1><img src="/images/2020/20200318_233535.gif" width=300>
天呐我需要一个高清的录屏app --MARK--]]></content>
      <categories>
        <category>Resource</category>
      </categories>
      <tags>
        <tag>aha</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue笔记07 总结</title>
    <url>/2020/03/17/note-vue-07/</url>
    <content><![CDATA[<p>这个教程6p学完了～总结一下这个图书增删改查的demo</p>
<blockquote>
<p><a href="https://www.bilibili.com/video/av85793766" target="_blank" rel="noopener">https://www.bilibili.com/video/av85793766</a></p>
</blockquote>
<hr>
<p><a href="/2020/03/06/note-vue-02/">工程创建</a>略<br>数据库部分略</p>
<h1 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h1><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><img src="/images/2020/screencapture2020-03-17PM5.44.27.jpg" width=400>

<ul>
<li>Book 实体类</li>
<li>BookRepository 继承JpaRepository，提供数据库增删改查接口</li>
<li>BookHandler 相应请求</li>
<li>BookRepositoryTest 测试BookRepository的方法</li>
</ul>
<h2 id="Book"><a href="#Book" class="headerlink" title="Book"></a>Book</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coconutnut.bookstore_server.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.Entity;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GenerationType;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span> <span class="comment">// 根据类名和表名对应绑定</span></span><br><span class="line"><span class="meta">@Data</span>   <span class="comment">// 自动生成get/set</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span> <span class="comment">// 主键</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY) <span class="comment">// id自增</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="BookRepository"><a href="#BookRepository" class="headerlink" title="BookRepository"></a>BookRepository</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coconutnut.bookstore_server.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.coconutnut.bookstore_server.entity.Book;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;&gt;中第一个是实体类，第二个是主键类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Book</span>,<span class="title">Integer</span>&gt; </span>&#123; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>JpaRepository中有常用的增删改查方法，可以直接调用</p>
<p>&amp; 通常流程：先在Test中测试方法，没问题在Controller中写对外接口，浏览器看一下返回值对不对，最后写前端</p>
<p>Spring工程自带一个测试类BookstoreServerApplicationTests<br>自己创建可在接口名上右键-&gt;Go To-&gt;Test-&gt;Create New Test<br>生成的测试类加@SpringBootTest，要测试的类@Autowired自动注入，写的方法加@Test即可</p>
<h2 id="BookHandler"><a href="#BookHandler" class="headerlink" title="BookHandler"></a>BookHandler</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coconutnut.bookstore_server.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.coconutnut.bookstore_server.entity.Book;</span><br><span class="line"><span class="keyword">import</span> com.coconutnut.bookstore_server.repository.BookRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Page;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.PageRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/book"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookRepository bookRepository;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查所有书</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/findAll"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查一页</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/findAll/&#123;page&#125;/&#123;size&#125;"</span>)</span><br><span class="line">    <span class="comment">// @PathVariable获取参数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Page&lt;Book&gt; <span class="title">findAll</span><span class="params">(@PathVariable(<span class="string">"page"</span>)</span> Integer page,@<span class="title">PathVariable</span><span class="params">(<span class="string">"size"</span>)</span> Integer size)</span>&#123;</span><br><span class="line">        PageRequest pageRequest = PageRequest.of(page,size);</span><br><span class="line">        <span class="keyword">return</span> bookRepository.findAll(pageRequest);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新增</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/save"</span>)</span><br><span class="line">    <span class="comment">// @RequestBody把json格式转成java对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(@RequestBody Book book)</span></span>&#123;</span><br><span class="line">        Book result = bookRepository.save(book);</span><br><span class="line">        <span class="keyword">if</span>(result != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查一个</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/findById/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Book <span class="title">findById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookRepository.findById(id).get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改</span></span><br><span class="line">    <span class="meta">@PutMapping</span>(<span class="string">"/update"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(@RequestBody Book book)</span></span>&#123;</span><br><span class="line">        Book result = bookRepository.save(book);</span><br><span class="line">        <span class="keyword">if</span>(result != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除</span></span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"/deleteById/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line">        bookRepository.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h1><h2 id="项目结构-1"><a href="#项目结构-1" class="headerlink" title="项目结构"></a>项目结构</h2><img src="/images/2020/screencapture2020-03-17PM5.46.22.jpg"  width=400>

<ul>
<li>Index.js 配路由</li>
<li>App.vue 常驻的页面</li>
<li>其它vue 嵌入的页面</li>
</ul>
<h2 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h2><p>配置页面的从属关系与路径</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">import</span> Index <span class="keyword">from</span> <span class="string">"../views/Index"</span>;</span><br><span class="line"><span class="keyword">import</span> BookManage <span class="keyword">from</span> <span class="string">'../views/BookManage'</span></span><br><span class="line"><span class="keyword">import</span> AddBook <span class="keyword">from</span> <span class="string">'../views/AddBook'</span></span><br><span class="line"><span class="keyword">import</span> BookUpdate <span class="keyword">from</span> <span class="string">'../views/BookUpdate'</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    name: <span class="string">'图书管理'</span>,</span><br><span class="line">    show: <span class="literal">true</span>,</span><br><span class="line">    component:Index,</span><br><span class="line">    redirect:<span class="string">'book-manage'</span>,</span><br><span class="line">    children:[</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">'/book-manage'</span>,</span><br><span class="line">        name: <span class="string">'查询图书'</span>,</span><br><span class="line">        component: BookManage</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">'/add-book'</span>,</span><br><span class="line">        name: <span class="string">'添加图书'</span>,</span><br><span class="line">        component: AddBook</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/book-update'</span>,</span><br><span class="line">    name: <span class="string">'修改'</span>,</span><br><span class="line">    show: <span class="literal">false</span>,</span><br><span class="line">    component: BookUpdate</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  mode: <span class="string">'history'</span>,</span><br><span class="line">  base: process.env.BASE_URL,</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>

<h2 id="页面嵌套与跳转"><a href="#页面嵌套与跳转" class="headerlink" title="页面嵌套与跳转"></a>页面嵌套与跳转</h2><p>App.vue中template结构</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-container</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-aside</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-menu</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-menu</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-aside</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-main</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-main</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------------------------------------+ </span><br><span class="line">| App                                |  </span><br><span class="line">| +------+-------------------------+ | </span><br><span class="line">| | menu | main                    | |  </span><br><span class="line">| |      | +---------------------+ | |  </span><br><span class="line">| |      | | router-view         | | | </span><br><span class="line">| |      | +---------------------+ | |  </span><br><span class="line">| +------+-------------------------+ | </span><br><span class="line">+------------------------------------+</span><br></pre></td></tr></table></figure>

<p>左侧aside区域中放menu，右侧main中由router动态加载</p>
<p>Index.vue中template结构</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Index.vue中其它都是默认的</p>
<p>根据index.js中的配置，’/‘就加载Index.vue到App.vue的router-view区域，再’/book-manage’加载Index.vue的router-view区域。而Index重定向到book-manage，于是’http:localhost:4000/‘默认就显示了book-manage</p>
<p>而’/book-update’加载Update.vue到App.vue的router-view区域</p>
<p>故显示所有子页面的时候都可以看到菜单</p>
<h2 id="根据routes配置动态加载菜单栏-gt-App-vue"><a href="#根据routes配置动态加载菜单栏-gt-App-vue" class="headerlink" title="根据routes配置动态加载菜单栏 -&gt; App.vue"></a>根据routes配置动态加载菜单栏 -&gt; App.vue</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-container</span> <span class="attr">style</span>=<span class="string">"height: 500px; border: 1px solid #eee"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-aside</span> <span class="attr">width</span>=<span class="string">"200px"</span> <span class="attr">style</span>=<span class="string">"background-color: rgb(238, 241, 246)"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            这里添加router标签，el-menu-item的index就会被作为router路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-menu</span> <span class="attr">router</span> <span class="attr">:default-openeds</span>=<span class="string">"['0','1']"</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--          show属性为true则遍历--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-submenu</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in $router.options.routes"</span> <span class="attr">:index</span>=<span class="string">"index+''"</span> <span class="attr">v-if</span>=<span class="string">"item.show"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"el-icon-setting"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--                    条件判断当前路径是否等于index，更改选中状态，主要是在初始化时增加默认的选中状态--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">v-for</span>=<span class="string">"item2 in item.children"</span> <span class="attr">:index</span>=<span class="string">"item2.path"</span> <span class="attr">:class</span>=<span class="string">"$route.path==item2.path ? 'is-active' : ''"</span>&gt;</span>&#123;&#123;item2.name&#125;&#125;<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-submenu</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-menu</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-aside</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-main</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            上面又index确定的router被显示在这里，也就是main区域中--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-main</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">'app'</span>,</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-id">#app</span> &#123;</span></span><br><span class="line">  font-family: 'Avenir', Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line"><span class="css">  <span class="selector-tag">color</span>: <span class="selector-id">#2c3e50</span>;</span></span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="表单显示所有书籍、翻页、删除-gt-BookManage-vue"><a href="#表单显示所有书籍、翻页、删除-gt-BookManage-vue" class="headerlink" title="表单显示所有书籍、翻页、删除 -&gt; BookManage.vue"></a>表单显示所有书籍、翻页、删除 -&gt; BookManage.vue</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:data</span>=<span class="string">"tableData"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">border</span></span></span><br><span class="line"><span class="tag">            <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">                <span class="attr">fixed</span></span></span><br><span class="line"><span class="tag">                <span class="attr">prop</span>=<span class="string">"id"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">label</span>=<span class="string">"编号"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">width</span>=<span class="string">"150"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">                <span class="attr">prop</span>=<span class="string">"name"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">label</span>=<span class="string">"书名"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">width</span>=<span class="string">"150"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">                <span class="attr">prop</span>=<span class="string">"author"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">label</span>=<span class="string">"作者"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">width</span>=<span class="string">"150"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                fixed="right"--&gt;</span></span><br><span class="line">                label="操作"</span><br><span class="line">                width="100"&gt;</span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">"scope"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">"edit(scope.row)"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">size</span>=<span class="string">"small"</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">"deleteBook(scope.row)"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">size</span>=<span class="string">"small"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-pagination</span></span></span><br><span class="line"><span class="tag">            <span class="attr">background</span></span></span><br><span class="line"><span class="tag">            <span class="attr">layout</span>=<span class="string">"prev, pager, next"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:page-size</span>=<span class="string">"pageSize"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:total</span>=<span class="string">"total"</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">current-change</span>=<span class="string">"clickPage"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 删除</span></span></span><br><span class="line">            deleteBook(row) &#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">const</span> _this = <span class="keyword">this</span></span></span><br><span class="line"><span class="actionscript">                axios.delete(<span class="string">'http://localhost:8181/book/deleteById/'</span>+row.id).then(<span class="function"><span class="keyword">function</span><span class="params">(resp)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 这里没有管返回信息，也可以判断状态，200就是成功</span></span></span><br><span class="line"><span class="actionscript">                    _this.$alert(<span class="string">'《'</span>+row.name+<span class="string">'》删除成功！'</span>, <span class="string">'消息'</span>, &#123;</span></span><br><span class="line"><span class="actionscript">                        confirmButtonText: <span class="string">'确定'</span>,</span></span><br><span class="line"><span class="javascript">                        callback: <span class="function"><span class="params">action</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">                            <span class="comment">// 刷新</span></span></span><br><span class="line"><span class="javascript">                            <span class="built_in">window</span>.location.reload()</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            <span class="comment">// 跳转到编辑</span></span></span><br><span class="line">            edit(row) &#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">// this.$router.push('/book-update')</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.$router.push(&#123;</span></span><br><span class="line"><span class="actionscript">                    path: <span class="string">'/book-update'</span>,</span></span><br><span class="line">                    query: &#123;</span><br><span class="line">                        id: row.id</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            <span class="comment">// 翻页</span></span></span><br><span class="line">            clickPage(index)&#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">const</span> _this = <span class="keyword">this</span></span></span><br><span class="line"><span class="actionscript">                axios.get(<span class="string">'http://localhost:8181/book/findAll/'</span>+(index<span class="number">-1</span>)+<span class="string">'/6'</span>).then(<span class="function"><span class="keyword">function</span><span class="params">(resp)</span></span>&#123;</span></span><br><span class="line">                    _this.tableData = resp.data.content</span><br><span class="line">                    _this.pageSize = resp.data.size</span><br><span class="line">                    _this.total = resp.data.totalElements</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">                pageSize:<span class="string">'6'</span>,</span></span><br><span class="line"><span class="actionscript">                total:<span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">                tableData:<span class="string">''</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 加载书籍信息到表单</span></span></span><br><span class="line">        created()&#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">const</span> _this = <span class="keyword">this</span></span></span><br><span class="line"><span class="actionscript">            axios.get(<span class="string">'http://localhost:8181/book/findAll/0/6'</span>).then(<span class="function"><span class="keyword">function</span><span class="params">(resp)</span></span>&#123;</span></span><br><span class="line">                _this.tableData = resp.data.content</span><br><span class="line">                _this.pageSize = resp.data.size</span><br><span class="line">                _this.total = resp.data.totalElements</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="新增-gt-AddBook-vue"><a href="#新增-gt-AddBook-vue" class="headerlink" title="新增 -&gt; AddBook.vue"></a>新增 -&gt; AddBook.vue</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    model设置数据绑定，rules设置校验规则，ref是名字，在提交时使用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-form</span> <span class="attr">style</span>=<span class="string">"width: 60%"</span> <span class="attr">:model</span>=<span class="string">"ruleForm"</span> <span class="attr">:rules</span>=<span class="string">"rules"</span> <span class="attr">ref</span>=<span class="string">"ruleForm"</span> <span class="attr">label-width</span>=<span class="string">"100px"</span> <span class="attr">class</span>=<span class="string">"demo-ruleForm"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"书名"</span> <span class="attr">prop</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"ruleForm.name"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"作者"</span> <span class="attr">prop</span>=<span class="string">"author"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"ruleForm.author"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"submitForm('ruleForm')"</span>&gt;</span>立即创建<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">"resetForm('ruleForm')"</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line">                ruleForm: &#123;</span><br><span class="line"><span class="actionscript">                    name: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">                    author: <span class="string">''</span>,</span></span><br><span class="line">                &#125;,</span><br><span class="line">                rules: &#123;</span><br><span class="line">                    name: [</span><br><span class="line"><span class="actionscript">                        &#123; required: <span class="literal">true</span>, message: <span class="string">'请输入书名'</span>, trigger: <span class="string">'blur'</span> &#125;,</span></span><br><span class="line">                    ],</span><br><span class="line">                    author: [</span><br><span class="line"><span class="actionscript">                        &#123; required: <span class="literal">true</span>, message: <span class="string">'请输入作者'</span>, trigger: <span class="string">'blur'</span> &#125;,</span></span><br><span class="line">                    ],</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 提交表单</span></span></span><br><span class="line">            submitForm(formName) &#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">const</span> _this = <span class="keyword">this</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.$refs[formName].validate(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span></span><br><span class="line">                    if (valid) &#123;</span><br><span class="line"><span class="actionscript">                        axios.post(<span class="string">'http://localhost:8181/book/save'</span>,<span class="keyword">this</span>.ruleForm).then(<span class="function"><span class="keyword">function</span><span class="params">(resp)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                            <span class="keyword">if</span>(resp.data == <span class="string">'success'</span>)&#123;</span></span><br><span class="line">                                _this.$message(&#123;</span><br><span class="line"><span class="actionscript">                                    message: <span class="string">'《'</span>+_this.ruleForm.name+<span class="string">'》'</span>+<span class="string">'添加成功'</span>,</span></span><br><span class="line"><span class="actionscript">                                    type: <span class="string">'success'</span></span></span><br><span class="line">                                &#125;)</span><br><span class="line"><span class="actionscript">                                _this.$router.push(<span class="string">'/book-manage'</span>)</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            <span class="comment">// 重置表单</span></span></span><br><span class="line">            resetForm(formName) &#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.$refs[formName].resetFields();</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="修改-gt-BookUpdate-vue"><a href="#修改-gt-BookUpdate-vue" class="headerlink" title="修改 -&gt;  BookUpdate.vue"></a>修改 -&gt;  BookUpdate.vue</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    model设置数据绑定，rules设置校验规则，ref是名字，在提交时使用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">style</span>=<span class="string">"width: 60%"</span> <span class="attr">:model</span>=<span class="string">"ruleForm"</span> <span class="attr">:rules</span>=<span class="string">"rules"</span> <span class="attr">ref</span>=<span class="string">"ruleForm"</span> <span class="attr">label-width</span>=<span class="string">"100px"</span> <span class="attr">class</span>=<span class="string">"demo-ruleForm"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"编号"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"ruleForm.id"</span> <span class="attr">readonly</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"书名"</span> <span class="attr">prop</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"ruleForm.name"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"作者"</span> <span class="attr">prop</span>=<span class="string">"author"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"ruleForm.author"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"submitForm('ruleForm')"</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">"submitForm('ruleForm')"</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">        data() &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line">                ruleForm: &#123;</span><br><span class="line"><span class="actionscript">                    id: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">                    name: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">                    author: <span class="string">''</span>,</span></span><br><span class="line">                &#125;,</span><br><span class="line">                rules: &#123;</span><br><span class="line">                    name: [</span><br><span class="line"><span class="actionscript">                        &#123; required: <span class="literal">true</span>, message: <span class="string">'请输入书名'</span>, trigger: <span class="string">'blur'</span> &#125;,</span></span><br><span class="line">                    ],</span><br><span class="line">                    author: [</span><br><span class="line"><span class="actionscript">                        &#123; required: <span class="literal">true</span>, message: <span class="string">'请输入作者'</span>, trigger: <span class="string">'blur'</span> &#125;,</span></span><br><span class="line">                    ],</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 提交表单</span></span></span><br><span class="line">            submitForm(formName) &#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">const</span> _this = <span class="keyword">this</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.$refs[formName].validate(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span></span><br><span class="line">                    if (valid) &#123;</span><br><span class="line"><span class="actionscript">                        axios.put(<span class="string">'http://localhost:8181/book/update'</span>,<span class="keyword">this</span>.ruleForm).then(<span class="function"><span class="keyword">function</span><span class="params">(resp)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                            <span class="keyword">if</span>(resp.data == <span class="string">'success'</span>)&#123;</span></span><br><span class="line">                                _this.$message(&#123;</span><br><span class="line"><span class="actionscript">                                    message: <span class="string">'《'</span>+_this.ruleForm.name+<span class="string">'》'</span>+<span class="string">'修改成功'</span>,</span></span><br><span class="line"><span class="actionscript">                                    type: <span class="string">'success'</span></span></span><br><span class="line">                                &#125;)</span><br><span class="line"><span class="actionscript">                                _this.$router.push(<span class="string">'/book-manage'</span>)</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">            resetForm(formName) &#123;</span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.$refs[formName].resetFields();</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        <span class="comment">// 填入初始信息</span></span></span><br><span class="line">        created()&#123;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 是route不是router!</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// alert(this.$route.query.id)</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">const</span> _this = <span class="keyword">this</span></span></span><br><span class="line"><span class="actionscript">            axios.get(<span class="string">'http://localhost:8181/book/findById/'</span>+<span class="keyword">this</span>.$route.query.id).then(<span class="function"><span class="keyword">function</span><span class="params">(resp)</span></span>&#123;</span></span><br><span class="line">                _this.ruleForm = resp.data</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="一点想法"><a href="#一点想法" class="headerlink" title="一点想法"></a>一点想法</h1><p>Spring Boot + Vue 真是好方便</p>
<p>后端基本不用写什么，要用的方法都有</p>
<p>前端要什么模版直接在element ui里找来用</p>
<p>跟着敲这个demo的时候碰到的坑基本都是和路由有关的，router转来转去有点晕</p>
<p>但是 总之</p>
<p>我真的从来没有在哪个教程听见这么多“就行了”、“自动”、“不用管了”…极度舒适！有架子不用徒手爬墙真好</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue笔记06 修改和删除</title>
    <url>/2020/03/17/note-vue-06/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/av85793766?p=6" target="_blank" rel="noopener">https://www.bilibili.com/video/av85793766?p=6</a></p>
</blockquote>
<h1 id="跳转到修改页面"><a href="#跳转到修改页面" class="headerlink" title="跳转到修改页面"></a>跳转到修改页面</h1><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;template slot-scope=<span class="string">"scope"</span>&gt;</span><br><span class="line">  &lt;el-button @click="edit(scope.row)" type="text" size="small"&gt;修改&lt;/el-button&gt;</span><br><span class="line">  &lt;el-button type="text" size="small"&gt;删除&lt;/el-button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>@click中绑定点击事件</p>
<p>这里跳转用this而不需要_this，因为不在回调函数中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">edit(row) &#123;</span><br><span class="line">	this.$router.push(&#39;&#x2F;book-update&#39;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>DEBUG</strong></p>
<p>这里跳转过去之后，整页都是修改页面，左侧菜单没有了</p>
<p>和源码对比，发现左侧菜单的代码放在App.vue而不是Index.vue 我失忆了？</p>
<p>不过也就可以解释了，加载管理、新增和修改替换的是main里的Index部分，不管怎么替换菜单都还在</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------------------------------------+ </span><br><span class="line">| App                                |  </span><br><span class="line">| +------+-------------------------+ | </span><br><span class="line">| | menu | main                    | |  </span><br><span class="line">| |      | +---------------------+ | |  </span><br><span class="line">| |      | | Index               | | | </span><br><span class="line">| |      | +---------------------+ | |  </span><br><span class="line">| +------+-------------------------+ | </span><br><span class="line">+------------------------------------+</span><br></pre></td></tr></table></figure>

<p>而我的把menu写在Index里面，管理和新增替换的是Index里的main区域，menu还在，而修改直接把Index换掉了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------------------------------------+ </span><br><span class="line">| App                                |  </span><br><span class="line">| +--------------------------------+ | </span><br><span class="line">| | Index                          | |  </span><br><span class="line">| | +------+---------------------+ | |  </span><br><span class="line">| | | menu | main                | | | </span><br><span class="line">| | +------+---------------------+ | |  </span><br><span class="line">| +--------------------------------+ | </span><br><span class="line">+------------------------------------+</span><br></pre></td></tr></table></figure>

<p>改过来之后页面就正常了</p>
<hr>
<h1 id="修改页面"><a href="#修改页面" class="headerlink" title="修改页面"></a>修改页面</h1><p>先把新增界面表单复制过去</p>
<p>在created方法中调后台数据，显示到页面</p>
<p>首先需要获取当前的id，BookManage页面在router中带参数穿过去</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">edit(row) &#123;</span><br><span class="line">  <span class="comment">// this.$router.push('/book-update')</span></span><br><span class="line">  <span class="keyword">this</span>.$router.push(&#123;</span><br><span class="line">    path: <span class="string">'/book-update'</span>,</span><br><span class="line">    query: &#123;</span><br><span class="line">    	id: row.id</span><br><span class="line">  	&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>BookUpdate页面中接收</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  submitForm(formName) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;,</span><br><span class="line">    resetForm(formName) &#123;</span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">created()&#123;</span><br><span class="line">    <span class="comment">// 是route不是router!</span></span><br><span class="line">    alert(<span class="keyword">this</span>.$route.query.id)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里created()在methods外面</p>
<h1 id="获取待修改修改图书信息"><a href="#获取待修改修改图书信息" class="headerlink" title="获取待修改修改图书信息"></a>获取待修改修改图书信息</h1><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><p>Repository的findById()返回的是Option类，相当于把Book又包了一层，再用get()得到Book对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">findById</span><span class="params">()</span></span>&#123;</span><br><span class="line">  Book book = repository.findById(<span class="number">1</span>).get();</span><br><span class="line">  System.out.println(book);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先测试一下，接口没有问题，再写对外提供的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/findById/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Book <span class="title">findById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> bookRepository.findById(id).get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="对接"><a href="#对接" class="headerlink" title="对接"></a>对接</h2><p>获取数据并绑定到表单上</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">created()&#123;</span><br><span class="line">  <span class="keyword">const</span> _this = <span class="keyword">this</span></span><br><span class="line">  axios.get(<span class="string">'http://localhost:8181/book/findById/'</span>+<span class="keyword">this</span>.$route.query.id).then(<span class="function"><span class="keyword">function</span>(<span class="params">resp</span>)</span>&#123;</span><br><span class="line">    _this.ruleForm = resp.data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>表单加一个id属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"编号"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"ruleForm.id"</span> <span class="attr">readonly</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>不可修改，加readonly，不需要校验，删prop=”id”</p>
<p>下面ruleForm也要加对应的id</p>
<h1 id="修改图书"><a href="#修改图书" class="headerlink" title="修改图书"></a>修改图书</h1><p>后端写一个修改方法</p>
<p>repository没有update方法，save可以用于修改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span>(<span class="string">"/update"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(@RequestBody Book book)</span></span>&#123;</span><br><span class="line">  Book result = bookRepository.save(book);</span><br><span class="line">  <span class="keyword">if</span>(result != <span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>内容和save是一样的，但是为了符合RESTful风格，新写一个PutMapping的</p>
<p>前端submitForm里面稍微修改一下，post改成put，url改一下，message改成修改成功</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.put(<span class="string">'http://localhost:8181/book/update'</span>,<span class="keyword">this</span>.ruleForm).then(<span class="function"><span class="keyword">function</span>(<span class="params">resp</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(resp.data == <span class="string">'success'</span>)&#123;</span><br><span class="line">    _this.$message(&#123;</span><br><span class="line">      message: <span class="string">'《'</span>+_this.ruleForm.name+<span class="string">'》'</span>+<span class="string">'修改成功'</span>,</span><br><span class="line">      type: <span class="string">'success'</span></span><br><span class="line">    &#125;)</span><br><span class="line">    _this.$router.push(<span class="string">'/book-manage'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="删除图书"><a href="#删除图书" class="headerlink" title="删除图书"></a>删除图书</h1><p>后端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping</span>(<span class="string">"/deleteById/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line">  bookRepository.deleteById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>button绑一个事件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">"deleteBook(scope.row)"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">size</span>=<span class="string">"small"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>不能叫delete，和关键字冲突</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">deleteBook(row) &#123;</span><br><span class="line">  <span class="keyword">const</span> _this = <span class="keyword">this</span></span><br><span class="line">  axios.delete(<span class="string">'http://localhost:8181/book/deleteById/'</span>+row.id).then(<span class="function"><span class="keyword">function</span>(<span class="params">resp</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 这里没有管返回信息，也可以判断状态，200就是成功</span></span><br><span class="line">    _this.$alert(<span class="string">'《'</span>+row.name+<span class="string">'》删除成功！'</span>, <span class="string">'消息'</span>, &#123;</span><br><span class="line">      confirmButtonText: <span class="string">'确定'</span>,</span><br><span class="line">      callback: <span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 刷新</span></span><br><span class="line">        <span class="built_in">window</span>.location.reload()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>完整的增删改查就实现了～</p>
<h1 id="修改菜单"><a href="#修改菜单" class="headerlink" title="修改菜单"></a>修改菜单</h1><p>由于加了一个路由，而菜单是根据路由动态加载的，会把配置的路由全部遍历出来，于是菜单左侧就多了一个</p>
<p>可以添加一个属性来判断，show是true就遍历，false就不遍历</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    name: <span class="string">'图书管理'</span>,</span><br><span class="line">    show: <span class="literal">true</span>,</span><br><span class="line">    component:Index,</span><br><span class="line">    redirect:<span class="string">'book-manage'</span>,</span><br><span class="line">    children:[</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">'/book-manage'</span>,</span><br><span class="line">        name: <span class="string">'查询图书'</span>,</span><br><span class="line">        component: BookManage</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">'/add-book'</span>,</span><br><span class="line">        name: <span class="string">'添加图书'</span>,</span><br><span class="line">        component: AddBook</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/book-update'</span>,</span><br><span class="line">    name: <span class="string">'修改'</span>,</span><br><span class="line">    show: <span class="literal">false</span>,</span><br><span class="line">    component: BookUpdate</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>App.vue中通过v-if=”item.show”判断</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-container</span> <span class="attr">style</span>=<span class="string">"height: 500px; border: 1px solid #eee"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-aside</span> <span class="attr">width</span>=<span class="string">"200px"</span> <span class="attr">style</span>=<span class="string">"background-color: rgb(238, 241, 246)"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            这里添加router标签，el-menu-item的index就会被作为router路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-menu</span> <span class="attr">router</span> <span class="attr">:default-openeds</span>=<span class="string">"['0','1']"</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--          show属性为true则遍历--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-submenu</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in $router.options.routes"</span> <span class="attr">:index</span>=<span class="string">"index+''"</span> <span class="attr">v-if</span>=<span class="string">"item.show"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"el-icon-setting"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--                    条件判断当前路径是否等于index，更改选中状态，主要是在初始化时增加默认的选中状态--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">v-for</span>=<span class="string">"item2 in item.children"</span> <span class="attr">:index</span>=<span class="string">"item2.path"</span> <span class="attr">:class</span>=<span class="string">"$route.path==item2.path ? 'is-active' : ''"</span>&gt;</span>&#123;&#123;item2.name&#125;&#125;<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-submenu</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-menu</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-aside</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-main</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            上面又index确定的router被显示在这里，也就是main区域中--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-main</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>完工！</p>
<img src="/images/2020/screencapture2020-03-17PM5.05.48.jpg">]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue笔记05 表单</title>
    <url>/2020/03/16/note-vue-05/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/av85793766?p=5" target="_blank" rel="noopener">https://www.bilibili.com/video/av85793766?p=5</a></p>
</blockquote>
<h1 id="新增书籍页面"><a href="#新增书籍页面" class="headerlink" title="新增书籍页面"></a>新增书籍页面</h1><p>继续实现对图书完整的增删改查</p>
<p>官网找一个form表单</p>
<p>数据是双向绑定的，:model和v-model用来绑定对象</p>
<p>可以添加校验规则，通过rules绑定。校验规则中，触发事件blur指失去焦点时触发校验</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">"ruleForm"</span> <span class="attr">:rules</span>=<span class="string">"rules"</span> <span class="attr">ref</span>=<span class="string">"ruleForm"</span> <span class="attr">label-width</span>=<span class="string">"100px"</span> <span class="attr">class</span>=<span class="string">"demo-ruleForm"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"书名"</span> <span class="attr">prop</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"ruleForm.name"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"作者"</span> <span class="attr">prop</span>=<span class="string">"author"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"ruleForm.author"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"submitForm('ruleForm')"</span>&gt;</span>立即创建<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">"resetForm('ruleForm')"</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                ruleForm: &#123;</span><br><span class="line">                    name: <span class="string">''</span>,</span><br><span class="line">                    author: <span class="string">''</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                rules: &#123;</span><br><span class="line">                    name: [</span><br><span class="line">                        &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'请输入书名'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> &#125;,</span><br><span class="line">                    ],</span><br><span class="line">                    author: [</span><br><span class="line">                        &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">'请输入作者'</span>, <span class="attr">trigger</span>: <span class="string">'blur'</span> &#125;,</span><br><span class="line">                    ],</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            submitForm(formName) &#123;</span><br><span class="line">                <span class="keyword">this</span>.$refs[formName].validate(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">                        alert(<span class="string">'submit!'</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">'error submit!!'</span>);</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">            resetForm(formName) &#123;</span><br><span class="line">                <span class="keyword">this</span>.$refs[formName].resetFields();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h1><p>Book的id要加自增注解，否则会出问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)  <span class="comment">// id自增</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>controller中加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/save"</span>)</span><br><span class="line"><span class="comment">// @RequestBody把json格式转成java对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(@RequestBody Book book)</span></span>&#123;</span><br><span class="line">  Book result = bookRepository.save(book);</span><br><span class="line">  <span class="keyword">if</span>(result != <span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"sucess"</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="对接"><a href="#对接" class="headerlink" title="对接"></a>对接</h1><p>传Book对象，直接追加就行了，不需要拼接</p>
<p>提示信息可以再去官网找一个合适的拿来用</p>
<p>添加成功后跳转到查询页面，用router.push</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">submitForm(formName) &#123;</span><br><span class="line">  <span class="keyword">const</span> _this = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">this</span>.$refs[formName].validate(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">      axios.post(<span class="string">'http://localhost:8181/book/save'</span>,<span class="keyword">this</span>.ruleForm).then(<span class="function"><span class="keyword">function</span>(<span class="params">resp</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(resp.data == <span class="string">'success'</span>)&#123;</span><br><span class="line">          _this.$message(&#123;</span><br><span class="line">            message: <span class="string">'《'</span>+_this.ruleForm.name+<span class="string">'》'</span>+<span class="string">'添加成功'</span>,</span><br><span class="line">            type: <span class="string">'success'</span></span><br><span class="line">          &#125;)</span><br><span class="line">          _this.$router.push(<span class="string">'/book-manage'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>发现一个小问题</p>
<p>这样弹出顶部提示之后直接切换页面，左侧的选中状态有问题，原页面和新页面都选中了</p>
<p>但是用需要点击确定的提示框之后切回去，选中状态就没有问题</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">_this.$alert(<span class="string">'添加成功'</span>,<span class="string">'MSG'</span>,&#123;</span><br><span class="line">  confirmButtonTest: <span class="string">'OK'</span>,</span><br><span class="line">  callback: <span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.$message(&#123;</span><br><span class="line">      type: <span class="string">'info'</span>,</span><br><span class="line">      message: <span class="string">`action: <span class="subst">$&#123;action&#125;</span>`</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">_this.$router.push(<span class="string">'/book-manage'</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue笔记04 分页</title>
    <url>/2020/03/16/note-vue-04/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/av85793766?p=4" target="_blank" rel="noopener">https://www.bilibili.com/video/av85793766?p=4</a></p>
</blockquote>
<h1 id="表格与分页"><a href="#表格与分页" class="headerlink" title="表格与分页"></a>表格与分页</h1><p>在上一次的基础上添加表格和分页，在官网拷过来，放在Page1</p>
<p>注意不能直接并列放在template下，由于只能有一个根节点，外面要套一个div</p>
<h2 id="表格数据加载"><a href="#表格数据加载" class="headerlink" title="表格数据加载"></a>表格数据加载</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">    <span class="attr">fixed</span></span></span><br><span class="line"><span class="tag">    <span class="attr">prop</span>=<span class="string">"id"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">label</span>=<span class="string">"编号"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">width</span>=<span class="string">"150"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">tableData: [&#123;</span><br><span class="line">     id: <span class="string">'01'</span>,</span><br><span class="line">     name: <span class="string">'书籍1'</span>,</span><br><span class="line">     author: <span class="string">'作者1'</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据prop的值和数据对应</p>
<h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-pagination</span></span></span><br><span class="line"><span class="tag">     <span class="attr">background</span></span></span><br><span class="line"><span class="tag">     <span class="attr">layout</span>=<span class="string">"prev, pager, next"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">:total</span>=<span class="string">"1000"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>total是总记录数，默认每页10条，此时就有1000/10=100页</p>
<h2 id="绑定点击事件"><a href="#绑定点击事件" class="headerlink" title="绑定点击事件"></a>绑定点击事件</h2><p>用@current-change=”page”</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-pagination</span></span></span><br><span class="line"><span class="tag">               <span class="attr">background</span></span></span><br><span class="line"><span class="tag">               <span class="attr">layout</span>=<span class="string">"prev, pager, next"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">:total</span>=<span class="string">"100"</span></span></span><br><span class="line"><span class="tag">               @<span class="attr">current-change</span>=<span class="string">"clickPage"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Script中加</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        methods: &#123;</span><br><span class="line">            clickPage()&#123;</span><br><span class="line">                alert(<span class="number">1</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>即可看到效果</p>
<h2 id="点击翻页"><a href="#点击翻页" class="headerlink" title="点击翻页"></a>点击翻页</h2><p>把传过来的对象打印看看，发现就是页面的index</p>
<p>绑测试的数据试试，后面在连后台</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">clickPage(index)&#123;</span><br><span class="line">  <span class="keyword">switch</span>(index)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      <span class="keyword">this</span>.tableData = [&#123;</span><br><span class="line">        id: <span class="string">'01'</span>,</span><br><span class="line">        name: <span class="string">'书籍1'</span>,</span><br><span class="line">        author: <span class="string">'作者1'</span>,</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        id: <span class="string">'02'</span>,</span><br><span class="line">        name: <span class="string">'书籍2'</span>,</span><br><span class="line">        author: <span class="string">'作者2'</span>,</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        id: <span class="string">'03'</span>,</span><br><span class="line">        name: <span class="string">'书籍3'</span>,</span><br><span class="line">        author: <span class="string">'作者3'</span>,</span><br><span class="line">      &#125;]</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      <span class="keyword">this</span>.tableData = [&#123;</span><br><span class="line">        id: <span class="string">'04'</span>,</span><br><span class="line">        name: <span class="string">'书籍4'</span>,</span><br><span class="line">        author: <span class="string">'作者4'</span>,</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        id: <span class="string">'05'</span>,</span><br><span class="line">        name: <span class="string">'书籍5'</span>,</span><br><span class="line">        author: <span class="string">'作者5'</span>,</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        id: <span class="string">'06'</span>,</span><br><span class="line">        name: <span class="string">'书籍6'</span>,</span><br><span class="line">        author: <span class="string">'作者6'</span>,</span><br><span class="line">      &#125;]</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>可以正常切换</p>
<h1 id="后端添加分页操作"><a href="#后端添加分页操作" class="headerlink" title="后端添加分页操作"></a>后端添加分页操作</h1><p>Spring Boot的Repository把分页也解决了</p>
<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookstoreServerApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    BookRepository repository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        PageRequest pageRequest = PageRequest.of(<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line">        Page&lt;Book&gt; page = repository.findAll(pageRequest);</span><br><span class="line">        System.out.println(page);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/images/2020/screencapture2020-03-16AM11.08.48.jpg">

<p>需要的东西都取出来了</p>
<p>直接调方法实现接口就可以了</p>
<p>在controller中，接收参数，调findAll，返回Page</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/findAll/&#123;page&#125;/&#123;size&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Page&lt;Book&gt; <span class="title">findAll</span><span class="params">(@PathVariable(<span class="string">"page"</span>)</span> Integer page,@<span class="title">PathVariable</span><span class="params">(<span class="string">"size"</span>)</span> Integer size)</span>&#123;</span><br><span class="line">        PageRequest pageRequest = PageRequest.of(page,size);</span><br><span class="line">        <span class="keyword">return</span> bookRepository.findAll(pageRequest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/images/2020/screencapture2020-03-16AM11.15.19.jpg">

<h1 id="对接"><a href="#对接" class="headerlink" title="对接"></a>对接</h1><p>装插件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vue add axios</span><br></pre></td></tr></table></figure>

<p>axio.get().then()</p>
<p>get里是请求，then里是回调函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">created()&#123;</span><br><span class="line">	axios.get(<span class="string">'http://localhost:8181/book/findAll/0/6'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">resp</span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(resp)</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/images/2020/screencapture2020-03-16AM11.22.45.jpg">

<p>看到数据得到了</p>
<p>Page中data.content部分就是书籍数据，赋值即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    pageSize:<span class="string">'6'</span>,</span><br><span class="line">    total:<span class="string">''</span>,</span><br><span class="line">    tableData:<span class="string">''</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">created()&#123;</span><br><span class="line">  <span class="keyword">const</span> _this = <span class="keyword">this</span></span><br><span class="line">  axios.get(<span class="string">'http://localhost:8181/book/findAll/0/6'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">resp</span>)</span>&#123;</span><br><span class="line">    _this.tableData = resp.data.content</span><br><span class="line">    _this.pageSize = resp.data.size</span><br><span class="line">    _this.total = resp.data.totalElements</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-pagination</span></span></span><br><span class="line"><span class="tag">               <span class="attr">background</span></span></span><br><span class="line"><span class="tag">               <span class="attr">layout</span>=<span class="string">"prev, pager, next"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">:page-size</span>=<span class="string">"pageSize"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">:total</span>=<span class="string">"total"</span></span></span><br><span class="line"><span class="tag">               @<span class="attr">current-change</span>=<span class="string">"clickPage"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>并且修改点击事件绑定的函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">clickPage(index)&#123;</span><br><span class="line">  <span class="keyword">const</span> _this = <span class="keyword">this</span></span><br><span class="line">  axios.get(<span class="string">'http://localhost:8181/book/findAll/'</span>+(index<span class="number">-1</span>)+<span class="string">'/6'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">resp</span>)</span>&#123;</span><br><span class="line">    _this.tableData = resp.data.content</span><br><span class="line">    _this.pageSize = resp.data.size</span><br><span class="line">    _this.total = resp.data.totalElements</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>就可以点击翻页了</p>
<img src="/images/2020/screencapture2020-03-16AM11.35.54.jpg">

<img src="/images/2020/screencapture2020-03-16AM11.35.57.jpg">

]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>各种各样的动态规划小结</title>
    <url>/2020/03/14/dynamic-programming/</url>
    <content><![CDATA[<h1 id="填充dp数组的方式"><a href="#填充dp数组的方式" class="headerlink" title="填充dp数组的方式"></a>填充dp数组的方式</h1><p>目前碰到的题目中，一般填充dp要么是按照顺序一个一个填，要么是先全初始化为-1，缺哪个补哪个</p>
<p>以<a href="#point">最长上升子序列</a>为例</p>
<h2 id="按顺序扫描"><a href="#按顺序扫描" class="headerlink" title="按顺序扫描"></a>按顺序扫描</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            dp[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;i;k++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(nums[i]&gt;nums[k])&#123;</span><br><span class="line">                        dp[i] = Math.max(dp[i],dp[k]+<span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            max = Math.max(max,dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="按需要计算"><a href="#按需要计算" class="headerlink" title="按需要计算"></a>按需要计算</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer[] dp;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] nums;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.nums = nums;</span><br><span class="line">        dp = <span class="keyword">new</span> Integer[nums.length];</span><br><span class="line">        Arrays.fill(dp,-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            max = Math.max(max,getDp(i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDp</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(dp[i]==-<span class="number">1</span>)&#123;</span><br><span class="line">            dp[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;i;k++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(nums[i]&gt;nums[k])&#123;</span><br><span class="line">                        dp[i] = Math.max(dp[i],getDp(k)+<span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="一些想法"><a href="#一些想法" class="headerlink" title="一些想法"></a>一些想法</h3><p>在这个例子中，由于dp的每个元素都需要填充（然后找最大值），而且可以方便的按照顺序遍历，所以方法一显得简单一些</p>
<p>但是有的题目中顺序不是很好找，比如有的二维dp数组中，要填充的是三角形区域，有的是从左往右扫，有的是从上往下扫，其它一些奇怪的dp几乎找不到顺序</p>
<p>而且很多题目中并不需要把整个dp都填满，只需要得到特定一个元素即为答案，其实没必要按顺序把所有的元素都算出来</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// getDp真是非常套路</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDp</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(dp[i]==-<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="comment">// 没算过就算</span></span><br><span class="line">    <span class="comment">// 算的过程中继续getDp(k)</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 算过了直接返回</span></span><br><span class="line">  <span class="keyword">return</span> dp[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以感觉，很容易找到顺序、或者必须填满的可以用方法一，其它的直接getDp()省脑细胞</p>
<h1 id="一维"><a href="#一维" class="headerlink" title="一维 "></a>一维 <h1 id="point"></h1></h1><h2 id="例1-最长上升子序列-LeetCode-300"><a href="#例1-最长上升子序列-LeetCode-300" class="headerlink" title="例1 最长上升子序列 (LeetCode 300)"></a>例1 最长上升子序列 (LeetCode 300)</h2><a href="https://leetcode-cn.com/problems/longest-increasing-subsequence/" title="" target="">link</a>

<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>给定一个无序的整数数组，找到其中最长上升子序列的长度</p>
<h3 id="状态表示"><a href="#状态表示" class="headerlink" title="状态表示"></a>状态表示</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dp[i] 表示第i个元素（包含i）之前最大上升子序列的长度</span><br></pre></td></tr></table></figure>

<h3 id="状态转移方程"><a href="#状态转移方程" class="headerlink" title="状态转移方程"></a>状态转移方程</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dp[i] &#x3D; max&#123; dp[k] + 1&#125;</span><br><span class="line">其中 0&lt;&#x3D;k&lt;i 且 nums[i]&gt;nums[k]</span><br></pre></td></tr></table></figure>

<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>见：<a href="#填充dp数组的方式">填充dp数组的方式</a></p>
<h1 id="二维"><a href="#二维" class="headerlink" title="二维"></a>二维</h1><h2 id="例1-最长公共子序列问题（算法设计技巧与分析-沙特版-p130）"><a href="#例1-最长公共子序列问题（算法设计技巧与分析-沙特版-p130）" class="headerlink" title="例1 最长公共子序列问题（算法设计技巧与分析 沙特版 p130）"></a>例1 最长公共子序列问题（算法设计技巧与分析 沙特版 p130）</h2><h3 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h3><p>找两个字符串的最长公共子序列长度</p>
<p>如A=zxyxyz B=xyyzx 则最长公共子序列为xyyz</p>
<h3 id="状态表示-1"><a href="#状态表示-1" class="headerlink" title="状态表示"></a>状态表示</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">令 A &#x3D; a1a2…an，B &#x3D; b1b2…bn</span><br><span class="line">L[i , j] 表示 a1a2…ai 和 b1b2…bj 的最长公共子序列的长度</span><br></pre></td></tr></table></figure>

<h3 id="状态转移方程-1"><a href="#状态转移方程-1" class="headerlink" title="状态转移方程"></a>状态转移方程</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">当 A[i] &#x3D;&#x3D; B[i]，L[i , j] &#x3D; L[i-1 , j-1] + 1</span><br><span class="line">当 A[i] !&#x3D; B[i]，L[i , j] &#x3D; max&#123; L[i-1 , j] , L[i , j-1] &#125;</span><br></pre></td></tr></table></figure>

<p>eg:<br>A = horse，B = ros<br>i为2，j为2时，o == o，L[ ho , ro ] = L[ h , r ] + 1<br>i为3，j为3时，r != s，L[ hor , ros ] = max{ L[ ho , ros ] , L[ hor , ro ] }</p>
<h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">LCS</span><span class="params">(String word1, String word2)</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">  <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[word1.length()+<span class="number">1</span>][word2.length()+<span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;word1.length()+<span class="number">1</span>;i++) &#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;word2.length()+<span class="number">1</span>;j++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(word1.charAt(i-<span class="number">1</span>)==word2.charAt(j-<span class="number">1</span>)) &#123;</span><br><span class="line">				dp[i][j] = dp[i-<span class="number">1</span>][j-<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">			&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">				dp[i][j] = Math.max(dp[i-<span class="number">1</span>][j], dp[i][j-<span class="number">1</span>]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">  </span><br><span class="line">	<span class="keyword">return</span> dp[word1.length()][word2.length()];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="例2-编辑距离-LeetCode-72"><a href="#例2-编辑距离-LeetCode-72" class="headerlink" title="例2 编辑距离 (LeetCode 72)"></a>例2 编辑距离 (LeetCode 72)</h2><a href="https://leetcode-cn.com/problems/edit-distance/" title="" target="">link</a>

<h3 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h3><p>给定两个单词 word1 和 word2，计算将 word1 转换成 word2 所使用的最少操作数</p>
<p>操作包括：</p>
<ul>
<li>插入一个字符</li>
<li>删除一个字符</li>
<li>替换一个字符</li>
</ul>
<h3 id="状态表示-2"><a href="#状态表示-2" class="headerlink" title="状态表示"></a>状态表示</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">令 A &#x3D; a1a2…an，B &#x3D; b1b2…bn</span><br><span class="line">L[i , j] 表示 a1a2…ai 和 b1b2…bj 的最短编辑距离</span><br></pre></td></tr></table></figure>

<p>和公共子序列一样</p>
<h3 id="状态转移方程-2"><a href="#状态转移方程-2" class="headerlink" title="状态转移方程"></a>状态转移方程</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">当 A[i] &#x3D;&#x3D; B[i]，L[i , j] &#x3D; L[i-1 , j-1]</span><br><span class="line">当 A[i] !&#x3D; B[i]，L[i , j] &#x3D; min&#123; L[i-1 , j-1] , L[i-1 , j] , L[i , j-1] &#125; + 1</span><br><span class="line">其中，L[i-1 , j-1]代表替换操作，L[i-1 , j]代表删除操作，L[i , j-1]代表插入操作</span><br></pre></td></tr></table></figure>

<p>eg:<br>A = horse，B = ros<br>i为2，j为2时，o == o，L[ ho , ro ] = L[ h , r ]，无需继续编辑<br>i为3，j为3时，r != s，L[ hor , ros ] = min{ L[ ho , ro ] , L[ ho , ros ] , L[ hor , ro ] } + 1<br>L[ ho , ro ] + 1 代表，在ho已经编辑成ro之后，将r替换成s<br>L[ ho , ros ] + 1 代表，在ho已经编辑成ros之后，将r删除<br>L[ hor , ro ] + 1 代表，在hor已经编辑成ro之后，插入s</p>
<h3 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">minDistance</span><span class="params">(String word1, String word2)</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[word1.length()+<span class="number">1</span>][word2.length()+<span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;word1.length()+<span class="number">1</span>;i++) &#123;</span><br><span class="line">    	    dp[i][<span class="number">0</span>] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;word2.length()+<span class="number">1</span>;i++) &#123;</span><br><span class="line">    	    dp[<span class="number">0</span>][i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;word1.length()+<span class="number">1</span>;i++) &#123;</span><br><span class="line">	    	<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;word2.length()+<span class="number">1</span>;j++) &#123;</span><br><span class="line">		    	<span class="keyword">if</span>(word1.charAt(i-<span class="number">1</span>)==word2.charAt(j-<span class="number">1</span>)) &#123;</span><br><span class="line">			    	dp[i][j] = dp[i-<span class="number">1</span>][j-<span class="number">1</span>];</span><br><span class="line">    			&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">	    			<span class="keyword">int</span> min = Math.min(dp[i-<span class="number">1</span>][j], dp[i][j-<span class="number">1</span>]);</span><br><span class="line">		    		min = Math.min(min, dp[i-<span class="number">1</span>][j-<span class="number">1</span>]);</span><br><span class="line">			    	dp[i][j] = min+<span class="number">1</span>;</span><br><span class="line">			    &#125;</span><br><span class="line">    		&#125;</span><br><span class="line">	    &#125;	</span><br><span class="line">	</span><br><span class="line">	    <span class="keyword">return</span> dp[word1.length()][word2.length()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>这题dp第0行和第0列初始化为0,1,2,3…</p>
<h2 id="例3-回文子串-LeetCode-647"><a href="#例3-回文子串-LeetCode-647" class="headerlink" title="例3 回文子串 (LeetCode 647)"></a>例3 回文子串 (LeetCode 647)</h2><a href="https://leetcode-cn.com/problems/palindromic-substrings/" title="" target="">link</a>

<h3 id="描述-3"><a href="#描述-3" class="headerlink" title="描述"></a>描述</h3><p>统计给定字符串中回文子串的个数</p>
<p>如”aaa”中有”a”, “a”, “a”, “aa”, “aa”, “aaa”共6个</p>
<h3 id="状态表示-3"><a href="#状态表示-3" class="headerlink" title="状态表示"></a>状态表示</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dp[i][j] 表示字符串的第i到j位(含)是否为回文串</span><br></pre></td></tr></table></figure>

<h3 id="状态转移方程-3"><a href="#状态转移方程-3" class="headerlink" title="状态转移方程"></a>状态转移方程</h3><p>见注释</p>
<h3 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    Integer[][] dp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countSubstrings</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.length()==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        dp = <span class="keyword">new</span> Integer[s.length()][s.length()];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            Arrays.fill(dp[i],-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;s.length();j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(getDp(i,j,s)==<span class="number">1</span>)&#123;</span><br><span class="line">                    cnt++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDp</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j,String s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(dp[i][j]==-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==j)&#123;</span><br><span class="line">                <span class="comment">// "a"是</span></span><br><span class="line">                dp[i][j] = <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s.charAt(i)!=s.charAt(j))&#123;</span><br><span class="line">                <span class="comment">// "ab"、"a***b"不是</span></span><br><span class="line">                dp[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(j-i==<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="comment">// "aa"是</span></span><br><span class="line">                    dp[i][j] = <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">// "a****a"</span></span><br><span class="line">                    <span class="keyword">if</span>(getDp(i+<span class="number">1</span>,j-<span class="number">1</span>,s)==<span class="number">1</span>)&#123;</span><br><span class="line">                        <span class="comment">// 中间是则是</span></span><br><span class="line">                        dp[i][j] = <span class="number">1</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        dp[i][j] = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="三维"><a href="#三维" class="headerlink" title="三维"></a>三维</h1><h2 id="例1-二指输入的的最小距离-LeetCode-1320"><a href="#例1-二指输入的的最小距离-LeetCode-1320" class="headerlink" title="例1 二指输入的的最小距离 (LeetCode 1320)"></a>例1 二指输入的的最小距离 (LeetCode 1320)</h2><a href="https://leetcode-cn.com/problems/minimum-distance-to-type-a-word-using-two-fingers/" title="" target="">link</a>

<h3 id="描述-4"><a href="#描述-4" class="headerlink" title="描述"></a>描述</h3><img src="/images/2020/screencapture2020-03-14PM4.50.56.jpg" width=400>

<p>二指输入法键盘上，每个字母可用坐标表示，如P(2,3)</p>
<p>给定一个待输入字符串，计算仅用两根手指，输入该字符串的最小移动距离（起始位置任意，代价位0）</p>
<p>距离按 |x1-x2| + |y1-y2| 计算</p>
<h3 id="状态表示-4"><a href="#状态表示-4" class="headerlink" title="状态表示"></a>状态表示</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dp[i][l][r] 表示输入完第i个字母后，左手位置为l，右手位置为r</span><br><span class="line">l、r对应字母编号，如A-0,B-1</span><br></pre></td></tr></table></figure>

<h3 id="状态转移方程-4"><a href="#状态转移方程-4" class="headerlink" title="状态转移方程"></a>状态转移方程</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">记第i个字母位cur，第i-1个字母为pre</span><br><span class="line"></span><br><span class="line">1.左手移动到cur处</span><br><span class="line">	- 移动前左手在pre处，则左手必然从pre移到cur，右手可以在任意位置m</span><br><span class="line">	   dp[i][cur][m] &#x3D; dp[i-1][pre][m] + dis(pre,cur);</span><br><span class="line">	- 移动前右手在pre处(即m&#x3D;&#x3D;pre)，则左手可以从任意位置n移到cur</span><br><span class="line">	   dp[i][cur][m] &#x3D; dp[i-1][n][m] + dis(n,cur);</span><br><span class="line"></span><br><span class="line">故 dp[i][cur][m] &#x3D; min&#123; dp[i-1][pre][m] , dp[i-1][n][pre] &#125;</span><br><span class="line">其中m取值0~26，n取值0~26</span><br><span class="line"></span><br><span class="line">2.右手移动到cur处</span><br><span class="line">	- 移动前右手在pre处，则右手必然从pre移到cur，左手可以在任意位置m</span><br><span class="line">	   dp[i][m][cur] &#x3D; dp[i-1][m][pre] + dis(pre,cur);</span><br><span class="line">	- 移动前左手在pre处(即m&#x3D;&#x3D;pre)，则右手可以从任意位置n移到cur</span><br><span class="line">	   dp[i][m][cur] &#x3D; dp[i-1][m][n] + dis(n,cur);</span><br><span class="line"></span><br><span class="line">同上，dp[i][cur][m] &#x3D; min&#123; dp[i-1][pre][m] , dp[i-1][n][pre] &#125;</span><br></pre></td></tr></table></figure>

<h3 id="实现-4"><a href="#实现-4" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minimumDistance</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] words = <span class="keyword">new</span> <span class="keyword">int</span>[word.length()];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;word.length();i++)&#123;</span><br><span class="line">            words[i] = word.charAt(i) - <span class="string">'A'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[][][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[words.length][<span class="number">26</span>][<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">            <span class="comment">// 左手开始</span></span><br><span class="line">            dp[<span class="number">0</span>][words[<span class="number">0</span>]][i] = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 右手开始</span></span><br><span class="line">            dp[<span class="number">0</span>][i][words[<span class="number">0</span>]] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;words.length;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> cur = words[i];</span><br><span class="line">            <span class="keyword">int</span> pre = words[i-<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span> dis = calDis(cur,pre);</span><br><span class="line">            <span class="comment">// 至少有一只手在cur，另一只手可以在任意位置</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> m=<span class="number">0</span>;m&lt;<span class="number">26</span>;m++)&#123;</span><br><span class="line">                <span class="comment">// 右手不动，左手从pre移到cur（上一个字符是左手按的）</span></span><br><span class="line">                dp[i][cur][m] = dp[i-<span class="number">1</span>][pre][m] + dis;</span><br><span class="line">                <span class="comment">// 左手不动，右手从pre移到cur（上一个字符是右手按的）</span></span><br><span class="line">                dp[i][m][cur] = dp[i-<span class="number">1</span>][m][pre] + dis;</span><br><span class="line">                <span class="keyword">if</span>(m==pre)&#123;</span><br><span class="line">                    <span class="comment">// 移动前另一只手刚好在pre处</span></span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">0</span>;n&lt;<span class="number">26</span>;n++)&#123;</span><br><span class="line">                        <span class="keyword">int</span> dis2 = calDis(n,cur);</span><br><span class="line">                        <span class="comment">// 右手不动，左手从任意位置移到cur（上一个字符是右手按的）</span></span><br><span class="line">                        dp[i][cur][m] = Math.min(dp[i][cur][m],dp[i-<span class="number">1</span>][n][m]+dis2);</span><br><span class="line">                        <span class="comment">// 左手不动，右手从任意位置移到cur（上一个字符是左手按的）</span></span><br><span class="line">                        dp[i][m][cur] = Math.min(dp[i][m][cur],dp[i-<span class="number">1</span>][m][n]+dis2);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> min = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">int</span> last = words[words.length-<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> m=<span class="number">0</span>;m&lt;<span class="number">26</span>;m++)&#123;</span><br><span class="line">            min = Math.min(min,dp[words.length-<span class="number">1</span>][last][m]);</span><br><span class="line">            min = Math.min(min,dp[words.length-<span class="number">1</span>][m][last]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calDis</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x1 = a / <span class="number">6</span>, y1 = a % <span class="number">6</span>;</span><br><span class="line">        <span class="keyword">int</span> x2 = b / <span class="number">6</span>, y2 = b % <span class="number">6</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)(Math.abs(x1 - x2)) + (<span class="keyword">int</span>)(Math.abs(y1 - y2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="优化为二维"><a href="#优化为二维" class="headerlink" title="优化为二维"></a>优化为二维</h3><p>由于两只手是完全对称的，不需要知道具体哪只手在cur处，只要有一只在就行了</p>
<h4 id="状态表示-5"><a href="#状态表示-5" class="headerlink" title="状态表示"></a>状态表示</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dp[i][rest] 表示一只手在cur，另一只手在rest处时的最小移动距离</span><br></pre></td></tr></table></figure>

<h4 id="状态转移方程-5"><a href="#状态转移方程-5" class="headerlink" title="状态转移方程"></a>状态转移方程</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一只手从pre移动到cur，另一只手随便在哪</span><br><span class="line">dp[i][anywhere] &#x3D; dp[i-1][anywhere] + dis(pre,cur)</span><br><span class="line"></span><br><span class="line">若另一只手恰好在pre处，这只手可以从任何地方移动到cur</span><br><span class="line">dp[i][pre] &#x3D; dp[i-1][anywhere] + dis(anywhere,cur)</span><br></pre></td></tr></table></figure>

<h4 id="实现-5"><a href="#实现-5" class="headerlink" title="实现"></a>实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minimumDistance</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] words = <span class="keyword">new</span> <span class="keyword">int</span>[word.length()];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;word.length();i++)&#123;</span><br><span class="line">            words[i] = word.charAt(i) - <span class="string">'A'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[words.length][<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;words.length;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> cur = words[i];</span><br><span class="line">            <span class="keyword">int</span> pre = words[i-<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span> dis = calDis(cur,pre);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> m=<span class="number">0</span>;m&lt;<span class="number">26</span>;m++)&#123;</span><br><span class="line">                <span class="comment">// 一只手从pre移动到cur，另一只手随便在哪</span></span><br><span class="line">                dp[i][m] = dp[i-<span class="number">1</span>][m] + dis;</span><br><span class="line">                <span class="keyword">if</span>(m==pre)&#123;</span><br><span class="line">                    <span class="comment">// 另一只手恰好在pre处，这只手可以从任何地方移动到cur</span></span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">0</span>;n&lt;<span class="number">26</span>;n++)&#123;</span><br><span class="line">                        dp[i][m] = Math.min(dp[i][m],dp[i-<span class="number">1</span>][n]+calDis(n,cur));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> min = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> m=<span class="number">0</span>;m&lt;<span class="number">26</span>;m++)&#123;</span><br><span class="line">            min = Math.min(min,dp[words.length-<span class="number">1</span>][m]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calDis</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x1 = a / <span class="number">6</span>, y1 = a % <span class="number">6</span>;</span><br><span class="line">        <span class="keyword">int</span> x2 = b / <span class="number">6</span>, y2 = b % <span class="number">6</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)(Math.abs(x1 - x2)) + (<span class="keyword">int</span>)(Math.abs(y1 - y2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>优化前 执行用时：<strong>19 ms</strong> 内存消耗：<strong>42.6 MB</strong></p>
<p>优化后 执行用时：<strong>7 ms</strong> 内存消耗：<strong>38.1 MB</strong></p>
<p>也不多的样子…但是思路简单多了</p>
<h1 id="状态压缩"><a href="#状态压缩" class="headerlink" title="状态压缩"></a>状态压缩</h1><p>将状态用二进制串表示，二进制串以int形式作为下标</p>
<h2 id="例1-参加考试的最大学生数-LeetCode-1349"><a href="#例1-参加考试的最大学生数-LeetCode-1349" class="headerlink" title="例1 参加考试的最大学生数 (LeetCode 1349)"></a>例1 参加考试的最大学生数 (LeetCode 1349)</h2><a href="https://leetcode-cn.com/problems/maximum-students-taking-exam/" title="" target="">link</a>

<h3 id="描述-5"><a href="#描述-5" class="headerlink" title="描述"></a>描述</h3><img src="/images/2020/screencapture2020-03-13PM5.17.37.jpg">

<ul>
<li>教室里有的座位是坏的</li>
<li>学生可以看到左、右、左上、右上方向的试卷</li>
</ul>
<p>计算该考场可以容纳的一起参加考试且无法作弊的最大学生人数</p>
<h3 id="状态压缩-1"><a href="#状态压缩-1" class="headerlink" title="状态压缩"></a>状态压缩</h3><p>用一个二进制串表示一行中每个位置有没有人坐</p>
<p>如 0011 表示 无无有有，记为3</p>
<h3 id="状态表示-6"><a href="#状态表示-6" class="headerlink" title="状态表示"></a>状态表示</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dp[row][pre] 表示当row-1行的坐法为pre时，第row行及后面所有行最多坐多少人</span><br></pre></td></tr></table></figure>

<p>其中，pre初始化的大小为 1 &lt;&lt; 列数</p>
<p>如 有6列，最多 2 ^ 6 种坐法，即 1 &lt;&lt; 6</p>
<h3 id="状态转移方程-6"><a href="#状态转移方程-6" class="headerlink" title="状态转移方程"></a>状态转移方程</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dp[row][pre] &#x3D; max&#123; dp[row+1][cur] + Integer.bitCount(cur) &#125;</span><br><span class="line">其中cur是row行所有可行状态</span><br></pre></td></tr></table></figure>

<p>每次需先判断坐法为 cur 是否可行</p>
<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dp[0][0] 即为 第-1行没人坐时，第1行及后面所有行最多坐的人数</span><br></pre></td></tr></table></figure>

<h3 id="实现-6"><a href="#实现-6" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">char</span>[][] seats;</span><br><span class="line">    <span class="keyword">private</span> Integer[][] dp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxStudents</span><span class="params">(<span class="keyword">char</span>[][] seats)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seats = seats;</span><br><span class="line">        dp = <span class="keyword">new</span> Integer[seats.length][<span class="number">1</span> &lt;&lt; seats[<span class="number">0</span>].length];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ret = getDp(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDp</span><span class="params">(<span class="keyword">int</span> row,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(row == seats.length)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(dp[row][pre] == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 遍历row行所有坐法</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;dp[<span class="number">0</span>].length;i++)&#123;</span><br><span class="line">                <span class="comment">// 检查是否符合要求</span></span><br><span class="line">                <span class="keyword">if</span>(isValid(row,pre,i))&#123;</span><br><span class="line">                    <span class="keyword">int</span> backNum = getDp(row+<span class="number">1</span>,i);     <span class="comment">// 后排能坐多少</span></span><br><span class="line">                    <span class="keyword">int</span> curNum = Integer.bitCount(i); <span class="comment">// 本排能坐多少</span></span><br><span class="line">                    res = Math.max(res,backNum+curNum);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            dp[row][pre] = res;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[row][pre];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  	<span class="comment">// 判断当第row-1行坐法为pre时，row行坐法为cur是否可行</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> pre, <span class="keyword">int</span> cur)</span> </span>&#123; <span class="comment">//... &#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Exercise</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode.337 打家劫舍</title>
    <url>/2020/03/12/exercise/</url>
    <content><![CDATA[<a href="https://leetcode-cn.com/problems/house-robber-iii/" title="" target="">题目地址</a>

<h1 id="暴力抢劫"><a href="#暴力抢劫" class="headerlink" title="暴力抢劫"></a>暴力抢劫</h1><p>写出来倒是挺快，结果发现时间爆炸</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.max(find(root,<span class="keyword">true</span>),find(root,<span class="keyword">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(TreeNode root, <span class="keyword">boolean</span> isGap)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(!isGap)&#123;</span><br><span class="line">            <span class="comment">// 本层抢，下层不能抢</span></span><br><span class="line">            ret+=root.val;</span><br><span class="line">            ret+=find(root.left,<span class="keyword">false</span>);</span><br><span class="line">            ret+=find(root.right,<span class="keyword">false</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> next1 = Math.max(find(root.left,<span class="keyword">true</span>),find(root.left,<span class="keyword">false</span>));</span><br><span class="line">            <span class="keyword">int</span> next2 = Math.max(find(root.right,<span class="keyword">true</span>),find(root.right,<span class="keyword">false</span>));</span><br><span class="line">            ret = next1 + next2;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">执行用时：2817 ms</span><br><span class="line">内存消耗：39.3 MB</span><br></pre></td></tr></table></figure>

<p>这样写每次都递归找了至少2次、甚至4次子节点</p>
<p>相当于把二叉树省下来的log又给翻倍乘回去了</p>
<h1 id="机智的劫匪"><a href="#机智的劫匪" class="headerlink" title="机智的劫匪"></a>机智的劫匪</h1><p>看了题解中一次返回2种情况，修改一下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] ans = find(root);</span><br><span class="line">        <span class="keyword">return</span> Math.max(ans[<span class="number">0</span>],ans[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] find(TreeNode root)&#123;</span><br><span class="line">        <span class="comment">// ret0-本层不抢；ret1-本层抢</span></span><br><span class="line">        <span class="keyword">int</span>[] ret = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>[] left = find(root.left);</span><br><span class="line">        <span class="keyword">int</span>[] right = find(root.right);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 下层爱抢不抢</span></span><br><span class="line">        ret[<span class="number">0</span>] = Math.max(left[<span class="number">0</span>],left[<span class="number">1</span>]) + Math.max(right[<span class="number">0</span>],right[<span class="number">1</span>]);</span><br><span class="line">        <span class="comment">// 下层不能抢</span></span><br><span class="line">        ret[<span class="number">1</span>] = root.val + left[<span class="number">0</span>] + right[<span class="number">0</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">执行用时：1 ms</span><br><span class="line">内存消耗：41.6 MB</span><br></pre></td></tr></table></figure>

<p>这样就只遍历了1次</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>递归中如果要分情况讨论，一次返回多个结果，不要多次调用递归</p>
]]></content>
      <categories>
        <category>Exercise</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 10 写文件权限问题</title>
    <url>/2020/03/12/debug-android/</url>
    <content><![CDATA[<h1 id="bug描述"><a href="#bug描述" class="headerlink" title="bug描述"></a>bug描述</h1><p>换手机之后一个以前没毛病的写文件操作写不了了<br>估摸着是版本问题</p>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>AndroidManifest.xml中，application标签中加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android:requestLegacyExternalStorage&#x3D;&quot;true&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>ref:<br><a href="https://blog.csdn.net/weixin_40093242/article/details/104067573?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">https://blog.csdn.net/weixin_40093242/article/details/104067573?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Debug</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring笔记10 AOP</title>
    <url>/2020/03/12/note-spring-10/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/av47952931" target="_blank" rel="noopener">https://www.bilibili.com/video/av47952931</a><br>p56~65</p>
</blockquote>
<hr>
<h1 id="AOP概述"><a href="#AOP概述" class="headerlink" title="AOP概述"></a>AOP概述</h1><p>Aspect Oriented Programming 面向切面编程</p>
<ul>
<li><p>扩展功能不通过修改源代码实现</p>
</li>
<li><p>AOP采取横向抽取机制，取代了传统的纵向继承体系重复性代码</p>
</li>
<li><p>底层使用动态代理方法实现</p>
<ul>
<li>有接口时，使用jdk动态代理，创建和接口实现平级的代理对象</li>
<li>无接口时，使用cglib动态代理，创建类的子类的代理对象</li>
</ul>
</li>
</ul>
<h2 id="作用及优势"><a href="#作用及优势" class="headerlink" title="作用及优势"></a>作用及优势</h2><p>作用：</p>
<ul>
<li>在程序运行期间，不修改源码对已有方法进行增强</li>
</ul>
<p>优势：</p>
<ul>
<li>减少重复代码</li>
<li>提高开发效率</li>
<li>维护方便</li>
</ul>
<h1 id="Spring中的AOP"><a href="#Spring中的AOP" class="headerlink" title="Spring中的AOP"></a>Spring中的AOP</h1><h2 id="相关术语"><a href="#相关术语" class="headerlink" title="相关术语"></a>相关术语</h2><h3 id="Joinpoint-连接点"><a href="#Joinpoint-连接点" class="headerlink" title="Joinpoint 连接点"></a>Joinpoint 连接点</h3><p>类中可以被增强的方法</p>
<h3 id="Pointcut-切入点"><a href="#Pointcut-切入点" class="headerlink" title="Pointcut 切入点"></a>Pointcut 切入点</h3><p>类中实际增强的方法</p>
<h3 id="Advice-通知-增强"><a href="#Advice-通知-增强" class="headerlink" title="Advice 通知/增强"></a>Advice 通知/增强</h3><p>切入点上扩展的功能</p>
<ul>
<li>前置增强：在方法之前执行</li>
<li>后置增强：在方法正常执行之后执行</li>
<li>最终增强：在最后执行，无论是否有异常</li>
<li>环绕增强：在之前和之后执行</li>
<li>异常增强：方法出现异常时执行</li>
</ul>
<h3 id="Introduction-引介"><a href="#Introduction-引介" class="headerlink" title="Introduction 引介"></a>Introduction 引介</h3><p>一种特殊的增强，在不修改类代码的前提下，可以在运行期间为类动态地添加一些方法或Field</p>
<h3 id="Target-目标对象"><a href="#Target-目标对象" class="headerlink" title="Target 目标对象"></a>Target 目标对象</h3><p>要增强的类</p>
<h3 id="Weaving-织入"><a href="#Weaving-织入" class="headerlink" title="Weaving 织入"></a>Weaving 织入</h3><p>把增强应用到目标对象的过程</p>
<h3 id="Proxy-代理"><a href="#Proxy-代理" class="headerlink" title="Proxy 代理"></a>Proxy 代理</h3><p>一个类被AOP织入增强后，就产生一个结果代理类</p>
<h3 id="Aspect-切面"><a href="#Aspect-切面" class="headerlink" title="Aspect 切面"></a>Aspect 切面</h3><p>切入点 + 通知/引介</p>
<h1 id="Spring基于XML的AOP配置"><a href="#Spring基于XML的AOP配置" class="headerlink" title="Spring基于XML的AOP配置"></a>Spring基于XML的AOP配置</h1><h2 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h2><ol>
<li><p>配置增强Bean</p>
</li>
<li><p>使用aop:config标签表明开始AOP的配置</p>
</li>
<li><p>使用aop:aspect标签表明配置切面</p>
<p>id属性：是给切面提供一个唯一标识<br>ref属性：是指定通知类bean的Id</p>
</li>
<li><p>在aop:aspect标签的内部使用对应标签来配置通知的类型</p>
<p>aop:before：表示配置前置通知（实例中让printLog方法在切入点方法前执行）<br>method属性：用于指定类中哪个方法是前置通知<br>pointcut属性：用于指定切入点表达式，该表达式的含义指的是对业务层中哪些方法增强</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">切入点表达式的写法：</span><br><span class="line">	关键字：execution(表达式)</span><br><span class="line">	表达式：</span><br><span class="line">		访问修饰符  返回值  包名.包名.包名...类名.方法名(参数列表)</span><br><span class="line">		</span><br><span class="line">	标准的表达式写法：</span><br><span class="line">		public void com.itheima.service.impl.AccountServiceImpl.saveAccount()</span><br><span class="line">	访问修饰符可以省略</span><br><span class="line">		void com.itheima.service.impl.AccountServiceImpl.saveAccount()</span><br><span class="line">	返回值可以使用通配符，表示任意返回值</span><br><span class="line">		* com.itheima.service.impl.AccountServiceImpl.saveAccount()</span><br><span class="line">	包名可以使用通配符，表示任意包。但是有几级包，就需要写几个*.</span><br><span class="line">		* *.*.*.*.AccountServiceImpl.saveAccount())</span><br><span class="line">	包名可以使用..表示当前包及其子包</span><br><span class="line">		* *..AccountServiceImpl.saveAccount()</span><br><span class="line">	类名和方法名都可以使用*来实现通配</span><br><span class="line">		* *..*.*()</span><br><span class="line"></span><br><span class="line">	参数列表：</span><br><span class="line">		可以直接写数据类型：</span><br><span class="line">			基本类型直接写名称           int</span><br><span class="line">			引用类型写包名.类名的方式   java.lang.String</span><br><span class="line">			可以使用通配符表示任意类型，但是必须有参数</span><br><span class="line">			可以使用..表示有无参数均可，有参数可以是任意类型</span><br><span class="line"></span><br><span class="line">	全通配写法：</span><br><span class="line">		* *..*.*(..)</span><br><span class="line"></span><br><span class="line">	实际开发中切入点表达式的通常写法：</span><br><span class="line">		切到业务层实现类下的所有方法</span><br><span class="line">			* com.itheima.service.impl.*.*(..)</span><br></pre></td></tr></table></figure>

<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="xml配置"><a href="#xml配置" class="headerlink" title="xml配置"></a>xml配置</h3><p>在Spring Framework Documentation的Core中搜索xmlns:aop，导入约束</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置srping的Ioc,把service对象配置进来--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.itheima.service.impl.AccountServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">     <span class="comment">&lt;!-- 配置Logger类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"logger"</span> <span class="attr">class</span>=<span class="string">"com.itheima.utils.Logger"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置AOP--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置切面 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"logAdvice"</span> <span class="attr">ref</span>=<span class="string">"logger"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置通知的类型，并且建立通知方法和切入点方法的关联--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"printLog"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* com.itheima.service.impl.*.*(..))"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的业务层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟保存账户 无返回值无参</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟更新账户 无返回值有参</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除账户 有返回值无参</span></span><br><span class="line">   <span class="function"><span class="keyword">int</span>  <span class="title">deleteAccount</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行了保存"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行了更新"</span>+i);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行了删除"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于记录日志的工具类，它里面提供了公共的代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于打印日志：计划让其在切入点方法执行之前执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">printLog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Logger类中的pringLog方法开始记录日志了。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试AOP的配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AOPTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        <span class="comment">//2.获取对象</span></span><br><span class="line">        IAccountService as = (IAccountService)ac.getBean(<span class="string">"accountService"</span>);</span><br><span class="line">        <span class="comment">//3.执行方法</span></span><br><span class="line">        as.saveAccount();</span><br><span class="line">        as.updateAccount(<span class="number">1</span>);</span><br><span class="line">        as.deleteAccount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/images/2020/screencapture2020-03-12AM9.48.57.jpg">

<h2 id="配置切入点表达式"><a href="#配置切入点表达式" class="headerlink" title="配置切入点表达式"></a>配置切入点表达式</h2><p>id属性用于指定表达式的唯一标识</p>
<p>expression属性用于指定表达式内容</p>
<p>该标签写在aop:aspect标签内部只能当前切面使用</p>
<p>还可以写在aop:aspect外面，此时就变成了所有切面可用</p>
<p>注意：必须放在切面之前，否则会报错（还不提醒怎么错的）</p>
<h2 id="4种常用通知类型"><a href="#4种常用通知类型" class="headerlink" title="4种常用通知类型"></a>4种常用通知类型</h2><p>继续在刚才的实例上加其它通知类型</p>
<p>使用切入点表达式简化配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置AOP--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置切入点表达式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pt1"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.itheima.service.impl.*.*(..))"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:pointcut</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置切面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"logAdvice"</span> <span class="attr">ref</span>=<span class="string">"logger"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置前置通知：在切入点方法执行之前执行--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"beforePrintLog"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span> &gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置后置通知：在切入点方法正常执行之后值。它和异常通知永远只能执行一个--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">"afterReturningPrintLog"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-returning</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置异常通知：在切入点方法执行产生异常之后执行。它和后置通知永远只能执行一个--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">"afterThrowingPrintLog"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-throwing</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置最终通知：无论切入点方法是否正常执行它都会在其后面执行--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"afterPrintLog"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>切入点方法无异常时输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">前置通知Logger类中的beforePrintLog方法开始记录日志了...</span><br><span class="line">执行了保存</span><br><span class="line">后置通知Logger类中的afterReturningPrintLog方法开始记录日志了...</span><br><span class="line">最终通知Logger类中的afterPrintLog方法开始记录日志了...</span><br></pre></td></tr></table></figure>

<p>切入点方法有异常时输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">前置通知Logger类中的beforePrintLog方法开始记录日志了...</span><br><span class="line">执行了保存</span><br><span class="line">异常通知Logger类中的afterThrowingPrintLog方法开始记录日志了...</span><br><span class="line">最终通知Logger类中的afterPrintLog方法开始记录日志了...</span><br><span class="line">Exception in thread &quot;main&quot; java.lang.ArithmeticException: &#x2F; by zero</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>后置和异常只会执行其中一个</p>
<h2 id="环绕通知"><a href="#环绕通知" class="headerlink" title="环绕通知"></a>环绕通知</h2><p>下面这样配置环绕通知是不行的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">aroundPringLog</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"Logger类中的afterThrowingPrintLog方法开始记录日志了..."</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>这样配置后，切入点方法不执行了，只执行通知方法</p>
<p>分析：对比动态代理中，发现其中的环绕通知有明确的切入点调用，而这样没有</p>
<p>解决：使用Spring的ProceedingJoinPoint接口。该接口有一个proceed()方法，在程序执行时，Spring会提供该接口的实现类供我们使用</p>
<p>这样可以控制增强方法何时执行，前置、后置、异常、最终都可以实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">	 <span class="function"><span class="keyword">public</span> Object <span class="title">aroundPringLog</span><span class="params">(ProceedingJoinPoint pjp)</span></span>&#123;</span><br><span class="line">        Object rtValue = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Object[] args = pjp.getArgs();<span class="comment">// 得到方法执行所需的参数</span></span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"Logger类中的aroundPringLog方法开始记录日志了...前置"</span>);</span><br><span class="line">            rtValue = pjp.proceed(args);<span class="comment">// 明确调用业务层方法（切入点方法）</span></span><br><span class="line">            System.out.println(<span class="string">"Logger类中的aroundPringLog方法开始记录日志了...后置"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> rtValue;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Throwable t)&#123;</span><br><span class="line">            System.out.println(<span class="string">"Logger类中的aroundPringLog方法开始记录日志了...异常"</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(t);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"Logger类中的aroundPringLog方法开始记录日志了...最终"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置环绕通知--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">"aroundPringLog"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt1"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:around</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Spring基于注解的AOP配置"><a href="#Spring基于注解的AOP配置" class="headerlink" title="Spring基于注解的AOP配置"></a>Spring基于注解的AOP配置</h1><h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h2><h3 id="xml配置-1"><a href="#xml配置-1" class="headerlink" title="xml配置"></a>xml配置</h3><p>约束比基于xml的多了context</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置spring创建容器时要扫描的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.itheima"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置spring开启注解AOP的支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Logger配置（4种常用类型）！-建议别用，有bug"><a href="#Logger配置（4种常用类型）！-建议别用，有bug" class="headerlink" title="Logger配置（4种常用类型）！[建议别用，有bug]"></a>Logger配置（4种常用类型）！[建议别用，有bug]</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"logger"</span>)</span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">// 表示当前类是一个切面类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置切入点表达式</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* com.itheima.service.impl.*.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pt1</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注意要加()</span></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"pt1()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">beforePrintLog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"前置通知Logger类中的beforePrintLog方法开始记录日志了..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning</span>(<span class="string">"pt1()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">afterReturningPrintLog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"后置通知Logger类中的afterReturningPrintLog方法开始记录日志了..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing</span>(<span class="string">"pt1()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">afterThrowingPrintLog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"异常通知Logger类中的afterThrowingPrintLog方法开始记录日志了..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"pt1()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">afterPrintLog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"最终通知Logger类中的afterPrintLog方法开始记录日志了..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行输出：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">前置通知Logger类中的beforePrintLog方法开始记录日志了...</span><br><span class="line">执行了保存</span><br><span class="line">最终通知Logger类中的afterPrintLog方法开始记录日志了...</span><br><span class="line">后置通知Logger类中的afterReturningPrintLog方法开始记录日志了...</span><br></pre></td></tr></table></figure>

<p>发现最终在后置之前执行了（异常也一样）</p>
<p>没有办法，因为Spring基于注解的AOP中，调用顺序确实有问题，实际开发中应该慎重</p>
<h3 id="Logger配置（环绕通知）"><a href="#Logger配置（环绕通知）" class="headerlink" title="Logger配置（环绕通知）"></a>Logger配置（环绕通知）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"logger"</span>)</span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">// 表示当前类是一个切面类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置切入点表达式</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* com.itheima.service.impl.*.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pt1</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"pt1()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">aroundPringLog</span><span class="params">(ProceedingJoinPoint pjp)</span></span>&#123;</span><br><span class="line">        Object rtValue = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Object[] args = pjp.getArgs();<span class="comment">// 得到方法执行所需的参数</span></span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"Logger类中的aroundPringLog方法开始记录日志了...前置"</span>);</span><br><span class="line"></span><br><span class="line">            rtValue = pjp.proceed(args);<span class="comment">// 明确调用业务层方法（切入点方法）</span></span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"Logger类中的aroundPringLog方法开始记录日志了...后置"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> rtValue;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Throwable t)&#123;</span><br><span class="line">            System.out.println(<span class="string">"Logger类中的aroundPringLog方法开始记录日志了...异常"</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(t);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"Logger类中的aroundPringLog方法开始记录日志了...最终"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时就没有顺序问题了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Logger类中的aroundPringLog方法开始记录日志了...前置</span><br><span class="line">执行了保存</span><br><span class="line">Logger类中的aroundPringLog方法开始记录日志了...后置</span><br><span class="line">Logger类中的aroundPringLog方法开始记录日志了...最终</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue笔记03 Element UI使用&amp;动态路由导航栏</title>
    <url>/2020/03/11/note-vue-03/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/av85793766" target="_blank" rel="noopener">https://www.bilibili.com/video/av85793766</a><br>p2~3</p>
</blockquote>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>和上次一样创建项目，在vue ui中添加Element UI插件</p>
<p>Idea中导入工程</p>
<p>如果插件在刚才UI中没有装成功，可以在命令行装</p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>Element UI的使用可以看官网手册</p>
<a href="https://element.eleme.cn/2.0/#/zh-CN" title="" target="">Elemnt UI 中文官网</a>

<p>有一些常见的布局方式</p>
<h2 id="导入实例"><a href="#导入实例" class="headerlink" title="导入实例"></a>导入实例</h2><p>直接把官网实例复制到App.vue中（html复制到div标签之间）</p>
<p>刷新网页就能看到效果</p>
<h2 id="一些标签说明"><a href="#一些标签说明" class="headerlink" title="一些标签说明"></a>一些标签说明</h2><p>el-container: 构建整个⻚面框架</p>
<p>el-menu: 左侧菜单</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// :default-openeds默认展开的菜单 :default-active默认选中的菜单</span><br><span class="line"><span class="tag">&lt;<span class="name">el-menu</span> <span class="attr">:default-openeds</span>=<span class="string">"['1', '3']"</span> <span class="attr">:default-active</span>=<span class="string">"1-2"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>视频里说这个”1-2”必须写成”[1-2]”或则”‘1-2’”才能识别</p>
<p>但是试了一下直接写也识别了</p>
<p>el-submenu: 可展开的菜单</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 菜单的下标，文本类型，不能是数值类型</span><br><span class="line"><span class="tag">&lt;<span class="name">el-submenu</span> <span class="attr">index</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">  // template:对应 el-submenu 的菜单名 i:设置菜单图标，具体在文档找</span><br><span class="line">	<span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"el-icon-message"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>导航一<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>需要的话还可以嵌套多级submenu</p>
<h2 id="通过vue-router动态构建左侧菜单"><a href="#通过vue-router动态构建左侧菜单" class="headerlink" title="通过vue router动态构建左侧菜单"></a>通过vue router动态构建左侧菜单</h2><h3 id="配置页面"><a href="#配置页面" class="headerlink" title="配置页面"></a>配置页面</h3><p>新建4个页面，在router中配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Page1 <span class="keyword">from</span> <span class="string">'../views/Page1'</span></span><br><span class="line"><span class="keyword">import</span> Page2 <span class="keyword">from</span> <span class="string">'../views/Page2'</span></span><br><span class="line"><span class="keyword">import</span> Page3 <span class="keyword">from</span> <span class="string">'../views/Page3'</span></span><br><span class="line"><span class="keyword">import</span> Page4 <span class="keyword">from</span> <span class="string">'../views/Page4'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/page1'</span>,</span><br><span class="line">    name: <span class="string">'页面1'</span>,</span><br><span class="line">    component: Page1</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/page2'</span>,</span><br><span class="line">    name: <span class="string">'页面2'</span>,</span><br><span class="line">    component: Page2</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/page3'</span>,</span><br><span class="line">    name: <span class="string">'页面3'</span>,</span><br><span class="line">    component: Page3</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/page4'</span>,</span><br><span class="line">    name: <span class="string">'页面4'</span>,</span><br><span class="line">    component: Page4</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>但是这样还不会显示，要在App.vue中加上router对应的页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">        ...</span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src="/images/2020/screencapture2020-03-11AM10.59.18.jpg">

<p>此时相当于App中的内容是本来就显示的，下面的view是附加上去的</p>
<p>这样放显然是有问题的</p>
<p>把它放到main里面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">				...</span><br><span class="line">				<span class="tag">&lt;<span class="name">el-main</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-main</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src="/images/2020/screencapture2020-03-11AM11.03.53.jpg">

<p>这样就放进去了，下一步把它们连上</p>
<h3 id="遍历router"><a href="#遍历router" class="headerlink" title="遍历router"></a>遍历router</h3><p>需要修改router的层级结构</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    name: <span class="string">'导航1'</span>,</span><br><span class="line">    component:App,</span><br><span class="line">    children:[</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">'/page1'</span>,</span><br><span class="line">        name: <span class="string">'页面1'</span>,</span><br><span class="line">        component: Page1</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">'/page2'</span>,</span><br><span class="line">        name: <span class="string">'页面2'</span>,</span><br><span class="line">        component: Page2</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path:<span class="string">'/navigation'</span>,</span><br><span class="line">    name: <span class="string">'导航2'</span>,</span><br><span class="line">    component:App,</span><br><span class="line">    children:[</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">'/page3'</span>,</span><br><span class="line">        name: <span class="string">'页面3'</span>,</span><br><span class="line">        component: Page3</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">'/page4'</span>,</span><br><span class="line">        name: <span class="string">'页面4'</span>,</span><br><span class="line">        component: Page4</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>然后在App.vue中读取</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-aside</span> <span class="attr">width</span>=<span class="string">"200px"</span> <span class="attr">style</span>=<span class="string">"background-color: rgb(238, 241, 246)"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">el-menu</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">el-submenu</span> <span class="attr">v-for</span>=<span class="string">"item in $router.options.routes"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"el-icon-setting"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">el-submenu</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">el-menu</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-aside</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>就显示出来了</p>
<img src="/images/2020/screencapture2020-03-11AM11.14.49.jpg">

<hr>
<p>一个小bug</p>
<p>页面一开始是空白的，发现是App没有引入，router中要加</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br></pre></td></tr></table></figure>

<hr>
<p>把内层的元素也读出来</p>
<p>现在点一个导航时，两个会一起展开、合上，因为没有加index</p>
<p>再加上index属性（通过item的下标，item在前，index在后），需要字符串属性，拼一个’’</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-aside</span> <span class="attr">width</span>=<span class="string">"200px"</span> <span class="attr">style</span>=<span class="string">"background-color: rgb(238, 241, 246)"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-menu</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-submenu</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in $router.options.routes"</span> <span class="attr">:index</span>=<span class="string">"index+''"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"el-icon-setting"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>&#123;&#123;index&#125;&#125;-&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">v-for</span>=<span class="string">"(item2,index2) in item.children"</span> <span class="attr">:index</span>=<span class="string">"index+'-'+index2"</span>&gt;</span>&#123;&#123;item2.name&#125;&#125;<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-submenu</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-menu</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-aside</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>就可以定位到每一个了</p>
<img src="/images/2020/screencapture2020-03-11AM11.29.49.jpg">

<h2 id="menu与router绑定"><a href="#menu与router绑定" class="headerlink" title="menu与router绑定"></a>menu与router绑定</h2><p>把App中的内容放到Index页面中</p>
<p>1、给 el-menu 标签添加 router 属性</p>
<p>2、在⻚面中添加 router-view 标签（它是一个容器，可以动态渲染选择的router）</p>
<p>3、el-menu-item 标签的 index 值就是要跳转的 router</p>
<p>默认页面，在router中写redirect</p>
<p>并初始化选中，如果选择则加is-active状态。用route.path获取当前路径</p>
<img src="/images/2020/screencapture2020-03-11PM4.09.10.jpg">

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h2><img src="/images/2020/screencapture2020-03-11PM4.10.22.jpg" width=300>

<h2 id="App-vue"><a href="#App-vue" class="headerlink" title="App.vue"></a>App.vue</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    这个router对应的即为/，也就是Index页面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Index-vue"><a href="#Index-vue" class="headerlink" title="Index.vue"></a>Index.vue</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-container</span> <span class="attr">style</span>=<span class="string">"height: 500px; border: 1px solid #eee"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-aside</span> <span class="attr">width</span>=<span class="string">"200px"</span> <span class="attr">style</span>=<span class="string">"background-color: rgb(238, 241, 246)"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            这里添加router标签，el-menu-item的index就会被作为router路径--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-menu</span> <span class="attr">router</span> <span class="attr">:default-openeds</span>=<span class="string">"['0','1']"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-submenu</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in $router.options.routes"</span> <span class="attr">:index</span>=<span class="string">"index+''"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"el-icon-setting"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>&#123;&#123;index&#125;&#125;-&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                    条件判断当前路径是否等于index，更改选中状态，主要是在初始化时增加默认的选中状态--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">v-for</span>=<span class="string">"item2 in item.children"</span> <span class="attr">:index</span>=<span class="string">"item2.path"</span> <span class="attr">:class</span>=<span class="string">"$route.path==item2.path ? 'is-active' : ''"</span>&gt;</span>&#123;&#123;item2.path&#125;&#125;-&#123;&#123;item2.name&#125;&#125;<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-submenu</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-menu</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-aside</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-main</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            上面又index确定的router被显示在这里，也就是main区域中--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-main</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    name: <span class="string">'导航1'</span>,</span><br><span class="line">    component:Index,</span><br><span class="line">    redirect:<span class="string">'page1'</span>,</span><br><span class="line">    children:[</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">'/page1'</span>,</span><br><span class="line">        name: <span class="string">'页面1'</span>,</span><br><span class="line">        component: Page1</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">'/page2'</span>,</span><br><span class="line">        name: <span class="string">'页面2'</span>,</span><br><span class="line">        component: Page2</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path:<span class="string">'/navigation'</span>,</span><br><span class="line">    name: <span class="string">'导航2'</span>,</span><br><span class="line">    component:Index,</span><br><span class="line">    children:[</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">'/page3'</span>,</span><br><span class="line">        name: <span class="string">'页面3'</span>,</span><br><span class="line">        component: Page3</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">'/page4'</span>,</span><br><span class="line">        name: <span class="string">'页面4'</span>,</span><br><span class="line">        component: Page4</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>注意区别：router/route/routes</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>maxOS截图设置</title>
    <url>/2020/03/11/mac-screencapture/</url>
    <content><![CDATA[<p>问题：以前插入截图得先改文件名，要时间戳不含中文，而且png特别大，最好转成jpg，很麻烦</p>
<p>目标：文件名时间戳不含中文 &amp; jpg格式</p>
<hr>
<h1 id="一通操作"><a href="#一通操作" class="headerlink" title="一通操作"></a>一通操作</h1><h2 id="改格式"><a href="#改格式" class="headerlink" title="改格式"></a>改格式</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.screencapture type jpg</span><br></pre></td></tr></table></figure>

<h2 id="改名"><a href="#改名" class="headerlink" title="改名"></a>改名</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.screencapture name screencapture</span><br></pre></td></tr></table></figure>

<h2 id="改时间戳格式"><a href="#改时间戳格式" class="headerlink" title="改时间戳格式"></a>改时间戳格式</h2><p>系统偏好设置-&gt;语言与地区-&gt;高级-&gt;时间</p>
<p>正午前和中午后框中：上午/下午改成AM/PM </p>
<h2 id="完工"><a href="#完工" class="headerlink" title="完工"></a>完工</h2><p>Before:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">截屏2020-03-11上午9.50.34</span><br></pre></td></tr></table></figure>

<p>After:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">screencapture2020-03-11AM10.05.30</span><br></pre></td></tr></table></figure>



<hr>
<h1 id="命令备忘"><a href="#命令备忘" class="headerlink" title="命令备忘"></a>命令备忘</h1><h2 id="修改格式"><a href="#修改格式" class="headerlink" title="修改格式"></a>修改格式</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.screencapture type jpg</span><br></pre></td></tr></table></figure>

<h2 id="修改文件名"><a href="#修改文件名" class="headerlink" title="修改文件名"></a>修改文件名</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.screencapture name XXX</span><br></pre></td></tr></table></figure>

<h2 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h2><h3 id="移除时间戳"><a href="#移除时间戳" class="headerlink" title="移除时间戳"></a>移除时间戳</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.screencapture &quot;include-date&quot; 0</span><br></pre></td></tr></table></figure>

<h3 id="加时间戳"><a href="#加时间戳" class="headerlink" title="加时间戳"></a>加时间戳</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.screencapture &quot;include-date&quot; 1</span><br></pre></td></tr></table></figure>

<h2 id="其它帮助"><a href="#其它帮助" class="headerlink" title="其它帮助"></a>其它帮助</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">screencapture -h</span><br></pre></td></tr></table></figure>



<blockquote>
<p>ref:</p>
<p><a href="https://zhuanlan.zhihu.com/p/73725126" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/73725126</a></p>
<p><a href="https://www.maketecheasier.com/remove-time-stamp-screenshot-mac/" target="_blank" rel="noopener">https://www.maketecheasier.com/remove-time-stamp-screenshot-mac/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>来到Hexo的第一天！</title>
    <url>/2020/03/10/hello-hexo/</url>
    <content><![CDATA[<p>从下午开始搭建，调主题，一直到晚上搬运完了正在写的笔记，心情舒畅</p>
<p>先尝试的是Jekyll，我的老天鹅啊，折腾了一整天，不是配置有问题就是资源有问题，本地好不容易成功了提交到github又崩了，build成功了css又不渲染…<br>您是Hyde吧</p>
<p>总之，现在拥有一个带侧边栏目录的小仓库了～<br><img src="/images/2020/8586786.png" width=200></p>
<p>开启探索进度条<br>[|||||·············································]10%</p>
<p>(deprecated)<a href="https://blog.csdn.net/weixin_42319408" title="" target="">老家</a></p>
]]></content>
      <categories>
        <category>Memo</category>
      </categories>
  </entry>
  <entry>
    <title>一些有趣的网站</title>
    <url>/2020/03/10/bookmark/</url>
    <content><![CDATA[<h1 id="配色"><a href="#配色" class="headerlink" title="配色"></a>配色</h1><h2 id=""><a href="#" class="headerlink" title=""></a><a href="http://zhongguose.com/" title="" target="">中国色</a></h2><p>中国传统颜色，每一个都有CMYK、RGB值(包括16进制字符串形式～好用！)<br><img src="/images/2020/2020-03-10.8.30.50.jpg"><br>#5dbe8a 超爱的蔻梢绿～</p>
<h2 id="-1"><a href="#-1" class="headerlink" title=""></a><a href="https://brandcolors.net/" title="" target="">brandcolors</a></h2><p>品牌配色，可以发现各种眼熟的颜色</p>
<p>这是百度<br><img src="/images/2020/2020-03-10.8.44.30.jpg"><br>这是NASA<br><img src="/images/2020/2020-03-10.8.48.06.jpg"><br>这是谷歌<br><img src="/images/2020/2020-03-10.8.46.18.jpg"><br>这是微软<br><img src="/images/2020/2020-03-10.8.47.35.jpg"><br>那么问题来了，它们是谁？<br><img src="/images/2020/2020-03-10.8.24.22.jpg"></p>
<p><a href="/images/2020/2020-03-10.8.24.21.jpg">我是答案</a></p>
<h2 id="-2"><a href="#-2" class="headerlink" title=""></a><a href="https://webgradients.com/" title="" target="">webgradients</a></h2><p>一颗一颗超仙的渐变色，也可以全屏查看，舒适<br><img src="/images/2020/2020-03-10.8.26.24.jpg"></p>
<h2 id="-3"><a href="#-3" class="headerlink" title=""></a><a href="https://uigradients.com/" title="" target="">uigradients</a></h2><p>也是美丽的渐变色<br><img src="/images/2020/2020-03-10.8.30.23.jpg"></p>
<h2 id="-4"><a href="#-4" class="headerlink" title=""></a><a href="https://www.webdesignrankings.com/resources/lolcolors/" title="" target="">LOLCOLORS</a></h2><p>水滴形的配色<br><img src="/images/2020/2020-03-10.9.13.18.jpg"></p>
<h2 id="-5"><a href="#-5" class="headerlink" title=""></a><a href="https://color.adobe.com/zh/create/color-wheel/" title="" target="">色轮</a></h2><p>adobe出品，不会用，但是很好玩<br><img src="/images/2020/2020-03-10.9.10.41.jpg"></p>
<h2 id="-6"><a href="#-6" class="headerlink" title=""></a><a href="https://color.hailpixel.com/" title="" target="">Colordot</a></h2><p>这个也很有趣！挪动光标调色，点击固定<br><img src="/images/2020/2020-03-10.9.15.21.jpg"><br><img src="/images/2020/2020-03-10.9.17.15.jpg"></p>
<h1 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h1><h2 id="-7"><a href="#-7" class="headerlink" title=""></a><a href="https://thenounproject.com/" title="" target="">thenounproject</a></h2><p>常用的图标网站</p>
<img src="/images/2020/2020-03-10.9.22.23.jpg">



<h1 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h1><h2 id="-8"><a href="#-8" class="headerlink" title=""></a><a href="https://dribbble.com/" title="" target="">dribbble</a></h2><img src="/images/2020/screencapture2020-03-18PM11.47.55.jpg">

<h2 id="-9"><a href="#-9" class="headerlink" title=""></a><a href="https://tympanus.net/codrops/" title="" target="">codrops</a></h2><p>发现酷炫的页面</p>
<img src="/images/2020/screencapture2020-03-18PM11.49.26.jpg">

]]></content>
      <categories>
        <category>Resource</category>
      </categories>
      <tags>
        <tag>aha</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring笔记09 事务控制的问题&amp;动态代理</title>
    <url>/2020/03/09/note-spring-09/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/av47952931" target="_blank" rel="noopener">https://www.bilibili.com/video/av47952931</a><br>p46~55</p>
</blockquote>
<hr>
<h1 id="Account案例中转账方法的事务问题"><a href="#Account案例中转账方法的事务问题" class="headerlink" title="Account案例中转账方法的事务问题"></a>Account案例中转账方法的事务问题</h1><img src="/images/2020/20200309100124499.png">

<p>事务控制应该都在业务层，之前的案例中都在持久层，需要修改<br>写两个工具类</p>
<h1 id="2个工具类"><a href="#2个工具类" class="headerlink" title="2个工具类"></a>2个工具类</h1><h2 id="ConnectionUtils"><a href="#ConnectionUtils" class="headerlink" title="ConnectionUtils"></a>ConnectionUtils</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 连接的工具类，它用于从数据源中获取一个连接，并且实现和线程的绑定</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ThreadLocal&lt;Connection&gt; tl = <span class="keyword">new</span> ThreadLocal&lt;Connection&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dataSource = dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前线程上的连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">getThreadConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 1.先从ThreadLocal上获取</span></span><br><span class="line">            Connection conn = tl.get();</span><br><span class="line">            <span class="comment">// 2.判断当前线程上是否有连接</span></span><br><span class="line">            <span class="keyword">if</span> (conn == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 3.从数据源中获取一个连接，并且存入ThreadLocal中</span></span><br><span class="line">                conn = dataSource.getConnection();</span><br><span class="line">                tl.set(conn);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 4.返回当前线程上的连接</span></span><br><span class="line">            <span class="keyword">return</span> conn;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把连接和线程解绑</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">        tl.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="TransactionManager"><a href="#TransactionManager" class="headerlink" title="TransactionManager"></a>TransactionManager</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 和事务管理相关的工具类，它包含了，开启事务，提交事务，回滚事务和释放连接</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ConnectionUtils connectionUtils;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConnectionUtils</span><span class="params">(ConnectionUtils connectionUtils)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.connectionUtils = connectionUtils;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开启事务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">beginTransaction</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connectionUtils.getThreadConnection().setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提交事务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connectionUtils.getThreadConnection().commit();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 回滚事务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connectionUtils.getThreadConnection().rollback();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">release</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connectionUtils.getThreadConnection().close();<span class="comment">// 还回连接池中</span></span><br><span class="line">            connectionUtils.removeConnection();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>连接还回连接池中后，还需再把连接和线程解绑，否则下次ConnectionUtils中判断是否有连接是true，但这个连接是已经关闭的错误的连接</p>
<h2 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- 配置Connection的工具类 ConnectionUtils --&gt;</span><br><span class="line">   &lt;bean id=<span class="string">"connectionUtils"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.itheima.utils.ConnectionUtils"</span>&gt;</span><br><span class="line">       &lt;!-- 注入数据源--&gt;</span><br><span class="line">       &lt;property name="dataSource" ref="dataSource"&gt;&lt;/property&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!-- 配置事务管理器--&gt;</span><br><span class="line">   &lt;bean id=<span class="string">"txManager"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.itheima.utils.TransactionManager"</span>&gt;</span><br><span class="line">       &lt;!-- 注入ConnectionUtils --&gt;</span><br><span class="line">       &lt;property name="connectionUtils" ref="connectionUtils"&gt;&lt;/property&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br></pre></td></tr></table></figure>
<h1 id="代码改造"><a href="#代码改造" class="headerlink" title="代码改造"></a>代码改造</h1><p>修改之后不需要在beans.xml中注入dataSource了</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置Connection的工具类 ConnectionUtils --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"connectionUtils"</span> <span class="attr">class</span>=<span class="string">"com.itheima.utils.ConnectionUtils"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注入数据源--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- property name="dataSource" ref="dataSource"&gt;&lt;/property--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在AccountDaoImpl中加一个ConnectionUtils</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> ConnectionUtils connectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConnectionUtils</span><span class="params">(ConnectionUtils connectionUtils)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.connectionUtils = connectionUtils;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>并且runner获取连接改为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">runner.query(connectionUtils.getThreadConnection(),<span class="string">"select * from account"</span>,<span class="keyword">new</span> BeanListHandler&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>))</span>;</span><br></pre></td></tr></table></figure>
<p>此时，AccountServiceImpl中一个完整的事务流程是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAllAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1.开启事务</span></span><br><span class="line">            txManager.beginTransaction();</span><br><span class="line">            <span class="comment">// 2.执行操作</span></span><br><span class="line">            List&lt;Account&gt; accounts = accountDao.findAllAccount();</span><br><span class="line">            <span class="comment">// 3.提交事务</span></span><br><span class="line">            txManager.commit();</span><br><span class="line">            <span class="comment">// 4.返回结果</span></span><br><span class="line">            <span class="keyword">return</span> accounts;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="comment">// 5.回滚操作</span></span><br><span class="line">            txManager.rollback();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 6.释放连接</span></span><br><span class="line">            txManager.release();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是每个方法都要这样写，很臃肿<br>而且方法的依赖很严重（如果TransactionManager中beginTransaction方法名改成beginTransaction1，AccountServiceImpl中每一处用到的都要改）<br>进一步改造：代理</p>
<p>&amp; 现在的依赖有些乱七八糟，在后面Spring的事务控制中解决</p>
<h1 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h1><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><img src="/images/2020/20200309104823423.png">

<p>特点：字节码随用随创建，随用随加载<br>作用：不修改源码的基础上对方法增强</p>
<p>分类：</p>
<ul>
<li>基于接口的动态代理</li>
<li>基于子类的动态代理</li>
</ul>
<p>用处如：<br>连接池close方法关闭时不能真正关闭，还要还回池中。可以使用动态代理对其进行增强，把它还回池里<br>解决中文乱码，request对象的方法增强，用装饰者模式可以实现，也可以用动态代理实现</p>
<h2 id="基于接口的动态代理"><a href="#基于接口的动态代理" class="headerlink" title="基于接口的动态代理"></a>基于接口的动态代理</h2><p>涉及的类：Proxy<br>提供者：JDK官方<br>如何创建代理对象：使用Proxy类中的newProxyInstance方法<br>创建代理对象的要求：被代理类最少实现一个接口，如果没有则不能使用</p>
<p>newProxyInstance方法的参数：</p>
<ul>
<li>ClassLoader：类加载器<br>它是用于加载代理对象字节码的。和被代理对象使用相同的类加载器。固定写法</li>
<li>Class[]：字节码数组<br>它是用于让代理对象和被代理对象有相同方法。固定写法</li>
<li>InvocationHandler：用于提供增强的代码<br>写如何代理。一般都是写一个该接口的实现类，通常情况下都是匿名内部类，但不是必须的。此接口的实现类都是谁用谁写</li>
</ul>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><img src="/images/2020/20200309110447314.png" width=300>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对生产厂家要求的接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IProducer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 销售</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saleProduct</span><span class="params">(<span class="keyword">float</span> money)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 售后</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterService</span><span class="params">(<span class="keyword">float</span> money)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个生产者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">IProducer</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saleProduct</span><span class="params">(<span class="keyword">float</span> money)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"销售产品，并拿到钱："</span>+money);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterService</span><span class="params">(<span class="keyword">float</span> money)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"提供售后服务，并拿到钱："</span>+money);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟一个消费者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Producer producer = <span class="keyword">new</span> Producer();</span><br><span class="line"></span><br><span class="line">        IProducer proxyProducer = (IProducer) Proxy.newProxyInstance(producer.getClass().getClassLoader(),</span><br><span class="line">                producer.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * 作用：执行被代理对象的任何接口方法都会经过该方法（即有拦截功能）</span></span><br><span class="line"><span class="comment">                     * 方法参数的含义</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> proxy   代理对象的引用</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> method  当前执行的方法</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> args    当前执行方法所需的参数</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@return</span>        和被代理对象方法有相同的返回值</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                        <span class="comment">// 接收返回值</span></span><br><span class="line">                        Object returnValue = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 1.获取方法执行的参数</span></span><br><span class="line">                        Float money = (Float)args[<span class="number">0</span>];</span><br><span class="line">                        <span class="comment">// 2.判断当前方法是不是销售</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="string">"saleProduct"</span>.equals(method.getName())) &#123;</span><br><span class="line">                            returnValue = method.invoke(producer, money*<span class="number">0.8f</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> returnValue;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    </span><br><span class="line">    	proxyProducer.saleProduct(<span class="number">10000f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/images/2020/20200309111349124.png" width=600>

<p>使用代理后，消费者付10000，代理提成20%，生产者拿到8000</p>
<p>并没有对生产者的代码做任何修改，但是实现了增强<br>此处即为基于接口的动态代理</p>
<p>但是有一个问题<br>如果生产者没有实现接口，就不能这样用了，会报代理异常</p>
<h2 id="基于子类的动态代理"><a href="#基于子类的动态代理" class="headerlink" title="基于子类的动态代理"></a>基于子类的动态代理</h2><p>要求有第三方jar包的支持</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1_3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>涉及的类：Enhancer<br>提供者：第三方cglib库</p>
<p>如何创建代理对象：使用Enhancer类中的create方法<br>创建代理对象的要求：被代理类不能是最终类</p>
<p>create方法的参数：</p>
<ul>
<li>Class：字节码<br>用于指定被代理对象的字节码</li>
<li>Callback：用于提供增强的代码<br>写如何代理。一般是写一个该接口的实现类，通常情况下都是匿名内部类，但不是必须的<br>此接口的实现类都是谁用谁写<br>一般写的都是该接口的子接口实现类：MethodInterceptor</li>
</ul>
<h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个生产者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 销售</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saleProduct</span><span class="params">(<span class="keyword">float</span> money)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"销售产品，并拿到钱："</span>+money);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 售后</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterService</span><span class="params">(<span class="keyword">float</span> money)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"提供售后服务，并拿到钱："</span>+money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.cglib;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟一个消费者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Producer producer = <span class="keyword">new</span> Producer();</span><br><span class="line"></span><br><span class="line">        Producer cglibProducer = (Producer)Enhancer.create(producer.getClass(), <span class="keyword">new</span> MethodInterceptor() &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 执行被代理对象的任何方法都会经过该方法</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> proxy</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> method</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">             *    以上三个参数和基于接口的动态代理中invoke方法的参数是一样的</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> methodProxy ：当前执行方法的代理对象</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">             * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object proxy, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                Object returnValue = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 1.获取方法执行的参数</span></span><br><span class="line">                Float money = (Float)args[<span class="number">0</span>];</span><br><span class="line">                <span class="comment">// 2.判断当前方法是不是销售</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="string">"saleProduct"</span>.equals(method.getName())) &#123;</span><br><span class="line">                    returnValue = method.invoke(producer, money*<span class="number">0.8f</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> returnValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        cglibProducer.saleProduct(<span class="number">12000f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="使用动态代理实现事务控制"><a href="#使用动态代理实现事务控制" class="headerlink" title="使用动态代理实现事务控制"></a>使用动态代理实现事务控制</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于创建Service的代理对象的工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IAccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TransactionManager txManager;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setAccountService</span><span class="params">(IAccountService accountService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountService = accountService;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTxManager</span><span class="params">(TransactionManager txManager)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.txManager = txManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Service代理对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IAccountService <span class="title">getAccountService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (IAccountService)Proxy.newProxyInstance(accountService.getClass().getClassLoader(),</span><br><span class="line">                accountService.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * 添加事务的支持</span></span><br><span class="line"><span class="comment">                     *</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> proxy</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> method</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                        <span class="keyword">if</span>(<span class="string">"test"</span>.equals(method.getName()))&#123;</span><br><span class="line">                            <span class="keyword">return</span> method.invoke(accountService,args);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        Object rtValue = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="comment">// 1.开启事务</span></span><br><span class="line">                            txManager.beginTransaction();</span><br><span class="line">                            <span class="comment">// 2.执行操作</span></span><br><span class="line">                            rtValue = method.invoke(accountService, args);</span><br><span class="line">                            <span class="comment">// 3.提交事务</span></span><br><span class="line">                            txManager.commit();</span><br><span class="line">                            <span class="comment">// 4.返回结果</span></span><br><span class="line">                            <span class="keyword">return</span> rtValue;</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                            <span class="comment">// 5.回滚操作</span></span><br><span class="line">                            txManager.rollback();</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">                        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                            <span class="comment">// 6.释放连接</span></span><br><span class="line">                            txManager.release();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>并对beans.xml做相应的修改<br>测试中IAccountService只用Autowird不够了，还需@Qualifier(“proxyAccountService”)</p>
<p>使用动态代理后，消除了重复代码，解除了方法的依赖<br>但是配置变得繁琐了<br>更好的方式？——&gt;AOP</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue笔记02 Spring Boot+Vue前后端分离开发基本流程</title>
    <url>/2020/03/06/note-vue-02/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/av85793766?p=1" target="_blank" rel="noopener">https://www.bilibili.com/video/av85793766?p=1</a></p>
</blockquote>
<hr>
<h1 id="Vue工程"><a href="#Vue工程" class="headerlink" title="Vue工程"></a>Vue工程</h1><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p>vue ui创建工程，导入Idea<br>(js版本太低可能有语法报错，配置中改为6即可)</p>
<p>启动：npm run serve<br>停止：ctrl+C</p>
<h2 id="引入页面-amp-配置路径"><a href="#引入页面-amp-配置路径" class="headerlink" title="引入页面&amp;配置路径"></a>引入页面&amp;配置路径</h2><p>router/index.js中引入.vue<br>App.vue中配置router</p>
<h2 id="Book-vue"><a href="#Book-vue" class="headerlink" title="Book.vue"></a>Book.vue</h2><p>template就是html，script就是js，style就是css<br>template中只允许有一个根节点<br>前端可以先用假数据，写在script里面</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=<span class="string">"showcase"</span>&gt;</span><br><span class="line">        &lt;table&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;编号&lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp">                &lt;td&gt;名称&lt;/</span>td&gt;</span><br><span class="line">                &lt;td&gt;作者&lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>tr&gt;</span><br><span class="line">            &lt;tr v-<span class="keyword">for</span>=<span class="string">"item in books"</span>&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp">                &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;/</span>td&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123;item.author&#125;&#125;&lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>tr&gt;</span><br><span class="line">        &lt;<span class="regexp">/table&gt;</span></span><br><span class="line"><span class="regexp">        &#123;&#123;msg&#125;&#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    export default &#123;</span></span><br><span class="line"><span class="regexp">        name: "Book",</span></span><br><span class="line"><span class="regexp">        data()&#123;</span></span><br><span class="line"><span class="regexp">            return&#123;</span></span><br><span class="line"><span class="regexp">                msg:'2019999999999999',</span></span><br><span class="line"><span class="regexp">                books:[</span></span><br><span class="line"><span class="regexp">                    &#123;</span></span><br><span class="line"><span class="regexp">                        id: 20200001,</span></span><br><span class="line"><span class="regexp">                        name: '病毒星球',</span></span><br><span class="line"><span class="regexp">                        author: '卡尔·齐默'</span></span><br><span class="line"><span class="regexp">                    &#125;,</span></span><br><span class="line"><span class="regexp">                    &#123;</span></span><br><span class="line"><span class="regexp">                        id:20200002,</span></span><br><span class="line"><span class="regexp">                        name: '洛基启示录',</span></span><br><span class="line"><span class="regexp">                        author: '乔安妮·M·哈里斯'</span></span><br><span class="line"><span class="regexp">                    &#125;,</span></span><br><span class="line"><span class="regexp">                    &#123;</span></span><br><span class="line"><span class="regexp">                        id:20200003,</span></span><br><span class="line"><span class="regexp">                        name: '增强人类',</span></span><br><span class="line"><span class="regexp">                        author: '海伦·帕帕扬尼斯'</span></span><br><span class="line"><span class="regexp">                    &#125;</span></span><br><span class="line"><span class="regexp">                ]</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br></pre></td></tr></table></figure>
<p>vue可以动态加载，改完代码不需要重启，直接访问即可<br>试了下可以正常访问～</p>
<h1 id="Spring工程"><a href="#Spring工程" class="headerlink" title="Spring工程"></a>Spring工程</h1><h2 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h2><p>Idea中Spring Initializr默认模版创建<br>依赖勾上：Lombok、Spring Web、Spring Data JPA、MySQL Driver</p>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>这里没有用application.properties，删掉<br>新建application.yml，存放连接数据库的信息</p>
<h2 id="数据库建表"><a href="#数据库建表" class="headerlink" title="数据库建表"></a>数据库建表</h2><p>用提供的book.sql建book表</p>
<h2 id="Book"><a href="#Book" class="headerlink" title="Book"></a>Book</h2><p>和book表对应，加@Entity后，根据类名和表名对应绑定<br>再加一个@Data，是lombok的注解，自动生成get/set<br>属性名和变量名对应，自动绑定<br>id要加一个@Id，它是主键</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="BookRepository"><a href="#BookRepository" class="headerlink" title="BookRepository"></a>BookRepository</h2><p>继承JpaRepository，&lt;&gt;中第一个是实体类，第二个是主键类型<br>接口中findAll等方法都有，直接用就行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Book</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="测试BookRepository"><a href="#测试BookRepository" class="headerlink" title="测试BookRepository"></a>测试BookRepository</h2><p>然后测试一下<br>建立的Spring工程自带一个测试类BookstoreServerApplicationTests<br>或者自己创建，在接口名上右键-&gt;Go To-&gt;Test-&gt;Create New Test<br>给生成的测试类加一个@SpringBootTest，要测试的类@Autowired自动注入，写的方法加一个@Test，就可以运行了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookRepositoryTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookRepository bookRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(bookRepository.findAll());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>试一下<br><img src="/images/2020/20200306180717607.png"><br>成功<br>且打印了sql语句，因为yml里面配了jpa: show-sql: true和格式化</p>
<p>每写一个repository先测一下，保证没问题再继续写controller</p>
<h2 id="BookHandler"><a href="#BookHandler" class="headerlink" title="BookHandler"></a>BookHandler</h2><p>配上对应的注解和mapping</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/book"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookRepository bookRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/findAll"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>运行BookstoreServerApplication启动类<br>注意此时端口是8181<br><img src="/images/2020/20200306181433240.png"><br>没有问题，后端就搞定了<br>接下来前后端对接就行</p>
<h1 id="对接"><a href="#对接" class="headerlink" title="对接"></a>对接</h1><p>vue中ajax请求用axios组件<br>（先在命令行把服务停掉，安装，vue add axios）<br>装好之后自动有了src/plugins/axios.js</p>
<p>刷新页面时读取数据，可以写到初始化函数中，比如这样：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">		created() &#123;</span><br><span class="line">            alert(<span class="number">123</span>)</span><br><span class="line">            axios.get(<span class="string">'http://localhost:8181/book/findAll/'</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">resp</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(resp)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>刷新，看浏览器的控制台<br>有个跨域问题（8181访问8080），前端后端都可以解决<br>这里在SpringBoot中解决<br>只需添加一个配置类，重写addCorsMappings方法即可（不用记，固定的，要用的时候复制就行）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CrosConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addMapping(<span class="string">"/**"</span>)</span><br><span class="line">                .allowedOrigins(<span class="string">"*"</span>)</span><br><span class="line">                .allowedMethods(<span class="string">"GET"</span>, <span class="string">"HEAD"</span>, <span class="string">"POST"</span>, <span class="string">"PUT"</span>, <span class="string">"DELETE"</span>, <span class="string">"OPTIONS"</span>)</span><br><span class="line">                .allowCredentials(<span class="keyword">true</span>)</span><br><span class="line">                .maxAge(<span class="number">3600</span>)</span><br><span class="line">                .allowedHeaders(<span class="string">"*"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重启，再访问就好了<br><img src="https://img-blog.csdnimg.cn/20200306185233941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjMxOTQwOA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后再回调函数中把data拿到就行<br>注意：不能直接用this，回调函数中this指的是回调，而不是外面，要先在外面拿到this</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=<span class="string">"showcase"</span>&gt;</span><br><span class="line">        &lt;table&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;编号&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;名称&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;作者&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr v-<span class="keyword">for</span>=<span class="string">"item in books"</span>&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123;item.author&#125;&#125;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export <span class="keyword">default</span> &#123;</span><br><span class="line">        name: <span class="string">"Book"</span>,</span><br><span class="line">        data()&#123;</span><br><span class="line">            <span class="keyword">return</span>&#123;</span><br><span class="line">                books:[]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        created() &#123;</span><br><span class="line">            <span class="keyword">const</span> _this = <span class="keyword">this</span></span><br><span class="line">            axios.get(<span class="string">'http://localhost:8181/book/findAll'</span>).then(function (resp)&#123;</span><br><span class="line">                _this.books = resp.data</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>这样前后端就连上了<br><img src="/images/2020/20200306185851937.png"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li>写前端，用加数据测试</li>
<li>写后端，保证接口能访问</li>
<li>调后端（后端解决跨域问题）</li>
</ol>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue笔记01 @vue_cli环境搭建</title>
    <url>/2020/03/06/note-vue-01/</url>
    <content><![CDATA[<img src="/images/2020/20200306115323370.png">
在经历了这么多坑之后终于build succeeded了
可喜可贺
整理下成功路径

<hr>
<p>版本：</p>
<ul>
<li>macOS Catalina 10.15.3</li>
<li>Homebrew 2.2.6</li>
<li>node v13.8.0</li>
<li>npm 6.13.7</li>
<li>@vue/cli 4.2.3</li>
</ul>
<hr>
<h2 id="1-安装node"><a href="#1-安装node" class="headerlink" title="1. 安装node"></a>1. 安装node</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure>
<p>坑：brew巨慢无比<br>解决：换清华镜像</p>
<blockquote>
<p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/</a></p>
</blockquote>
<h2 id="2-安装-vue-cli"><a href="#2-安装-vue-cli" class="headerlink" title="2. 安装@vue/cli"></a>2. 安装@vue/cli</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo npm install -g @vue&#x2F;cli</span><br></pre></td></tr></table></figure>
<p>坑：没有权限<br>解决：sudo</p>
<blockquote>
<p><a href="https://www.jianshu.com/p/0207ee424422" target="_blank" rel="noopener">https://www.jianshu.com/p/0207ee424422</a></p>
</blockquote>
<p>坑：新旧版本名字不一样<br>解决：@vue/cli（不是vue-cli）</p>
<blockquote>
<p><a href="https://cli.vuejs.org/zh/guide/installation.html" target="_blank" rel="noopener">https://cli.vuejs.org/zh/guide/installation.html</a></p>
</blockquote>
<h2 id="3-创建项目"><a href="#3-创建项目" class="headerlink" title="3. 创建项目"></a>3. 创建项目</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vue ui</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring笔记08 Spring整合Junit</title>
    <url>/2020/03/04/note-spring-08/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/av47952931" target="_blank" rel="noopener">https://www.bilibili.com/video/av47952931</a><br>p44～45 </p>
</blockquote>
<hr>
<p>用于解决之前测试时的重复代码</p>
<p>原本的AccountServiceTest中，每个方法中都有步骤1和2</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">        <span class="comment">// 2.得到业务层对象</span></span><br><span class="line">        IAccountService as = ac.getBean(<span class="string">"accountService"</span>,IAccountService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 3.执行方法</span></span><br><span class="line">        Account account = <span class="keyword">new</span> Account();</span><br><span class="line">        account.setName(<span class="string">"eee"</span>);</span><br><span class="line">        account.setMoney(<span class="number">10000f</span>);</span><br><span class="line">        as.createAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">        <span class="comment">// 2.得到业务层对象</span></span><br><span class="line">        IAccountService as = ac.getBean(<span class="string">"accountService"</span>,IAccountService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 3.执行方法</span></span><br><span class="line">        as.deleteAccount(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用init()可以将重复代码抽出来</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext ac;</span><br><span class="line">    <span class="keyword">private</span> IAccountService as;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取容器</span></span><br><span class="line">        ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">        <span class="comment">// 2.得到业务层对象</span></span><br><span class="line">        as = ac.getBean(<span class="string">"accountService"</span>,IAccountService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account();</span><br><span class="line">        account.setName(<span class="string">"eee"</span>);</span><br><span class="line">        account.setMoney(<span class="number">10000f</span>);</span><br><span class="line">        as.createAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        as.deleteAccount(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是并没有根本上解决问题<br>开发和测试的代码仍在一个类中，需要进一步解耦</p>
<p>如果不要init()，只在变量上加@Autowired没有用<br>一波分析：<br><img src="/images/2020/20200304194906403.png" width=600></p>
<p>解决方法：</p>
<ol>
<li><p>pom.xml中导入spring整合junit的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>且：使用spring 5.x时，juint需要4.12以上的版本</p>
</li>
<li><p>使用junit的@RunWith注解将原有的main()替换成spring提供的</p>
</li>
<li><p>用@ContextConfiguration告知spring的运行器，基于xml还是注解，并说明位置<br>locations：指定xml文件的位置，加上classpath关键字，表示在类路径下<br>classes：指定注释类所在的位置</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">locations</span> </span>= <span class="string">"classpath:beans.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IAccountService as;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account();</span><br><span class="line">        account.setName(<span class="string">"eee"</span>);</span><br><span class="line">        account.setMoney(<span class="number">10000f</span>);</span><br><span class="line">        as.createAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>即可正常执行</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring笔记07 基于注解的IoC案例（实现CRUD）</title>
    <url>/2020/03/04/note-spring-07/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/av47952931?p=38" target="_blank" rel="noopener">https://www.bilibili.com/video/av47952931?p=38</a></p>
</blockquote>
<hr>
<h1 id="数据库部分"><a href="#数据库部分" class="headerlink" title="数据库部分"></a>数据库部分</h1><p>继续用上次的表<br><img src="/images/2020/20200304181444129.png" width=200></p>
<hr>
<h1 id="在基于xml的案例上修改"><a href="#在基于xml的案例上修改" class="headerlink" title="在基于xml的案例上修改"></a>在基于xml的案例上修改</h1><p>（加上整合junit的部分，具体记录在笔记8）</p>
<p>pom.xml加上整合junit需要的依赖spring-test<br>junit版本4.12及以上</p>
<p>beans.xml名称空间需要修改<br>在Spring文档中搜索xmlns:context（基于xml时是xmlns）找名称空间<br>配置Service和Dao的部分可以不要了<br>加上component-scan告知Spring在创建容器时要扫描的包</p>
<p>实体类、接口没有变化</p>
<p>业务层实现类AccountServiceImpl加注解<br>@Service(“accountService”)<br>变量accountDao上加注解，由于只有一个AccountDao，可以用@Autowired<br>对应的set方法可以删掉</p>
<p>持久层实现类AccountDaoImpl加注解<br>@Repository(“accountDao”)<br>runner同样用@Autowired，set方法删掉</p>
<p>测试类改为整合junit的写法</p>
<hr>
<h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><img src="/images/2020/20200304183227273.png" width=300>

<h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.coconutnut<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>day02_02_account_xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    打成jar包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    加入依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        spring--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    	<span class="comment">&lt;!--    	spring整合junit--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--        dbutils--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--        mysql驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--        jdbc连接池--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--    junit测试--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="beans-xml"><a href="#beans-xml" class="headerlink" title="beans.xml"></a>beans.xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    告知Spring在创建容器时要扫描的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.cc"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    配置QueryRunner（多例）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"runner"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbutils.QueryRunner"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        注入数据源（没有set方法，只能构造函数注入）--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"ds"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    配置数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        注入连接数据库的信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/groot?characterEncoding=utf8"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"iamgroot"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h2><p>Account.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cc.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Float money;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Float <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(Float money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Account&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", money="</span> + money +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h2><p>IAccountService.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cc.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.cc.domain.Account;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的业务层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accountId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer accountId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 改</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查一个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accountId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Account <span class="title">retrieveAccountById</span><span class="params">(Integer accountId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查所有</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">retrieveAllAccounts</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>AccountServiceImpl.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cc.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.cc.dao.IAccountDao;</span><br><span class="line"><span class="keyword">import</span> com.cc.domain.Account;</span><br><span class="line"><span class="keyword">import</span> com.cc.service.IAccountService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IAccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        accountDao.createAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer accountId)</span> </span>&#123;</span><br><span class="line">        accountDao.deleteAccount(accountId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        accountDao.updateAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">retrieveAccountById</span><span class="params">(Integer accountId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.retrieveAccountById(accountId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">retrieveAllAccounts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.retrieveAllAccounts();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><p>IAccountDao.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cc.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.cc.domain.Account;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的持久层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer accountId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Account <span class="title">retrieveAccountById</span><span class="params">(Integer accountId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">retrieveAllAccounts</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>AccountDaoImpl.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cc.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.cc.dao.IAccountDao;</span><br><span class="line"><span class="keyword">import</span> com.cc.domain.Account;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.QueryRunner;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.BeanHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.BeanListHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的持久层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span>(<span class="string">"accountDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> QueryRunner runner;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            runner.update(<span class="string">"insert into account(name,money) values(?,?)"</span>, account.getName(), account.getMoney());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer accountId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            runner.update(<span class="string">"delete from account where id = ?"</span>, accountId);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            runner.update(<span class="string">"update account set name = ?, money = ? where id = ?"</span>, account.getName(), account.getMoney(),account.getId());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">retrieveAccountById</span><span class="params">(Integer accountId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> runner.query(<span class="string">"select * from account where id = ?"</span>, <span class="keyword">new</span> BeanHandler&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>), <span class="title">accountId</span>)</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">retrieveAllAccounts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> runner.query(<span class="string">"select * from account"</span>, <span class="keyword">new</span> BeanListHandler&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h2><p>AccountServiceTest.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cc.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.cc.domain.Account;</span><br><span class="line"><span class="keyword">import</span> com.cc.service.IAccountService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用Junit测试配置</span></span><br><span class="line"><span class="comment"> * Spring整合Junit的配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">locations</span> </span>= <span class="string">"classpath:beans.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IAccountService as;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account();</span><br><span class="line">        account.setName(<span class="string">"eee"</span>);</span><br><span class="line">        account.setMoney(<span class="number">10000f</span>);</span><br><span class="line">        as.createAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        as.deleteAccount(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Account account = as.retrieveAccountById(<span class="number">3</span>);</span><br><span class="line">        account.setMoney(<span class="number">3000f</span>);</span><br><span class="line">        as.updateAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRetrieveOne</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Account account = as.retrieveAccountById(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRetrieveAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Account&gt; accounts = as.retrieveAllAccounts();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Account account : accounts)&#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>testRetrieveAll()<br><img src="/images/2020/20200304182802930.png" width=800></p>
<p>testRetrieveOne()<br><img src="/images/2020/20200304182924177.png" width=800></p>
<p>testCreate()<br><img src="/images/2020/20200304183005488.png" width=200></p>
<p>testDelete()<br><img src="/images/2020/20200304183052388.png" width=200></p>
<p>testUpdate()<br><img src="/images/2020/20200304183142618.png" width=200></p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring笔记06 基于xml的IoC案例（实现CRUD）</title>
    <url>/2020/03/04/note-spring-06/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/av47952931" target="_blank" rel="noopener">https://www.bilibili.com/video/av47952931</a><br>p35~37</p>
</blockquote>
<hr>
<h1 id="数据库部分"><a href="#数据库部分" class="headerlink" title="数据库部分"></a>数据库部分</h1><p>mysql中建一张account表<br><img src="/images/2020/20200304160612648.png" width=200></p>
<hr>
<h1 id="maven工程"><a href="#maven工程" class="headerlink" title="maven工程"></a>maven工程</h1><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><img src="/images/2020/20200304180408780.png" width=300>

<h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.coconutnut<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>day02_02_account_xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    打成jar包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    加入依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        spring--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        dbutils--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        mysql驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        jdbc连接池--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    junit测试--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h2><p>Account.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cc.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Float money;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Float <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(Float money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Account&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", money="</span> + money +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h2><p>IAccountService.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cc.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.cc.domain.Account;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的业务层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accountId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer accountId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 改</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查一个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accountId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Account <span class="title">retrieveAccountById</span><span class="params">(Integer accountId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查所有</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">retrieveAllAccounts</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>AccountServiceImpl.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cc.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.cc.dao.IAccountDao;</span><br><span class="line"><span class="keyword">import</span> com.cc.domain.Account;</span><br><span class="line"><span class="keyword">import</span> com.cc.service.IAccountService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IAccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountDao</span><span class="params">(IAccountDao accountDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountDao = accountDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        accountDao.createAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer accountId)</span> </span>&#123;</span><br><span class="line">        accountDao.deleteAccount(accountId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        accountDao.updateAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">retrieveAccountById</span><span class="params">(Integer accountId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.retrieveAccountById(accountId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">retrieveAllAccounts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.retrieveAllAccounts();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><p>IAccountDao.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cc.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.cc.domain.Account;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的持久层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer accountId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Account <span class="title">retrieveAccountById</span><span class="params">(Integer accountId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">retrieveAllAccounts</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>AccountDaoImpl.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cc.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.cc.dao.IAccountDao;</span><br><span class="line"><span class="keyword">import</span> com.cc.domain.Account;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.QueryRunner;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.BeanHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.BeanListHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的持久层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> QueryRunner runner;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRunner</span><span class="params">(QueryRunner runner)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.runner = runner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            runner.update(<span class="string">"insert into account(name,money) values(?,?)"</span>, account.getName(), account.getMoney());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer accountId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            runner.update(<span class="string">"delete from account where id = ?"</span>, accountId);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            runner.update(<span class="string">"update account set name = ?, money = ? where id = ?"</span>, account.getName(), account.getMoney(),account.getId());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">retrieveAccountById</span><span class="params">(Integer accountId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> runner.query(<span class="string">"select * from account where id = ?"</span>, <span class="keyword">new</span> BeanHandler&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>), <span class="title">accountId</span>)</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">retrieveAllAccounts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> runner.query(<span class="string">"select * from account"</span>, <span class="keyword">new</span> BeanListHandler&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="beans-xml"><a href="#beans-xml" class="headerlink" title="beans.xml"></a>beans.xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    配置Service--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.cc.service.impl.AccountServiceImpl"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        注入Dao--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"accountDao"</span> <span class="attr">ref</span>=<span class="string">"accountDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--    配置Dao--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"com.cc.dao.impl.AccountDaoImpl"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        注入QueryRunner--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"runner"</span> <span class="attr">ref</span>=<span class="string">"runner"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--    配置QueryRunner（多例）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"runner"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbutils.QueryRunner"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        注入数据源（没有set方法，只能构造函数注入）--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"ds"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    配置数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        注入连接数据库的信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/groot?characterEncoding=utf8"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"iamgroot"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h2><p>AccountServiceTest.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cc.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.cc.domain.Account;</span><br><span class="line"><span class="keyword">import</span> com.cc.service.IAccountService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用Junit测试配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">        <span class="comment">// 2.得到业务层对象</span></span><br><span class="line">        IAccountService as = ac.getBean(<span class="string">"accountService"</span>,IAccountService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 3.执行方法</span></span><br><span class="line">        Account account = <span class="keyword">new</span> Account();</span><br><span class="line">        account.setName(<span class="string">"ddd"</span>);</span><br><span class="line">        account.setMoney(<span class="number">10f</span>);</span><br><span class="line">        as.createAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">        <span class="comment">// 2.得到业务层对象</span></span><br><span class="line">        IAccountService as = ac.getBean(<span class="string">"accountService"</span>,IAccountService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 3.执行方法</span></span><br><span class="line">        as.deleteAccount(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">        <span class="comment">// 2.得到业务层对象</span></span><br><span class="line">        IAccountService as = ac.getBean(<span class="string">"accountService"</span>,IAccountService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 3.执行方法</span></span><br><span class="line">        Account account = as.retrieveAccountById(<span class="number">1</span>);</span><br><span class="line">        account.setMoney(<span class="number">2000f</span>);</span><br><span class="line">        as.updateAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRetrieveOne</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">        <span class="comment">// 2.得到业务层对象</span></span><br><span class="line">        IAccountService as = ac.getBean(<span class="string">"accountService"</span>,IAccountService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 3.执行方法</span></span><br><span class="line">        Account account = as.retrieveAccountById(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRetrieveAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">        <span class="comment">// 2.得到业务层对象</span></span><br><span class="line">        IAccountService as = ac.getBean(<span class="string">"accountService"</span>,IAccountService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 3.执行方法</span></span><br><span class="line">        List&lt;Account&gt; accounts = as.retrieveAllAccounts();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Account account : accounts)&#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>testRetrieveAll()<br><img src="/images/2020/20200304174231997.png" width=800></p>
<p>testRetrieveOne()<br><img src="/images/2020/20200304174150392.png" width=800></p>
<p>testCreate()<br><img src="/images/2020/20200304175250925.png" width=200></p>
<p>testDelete()<br><img src="/images/2020/2020030417540352.png" width=200></p>
<p>testUpdate()<br><img src="/images/2020/20200304175530135.png" width=200></p>
<hr>
<h1 id="遇到的bug"><a href="#遇到的bug" class="headerlink" title="遇到的bug"></a>遇到的bug</h1><p>执行testRetrieveAll()时</p>
<p>==BUG01==</p>
<pre><code>警告: Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;accountService&apos; defined in class path resource [beans.xml]: Error setting property values; nested exception is org.springframework.beans.NotWritablePropertyException: Invalid property &apos;accountDao &apos; of bean class [com.cc.service.impl.AccountServiceImpl]: Bean property &apos;accountDao &apos; is not writable or has an invalid setter method. Did you mean &apos;accountDao&apos;?

org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;accountService&apos; defined in class path resource [beans.xml]: Error setting property values; nested exception is org.springframework.beans.NotWritablePropertyException: Invalid property &apos;accountDao &apos; of bean class [com.cc.service.impl.AccountServiceImpl]: Bean property &apos;accountDao &apos; is not writable or has an invalid setter method. Did you mean &apos;accountDao&apos;?

at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1650)
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1357)
...</code></pre><p>其中</p>
<pre><code>Bean property &apos;accountDao &apos; is not writable or has an invalid setter method. Did you mean &apos;accountDao&apos;?</code></pre><p>发现多打了个空格</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">beans.xml中</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"accountDao "</span> <span class="attr">ref</span>=<span class="string">"accountDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">改为</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"accountDao"</span> <span class="attr">ref</span>=<span class="string">"accountDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>改过来之后</p>
<p>==BUG02==</p>
<pre><code>警告: com.mchange.v2.resourcepool.BasicResourcePool$ScatteredAcquireTask@63fd9b65 -- Acquisition Attempt Failed!!! Clearing pending acquires. While trying to acquire a needed new resource, we failed to succeed more than the maximum number of allowed acquisition attempts (30). Last acquisition attempt exception: 
java.sql.SQLException: Unknown initial character set index &apos;255&apos; received from server. Initial client character set can be forced via the &apos;characterEncoding&apos; property.
at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:1055)
...</code></pre><p>似乎是编码问题</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">beans.xml中</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/groot"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">改为</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/groot?characterEncoding=utf8"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>改了之后</p>
<p>==BUG03==</p>
<pre><code>警告: com.mchange.v2.resourcepool.BasicResourcePool$ScatteredAcquireTask@4879bf70 -- Acquisition Attempt Failed!!! Clearing pending acquires. While trying to acquire a needed new resource, we failed to succeed more than the maximum number of allowed acquisition attempts (30). Last acquisition attempt exception: 
java.sql.SQLException: Unknown system variable &apos;tx_isolation&apos;
at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:1055)</code></pre><p>查一下解决方啊</p>
<blockquote>
<p><a href="https://blog.csdn.net/always_younger/article/details/80421783" target="_blank" rel="noopener">https://blog.csdn.net/always_younger/article/details/80421783</a></p>
</blockquote>
<p>说是mysql-connector-java版本太低的原因</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">pom.xml中</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">改为</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>还有一点小问题</p>
<pre><code>Loading class `com.mysql.jdbc.Driver&apos;. This is deprecated. The new driver class is `com.mysql.cj.jdbc.Driver&apos;. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.</code></pre><p>把过时的类换掉</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">beans.xml中</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">改为</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>就好了！</p>
<pre><code>Account{id=1, name=&apos;aaa&apos;, money=1000.0}
Account{id=2, name=&apos;bbb&apos;, money=1000.0}
Account{id=3, name=&apos;ccc&apos;, money=1000.0}

Process finished with exit code 0</code></pre>]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>买卖股票的最佳时机问题</title>
    <url>/2020/02/29/exercise/</url>
    <content><![CDATA[<p>思路：动态规划</p>
<p>dp[ i ][ j ][ k ]<br>i - 到第 i 天<br>j - 最多交易 j 次<br>k - 0:当前持股 / 1:当前不持股</p>
<p>状态转移方程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 第i天，最多交易j次，当前不持股</span><br><span class="line">dp[i][j][0] &#x3D; MAX&#123;</span><br><span class="line">	dp[i-1][j][0],                 &#x2F;&#x2F; 本次不持-上次就不持</span><br><span class="line">	dp[i-1][j-1][1] + 差价          &#x2F;&#x2F; 本次不持-本次卖</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 第i天，最多交易j次，当前持股</span><br><span class="line">dp[i][j][1] &#x3D; MAX&#123;</span><br><span class="line">	dp[i-1][j][0],                &#x2F;&#x2F; 本次持-本次买</span><br><span class="line">	dp[i-1][j][1] + 差价           &#x2F;&#x2F; 本次持-上次就持</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getdp</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j,<span class="keyword">int</span> k,<span class="keyword">int</span>[][][] dp,<span class="keyword">int</span>[] prices)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(dp[i][j][k]==-<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(i&lt;<span class="number">1</span>)&#123;</span><br><span class="line">			dp[i][j][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">			dp[i][j][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="comment">// 本次不持-上次就不持</span></span><br><span class="line">			<span class="keyword">int</span> dp1 = getdp(i-<span class="number">1</span>,j,<span class="number">0</span>,dp,prices);</span><br><span class="line">			<span class="comment">// 本次不持-本次卖</span></span><br><span class="line">			<span class="keyword">int</span> dp2 = j&gt;<span class="number">0</span> ? getdp(i-<span class="number">1</span>,j-<span class="number">1</span>,<span class="number">1</span>,dp,prices)+prices[i]-prices[i-<span class="number">1</span>] : <span class="number">0</span>;</span><br><span class="line">			dp[i][j][<span class="number">0</span>] = Math.max(dp1,dp2);</span><br><span class="line">           </span><br><span class="line">			<span class="comment">// 本次持-本次买</span></span><br><span class="line">			<span class="keyword">int</span> dp3 = getdp(i-<span class="number">1</span>,j,<span class="number">0</span>,dp,prices);</span><br><span class="line">			<span class="comment">// 本次持-上次就持</span></span><br><span class="line">			<span class="keyword">int</span> dp4 = getdp(i-<span class="number">1</span>,j,<span class="number">1</span>,dp,prices)+prices[i]-prices[i-<span class="number">1</span>];</span><br><span class="line">			dp[i][j][<span class="number">1</span>] = Math.max(dp3,dp4);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">	<span class="keyword">return</span> dp[i][j][k];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>坑：当k很大时，内存会爆，此时相当于不限制交易次数，直接用贪心解决</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices.length&lt;<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(k &gt; prices.length/<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="comment">// 相当于不限制次数，贪心</span></span><br><span class="line">            <span class="keyword">int</span> value = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;prices.length;i++)&#123;</span><br><span class="line">                value += prices[i]&gt;prices[i-<span class="number">1</span>] ? prices[i]-prices[i-<span class="number">1</span>] : <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[][][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[prices.length][k+<span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;prices.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;k+<span class="number">1</span>;j++)&#123;</span><br><span class="line">                Arrays.fill(dp[i][j],-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> getdp(prices.length-<span class="number">1</span>,k,<span class="number">0</span>,dp,prices);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getdp</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j,<span class="keyword">int</span> k,<span class="keyword">int</span>[][][] dp,<span class="keyword">int</span>[] prices)</span></span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>用这一套解法干掉4题</p>
<p>Leetcode 121 买卖股票的最佳时机 —— 最多交易1次<br>令 k = 1</p>
<p>Leetcode 122 买卖股票的最佳时机 II —— 不限次数<br>直接贪心</p>
<p>Leetcode 123 买卖股票的最佳时机 III —— 最多交易2次<br>令 k = 2</p>
<p>Leetcode 188 买卖股票的最佳时机 IV —— 最多交易k次</p>
]]></content>
      <categories>
        <category>Exercise</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring笔记05 IoC</title>
    <url>/2020/02/28/note-spring-05/</url>
    <content><![CDATA[<p><a href="https://www.bilibili.com/video/av47952931" target="_blank" rel="noopener">https://www.bilibili.com/video/av47952931</a><br>p15～34</p>
<hr>
<h1 id="IoC的概念和作用"><a href="#IoC的概念和作用" class="headerlink" title="IoC的概念和作用"></a>IoC的概念和作用</h1><p>上次工厂模式中创建对象有2种方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式1</span></span><br><span class="line">IAccountService as = <span class="keyword">new</span> AccountServiceImpl();</span><br><span class="line"><span class="comment">// 方式2</span></span><br><span class="line">IAccountService as = (IAccountService) BeanFactory.getBean(<span class="string">"accountService"</span>);</span><br></pre></td></tr></table></figure>
<p>方式1是主动的；方式2是被动的（根据配置创建），控制权转移给了工厂</p>
<p><strong>IoC (Inversion of Control 控制反转)把创建对象的权利交给框架</strong><br><strong>其作用是降低程序的耦合</strong><br>但只能是降低，而不能完全消除。如果两个类之间任何关系都没有，那有一个类一定是多余的。<br>自己写时用工厂模式实现，Spring中的Ioc如何实现？</p>
<hr>
<h1 id="Spring中的IoC"><a href="#Spring中的IoC" class="headerlink" title="Spring中的IoC"></a>Spring中的IoC</h1><p><strong>控制反转 Inversion of Control, IoC</strong></p>
<p>解决的问题：降低程序耦合（减少依赖关系）<br>解决的方法：使用配置的方式</p>
<h2 id="1-导入依赖"><a href="#1-导入依赖" class="headerlink" title="1.导入依赖"></a>1.导入依赖</h2><p>导入Spring依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在查看引入的依赖<br><img src="/images/2020/20200228105855284.png" width=400>  <img src="/images/2020/20200228110642475.png" width=500><br>包含了常用的核心组件<br><img src="/images/2020/20200228110023357.png" width=400></p>
<p>Core Container简单的说就是一个Map，封装了要用的对象</p>
<h2 id="2-创建配置文件-amp-导入约束-amp-配置bean"><a href="#2-创建配置文件-amp-导入约束-amp-配置bean" class="headerlink" title="2.创建配置文件&amp;导入约束&amp;配置bean"></a>2.创建配置文件&amp;导入约束&amp;配置bean</h2><p>然后创建bean.xml（没有固定要求，习惯这样命名，因为是管beans的）<br>在spring-framework-5.0.2.RELEASE-docs/spring-framework-reference文件夹中找到index.html<br><img src="/images/2020/20200228111723489.png" width=800><br>点core，搜索xmlns（导入xml schema约束的关键字）<br><img src="/images/2020/20200228111921799.png" width=800><br>把它复制粘贴到配置文件中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>配置bean，把对象的创建交给Spring来管理<br>同工厂模式，需要唯一标志和对象的全限定类名（包名+类名）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.itheima.service.impl.AccountServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"com.itheima.dao.impl.AccountDaoImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>剩下的解析配置文件的事就由Spring做了</p>
<h2 id="3-取出容器-amp-获取对象"><a href="#3-取出容器-amp-获取对象" class="headerlink" title="3.取出容器&amp;获取对象"></a>3.取出容器&amp;获取对象</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Client.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取核心容器对象</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        <span class="comment">// 2.根据id获取Bean对象</span></span><br><span class="line">        <span class="comment">// 方法一：拿到一个Object类，自己强转</span></span><br><span class="line">        IAccountService as  = (IAccountService)ac.getBean(<span class="string">"accountService"</span>);</span><br><span class="line">        <span class="comment">// 方法二：给一个类型，直接得到该类型对象</span></span><br><span class="line">        IAccountDao adao = ac.getBean(<span class="string">"accountDao"</span>,IAccountDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="tip-ApplicationContext的继承关系"><a href="#tip-ApplicationContext的继承关系" class="headerlink" title="tip: ApplicationContext的继承关系"></a>tip: ApplicationContext的继承关系</h2><p>Idea中，在类上右键-&gt;Diagrams-&gt;Show Diagram<br>在接口上右键-&gt;Show Implementations<br><img src="/images/2020/20200228114140888.png"><br>可以看到，ApplicationContext继承自BeanFactory，ClassPathXmlApplicationContext是它的实现类</p>
<p>ApplicationContext的三个常用实现类：<br>     *      ClassPathXmlApplicationContext：它可以加载类路径下的配置文件（配置文件必须在类路径下，不在的加载不了）（更常用）<br>     *      FileSystemXmlApplicationContext：它可以加载磁盘任意路径下的配置文件（必须有访问权限）<br>     *      AnnotationConfigApplicationContext：它是用于读取注解创建容器的（后面讲）</p>
<h2 id="tip-ApplicationContext和BeanFactory的区别"><a href="#tip-ApplicationContext和BeanFactory的区别" class="headerlink" title="tip: ApplicationContext和BeanFactory的区别"></a>tip: ApplicationContext和BeanFactory的区别</h2><p><strong>ApplicationContext</strong></p>
<ul>
<li>构建核心容器时，创建对象采取的策略是采用立即加载的方式。即，一读取完配置文件马上就创建配置文件中配置的对象</li>
<li>单例对象适用 </li>
</ul>
<p><strong>BeanFactory</strong></p>
<ul>
<li>构建核心容器时，创建对象采取的策略是采用延迟加载的方式。即，什么时候根据id获取对象了，什么时候才真正的创建对象</li>
<li>多例对象使用</li>
</ul>
<hr>
<h1 id="bean的细节"><a href="#bean的细节" class="headerlink" title="bean的细节"></a>bean的细节</h1><h2 id="创建bean对象的三种方式"><a href="#创建bean对象的三种方式" class="headerlink" title="创建bean对象的三种方式"></a>创建bean对象的三种方式</h2><h3 id="方式一：使用默认构造函数创建"><a href="#方式一：使用默认构造函数创建" class="headerlink" title="方式一：使用默认构造函数创建"></a>方式一：使用默认构造函数创建</h3><p>在spring的配置文件中使用bean标签，配以id和class属性之后，且没有其他属性和标签时。采用的就是默认构造函数创建bean对象，此时如果类中没有默认构造函数，则对象无法创建。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.itheima.service.impl.AccountServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="方式二：使用普通工厂中的方法创建对象"><a href="#方式二：使用普通工厂中的方法创建对象" class="headerlink" title="方式二：使用普通工厂中的方法创建对象"></a>方式二：使用普通工厂中的方法创建对象</h3><p>实际开发中，可能要用到别人写好的jar包中的类。（不知道有没有默认构造函数，也无法通过修改源码来提供默认构造函数）。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模拟一个工厂类（该类可能是存在于jar包中的，我们无法通过修改源码的方式来提供默认构造函数）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IAccountService <span class="title">getAccountService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AccountServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有这么一个InstanceFactory类，需要拿到AccountServiceImpl<br>如果像方法一那样创建对象，即</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"instanceFactory"</span> <span class="attr">class</span>=<span class="string">"com.itheima.factory.InstanceFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>得到的并不是AccountServiceImpl对象，而是InstanceFactory对象</p>
<p>此时应该修改创建对象的方式<br><strong>使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并存入spring容器）</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"instanceFactory"</span> <span class="attr">class</span>=<span class="string">"com.itheima.factory.InstanceFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">factory-bean</span>=<span class="string">"instanceFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getAccountService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>先创建工厂，再通过工厂的方法创建所需对象</p>
<h3 id="方式三：使用工厂中的静态方法创建对象"><a href="#方式三：使用工厂中的静态方法创建对象" class="headerlink" title="方式三：使用工厂中的静态方法创建对象"></a>方式三：使用工厂中的静态方法创建对象</h3><p>模拟一个工厂类，它有一个返回对象的静态方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模拟一个工厂类（该类可能是存在于jar包中的，我们无法通过修改源码的方式来提供默认构造函数）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IAccountService <span class="title">getAccountService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AccountServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器)</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.itheima.factory.StaticFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getAccountService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里的factory-method是一个静态方法</p>
<p>Q：这两个工厂中不都new对象了吗？<br>A：把这两个对象看作jar包中的类（此处只是模拟它），jar包中不是.java文件而是.class，都是无法修改的。实际开发中，有些对象就得用方法二或方法三来创建</p>
<h2 id="指定bean对象的作用范围：bean标签的scope属性"><a href="#指定bean对象的作用范围：bean标签的scope属性" class="headerlink" title="指定bean对象的作用范围：bean标签的scope属性"></a>指定bean对象的作用范围：bean标签的scope属性</h2><p>取值：<br><strong>singleton</strong>：单例的（默认值）（常用）<br><strong>prototype</strong>：多例的（常用）<br><strong>request</strong>：作用于web应用的请求范围<br><strong>session</strong>：作用于web应用的会话范围<br><strong>global-session</strong>：作用于集群环境的会话范围（全局会话范围），当不是集群环境时，它就是session</p>
<p>例子：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.itheima.service.impl.AccountServiceImpl"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>global-session的含义<br><img src="/images/2020/20200228131045586.png" width=800></p>
<h2 id="bean对象的生命周期"><a href="#bean对象的生命周期" class="headerlink" title="bean对象的生命周期"></a>bean对象的生命周期</h2><p><strong>单例对象</strong></p>
<ul>
<li>出生：当容器创建时对象出生</li>
<li>活着：只要容器还在，对象一直活着</li>
<li>死亡：容器销毁，对象消亡</li>
</ul>
<p>总结：单例对象的生命周期和容器相同</p>
<p><strong>多例对象</strong></p>
<ul>
<li>出生：当我们使用对象时spring框架为我们创建</li>
<li>活着：对象只要是在使用过程中就一直活着。</li>
<li>死亡：当对象长时间不用，且没有别的对象引用时，由Java的垃圾回收器回收</li>
</ul>
<p>可以通过bean标签指定在特定生命周期执行的方法</p>
<p>例子：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">// beans.xml</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.itheima.service.impl.AccountServiceImpl"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">scope</span>=<span class="string">"singleton"</span> <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"destroy"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Client.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取核心容器对象</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);  <span class="comment">// 执行完这句，单例对象就创建了</span></span><br><span class="line">        <span class="comment">// 2.根据id获取Bean对象</span></span><br><span class="line">        IAccountService as  = (IAccountService)ac.getBean(<span class="string">"accountService"</span>);  <span class="comment">// 执行完这句，多例对象才创建</span></span><br><span class="line">        as.saveAccount();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AccountServiceImpl.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccountServiceImpl</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"对象创建了..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">saveAccount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"service中的saveAccount方法执行了..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"对象初始化了..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">destroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"对象销毁了..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行输出</p>
<blockquote>
<p>对象创建了…<br>对象初始化了…<br>service中的saveAccount方法执行了…</p>
</blockquote>
<p>Q：为什么没有执行销毁方法？<br>A：main()结束之后，当前进程占用的内存全部释放（包括容器），此时并没有调用销毁方法就已经把内存释放了。这里要想调用销毁方法，可以手动关闭容器</p>
<p>在main()中手动关闭容器<br><img src="/images/2020/20200228132514347.png" width=600><br>为什么没有呢？<br>这里ApplicationContext是个接口，调不到子类的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.获取核心容器对象</span></span><br><span class="line"><span class="comment">// ApplicationContext ac = new ClassPathXmlApplicationContext("bean.xml");</span></span><br><span class="line">ClassPathXmlApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line"><span class="comment">// 2.根据id获取Bean对象</span></span><br><span class="line">IAccountService as  = (IAccountService)ac.getBean(<span class="string">"accountService"</span>);</span><br><span class="line">as.saveAccount();</span><br><span class="line"><span class="comment">// 3.手动关闭容器</span></span><br><span class="line">ac.close();</span><br></pre></td></tr></table></figure>
<p>这样就可以了</p>
<blockquote>
<p>对象创建了…<br>对象初始化了…<br>service中的saveAccount方法执行了…<br>对象销毁了…</p>
</blockquote>
<p>但是，此时如果把对象改为多例的，其它都不变，不会执行销毁方法</p>
<hr>
<h1 id="Spring中的依赖注入-DI"><a href="#Spring中的依赖注入-DI" class="headerlink" title="Spring中的依赖注入(DI)"></a>Spring中的依赖注入(DI)</h1><p><strong>依赖注入 Dependency Injection, DI</strong></p>
<p><strong>能注入的三类数据</strong></p>
<ol>
<li>基本类型和String</li>
<li>其他bean类型（在配置文件中或者注解配置过的bean）</li>
<li>复杂类型/集合类型</li>
</ol>
<p><strong>注入的三种方式</strong></p>
<ol>
<li>使用构造函数提供</li>
<li>使用set方法提供</li>
<li>使用注解提供</li>
</ol>
<h2 id="构造函数注入"><a href="#构造函数注入" class="headerlink" title="构造函数注入"></a>构造函数注入</h2><p><strong>使用的标签</strong>：constructor-arg<br><strong>标签出现的位置</strong>：bean标签的内部<br><strong>标签中的属性（指定参数）</strong>：</p>
<ul>
<li>type：指定数据类型</li>
<li>index：指定构造函数中的索引位置</li>
<li>name：指定名称（常用）</li>
</ul>
<p><strong>标签中的属性（提供赋值）</strong>：</p>
<ul>
<li>value：用于提供基本类型和String类型的数据</li>
<li>ref：用于指定其他的bean类型数据（在spring的Ioc核心容器中出现过的bean对象）</li>
</ul>
<p><strong>优势</strong>：<br>在获取bean对象时，注入数据是必须的操作，否则对象无法创建成功（必须某些数据时，不会被忽略）<br><strong>弊端</strong>：<br>改变了bean对象的实例化方式，创建对象时，即使以后用不到这些数据，也必须提供</p>
<p>例：</p>
<p>AccountServiceImpl类有3个变量，没有无参构造函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果是经常变化的数据，并不适用于注入的方式</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccountServiceImpl</span><span class="params">(String name,Integer age,Date birthday)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>bean.xml对应的bean配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.itheima.service.impl.AccountServiceImpl"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"18"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"birthday"</span> <span class="attr">ref</span>=<span class="string">"now"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置一个日期对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"now"</span> <span class="attr">class</span>=<span class="string">"java.util.Date"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>配置中的value都是字符串，对于String、Integer类型，Spring可以自动转换<br>但Date无法直接转换，需另外配置</p>
<h2 id="set方法注入"><a href="#set方法注入" class="headerlink" title="set方法注入"></a>set方法注入</h2><p>比构造函数常用</p>
<p><strong>使用的标签</strong>：property<br><strong>出现的位置</strong>：bean标签的内部<br><strong>标签的属性</strong>：</p>
<ul>
<li>name：用于指定注入时所调用的set方法名称（不管变量名）</li>
<li>value：用于提供基本类型和String类型的数据</li>
<li>ref：用于指定其他的bean类型数据</li>
</ul>
<p><strong>优势</strong>：<br>创建对象时没有明确的限制，可以直接使用默认构造函数<br><strong>弊端</strong>：<br>如果有某个成员必须有值，但没有注入</p>
<p>例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl2</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;<span class="keyword">this</span>.name = name;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;<span class="keyword">this</span>.age = age;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;<span class="keyword">this</span>.birthday = birthday;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService2"</span> <span class="attr">class</span>=<span class="string">"com.itheima.service.impl.AccountServiceImpl2"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"TEST"</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"21"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"birthday"</span> <span class="attr">ref</span>=<span class="string">"now"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="复杂类型注入"><a href="#复杂类型注入" class="headerlink" title="复杂类型注入"></a>复杂类型注入</h2><p>用于给List结构集合注入的标签：<br>            list array set</p>
<p>用于个Map结构集合注入的标签:<br>            map  props</p>
<p>! 结构相同，标签可以互换</p>
<p>例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl3</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// list结构</span></span><br><span class="line">    <span class="keyword">private</span> String[] myStrs;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; myList;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; mySet;</span><br><span class="line">    <span class="comment">// map结构</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; myMap;</span><br><span class="line">    <span class="keyword">private</span> Properties myProps;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyStrs</span><span class="params">(String[] myStrs)</span> </span>&#123; <span class="keyword">this</span>.myStrs = myStrs; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyList</span><span class="params">(List&lt;String&gt; myList)</span> </span>&#123; <span class="keyword">this</span>.myList = myList; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMySet</span><span class="params">(Set&lt;String&gt; mySet)</span> </span>&#123; <span class="keyword">this</span>.mySet = mySet; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyMap</span><span class="params">(Map&lt;String, String&gt; myMap)</span> </span>&#123; <span class="keyword">this</span>.myMap = myMap; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyProps</span><span class="params">(Properties myProps)</span> </span>&#123; <span class="keyword">this</span>.myProps = myProps; &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService3"</span> <span class="attr">class</span>=<span class="string">"com.itheima.service.impl.AccountServiceImpl3"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--用array、list、set都行--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myStrs"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>CCC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--用map、prop都行--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myMap"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"testA"</span> <span class="attr">value</span>=<span class="string">"aaa"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"testB"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">value</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	        <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="基于注解的IoC配置"><a href="#基于注解的IoC配置" class="headerlink" title="基于注解的IoC配置"></a>基于注解的IoC配置</h1><p>注解配置和xml配置要实现的功能都是一样的：降低程序耦合</p>
<p>曾经XML的配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.itheima.service.impl.AccountServiceImpl"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">scope</span>=<span class="string">""</span>  <span class="attr">init-method</span>=<span class="string">""</span> <span class="attr">destroy-method</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">""</span>  <span class="attr">value</span>=<span class="string">""</span> | <span class="attr">ref</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用注解时，不用上面的<bean></bean>，但需要告诉Spring开启注解扫描</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--告知spring在创建容器时要扫描的包，配置所需要的标签不是在beans的约束中，而是一个名称为</span></span><br><span class="line"><span class="comment">    context名称空间和约束中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.itheima"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>其中context名称空间和前面一样，在文档中搜索找</p>
<h2 id="用于创建对象的注解"><a href="#用于创建对象的注解" class="headerlink" title="用于创建对象的注解"></a>用于创建对象的注解</h2><p><strong>@Component</strong><br>作用：<br>用于把当前类对象存入spring容器中</p>
<p>属性：<br>value：用于指定bean的id（不写时，默认值是当前类名，且首字母小写）</p>
<p>例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(value = <span class="string">"accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line">	<span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>细节：<br>当只给一个value属性赋值时，value可以不写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"accountService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line">	<span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>@Controller</strong>：一般用在表现层<br><strong>@Service</strong>：一般用在业务层<br><strong>@Repository</strong>：一般用在持久层</p>
<p>以上三个注解的作用和属性与@Component一模一样<br>是Spring框架提供的明确的三层使用的注解，使三层对象更加清晰</p>
<h2 id="用于注入数据的注解"><a href="#用于注入数据的注解" class="headerlink" title="用于注入数据的注解"></a>用于注入数据的注解</h2><p><strong>@Autowired</strong><br>作用：<br>自动按照类型注入。只要容器中有唯一的一个bean对象类型和要注入的变量类型匹配，就可以注入成功。如果ioc容器中没有任何bean的类型和要注入的变量类型匹配，则报错<br>（当有多个bean类型匹配时，用变量名和bean的id匹配，如果恰好有一个匹配，也可以成功，否则报错）</p>
<p>出现位置：<br>可以是变量上，也可以是方法上</p>
<p>例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> IAccountDao accountDao = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>

<p>细节：<br>在使用注解注入时，set方法就不是必须的了</p>
<p><strong>@Qualifier</strong><br> 作用：<br> 在按照类中注入的基础之上再按照名称注入。在给类成员注入时不能单独使用，必须和@Autowired一起。但是在给方法参数注入时可以单独使用</p>
<p>属性：<br>value：用于指定注入bean的id</p>
<p>例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"accountDao1"</span>)</span><br><span class="line"><span class="keyword">private</span> IAccountDao accountDao = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>

<p><strong>@Resource</strong><br> 作用：<br> 直接按照bean的id注入，可以独立使用</p>
<p>属性：<br>name：用于指定bean的id<br>（注意：这里是name，不是value）</p>
<p>例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span>(name = <span class="string">"accountDao1"</span>)</span><br><span class="line"><span class="keyword">private</span> IAccountDao accountDao = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>

<p>以上三个注解都只能注入其他bean类型的数据，而基本类型和String类型无法注入<br>另外，集合类型的注入只能通过XML来实现</p>
<p><strong>@Value</strong><br>作用：<br>用于注入基本类型和String类型的数据</p>
<p>属性：<br>value：用于指定数据的值<br>可以使用Spring中SpEL（即Spring的el表达式）写法：${表达式}</p>
<h2 id="用于改变作用范围的注解"><a href="#用于改变作用范围的注解" class="headerlink" title="用于改变作用范围的注解"></a>用于改变作用范围的注解</h2><p><strong>@Scope</strong><br>作用：<br>用于指定bean的作用范围</p>
<p>属性：<br>value：指定范围的取值（常用：singleton prototype）</p>
<p>例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"accountService"</span>)</span><br><span class="line"><span class="meta">@Scope</span>(<span class="string">"prototype"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line">	<span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="生命周期相关的注解"><a href="#生命周期相关的注解" class="headerlink" title="生命周期相关的注解"></a>生命周期相关的注解</h2><p><strong>@PreDestroy</strong><br>作用：用于指定销毁方法</p>
<p><strong>@PostConstruct</strong><br>作用：用于指定初始化方法</p>
<p>和bean标签中使用init-method和destroy-methode一样</p>
<p>例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"accountService"</span>)</span><br><span class="line"><span class="meta">@Scope</span>(<span class="string">"singleton"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"accountDao1"</span>)</span><br><span class="line">    <span class="keyword">private</span> IAccountDao accountDao = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"初始化方法执行了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">destroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"销毁方法执行了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">saveAccount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        accountDao.saveAccount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同样，如果类是多例的，可能不会看到销毁方法执行的输出，因为它的销毁是JVM管的</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring笔记04 应用分层</title>
    <url>/2020/02/24/note-spring-04/</url>
    <content><![CDATA[<h1 id="三层架构-3-Tier-Architecture"><a href="#三层架构-3-Tier-Architecture" class="headerlink" title="三层架构 (3-Tier Architecture)"></a>三层架构 (3-Tier Architecture)</h1><img src="/images/2020/20200224200654315.png" width=400>

<ul>
<li><strong>表示层 (PL, Presentation Layer 或 UI, User Interface Layer)</strong> —— 主要是与用户交互的界面，用于接收用户输入的数据和显示处理后的数据</li>
<li><strong>业务逻辑层 (BLL, Business Logic Layer)</strong> —— PL与DAL之间的桥梁，实现业务逻辑，主要包括验证、计算、规则等</li>
<li><strong>数据访问层 (DAL, Data Access Layer)</strong> —— 与数据库交互，实现对数据的CURD，将存储在数据库中的数据提交给业务层，同时将业务层处理的数据保存到数据库</li>
</ul>
<h1 id="MVC模式-Model-View-Controller"><a href="#MVC模式-Model-View-Controller" class="headerlink" title="MVC模式 (Model-View-Controller)"></a>MVC模式 (Model-View-Controller)</h1><img src="/images/2020/20200224201239437.png" width=300>

<p>描述1:</p>
<ul>
<li><strong>模型 (Model)</strong> —— 程序需要操作的数据或信息</li>
<li><strong>视图 (View)</strong> —— 提供给用户的操作界面，是程序的外壳</li>
<li><strong>控制器 (Controller)</strong> —— 负责根据用户从”视图层”输入的指令，选取”数据层”中的数据，然后对其进行相应的操作，产生最终结果</li>
</ul>
<p>描述2:</p>
<ul>
<li><strong>模型 (Model)</strong> —— 表示应用程序和任何应由其执行的业务逻辑或操作的状态</li>
<li><strong>视图 (View)</strong> —— 负责通过用户界面展示内容</li>
<li><strong>控制器 (Controller)</strong> —— 是处理用户交互、使用模型并最终选择要呈现的视图的组件</li>
</ul>
<h1 id="三层架构与MVC的区别与联系"><a href="#三层架构与MVC的区别与联系" class="headerlink" title="三层架构与MVC的区别与联系"></a>三层架构与MVC的区别与联系</h1><h4 id="1-关注点"><a href="#1-关注点" class="headerlink" title="1. 关注点"></a>1. 关注点</h4><ul>
<li>三层架构是为了解决整个应用程序中各个业务操作过程中的==不同阶段的代码封装==问题，使程序员更加专注的处理某阶段的业务逻辑</li>
<li>MVC架构模式将应用程序分为三个主要组成部分，有助于实现关注点分离。分离关注点是开发时的指导原则，此原则主张应根据==软件执行的工作类型==将软件分离<h4 id="2-切分方向"><a href="#2-切分方向" class="headerlink" title="2. 切分方向"></a>2. 切分方向</h4></li>
<li>三层架构是一种软件抽象的层次结构，是对复杂系统的一种<strong>纵向切分</strong></li>
<li>MVC更像是<strong>横向切分</strong>，每块都可以独立测试<h4 id="3-依赖关系"><a href="#3-依赖关系" class="headerlink" title="3. 依赖关系"></a>3. 依赖关系</h4></li>
<li>三层架构中，层次之间一般是<strong>向下依赖</strong>的。下层在未确定接口（契约）规范前，上层代码无法开发，下层代码接口的变化将使上层一起变化</li>
<li>MVC中，三者并<strong>不存在明显的层次结构</strong>，没有明显的向下依赖的关系。相反的是View和Model往往是比较独立的，而Controller则是两者的桥梁</li>
</ul>
<p><strong>都是为了解耦</strong></p>
<hr>
<h1 id="MVC、MVP、MVVM"><a href="#MVC、MVP、MVVM" class="headerlink" title="MVC、MVP、MVVM"></a>MVC、MVP、MVVM</h1><blockquote>
<p><a href="http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html" target="_blank" rel="noopener">MVC，MVP 和 MVVM 的图示</a></p>
</blockquote>
<hr>
<h1 id="阿里规范"><a href="#阿里规范" class="headerlink" title="阿里规范"></a>阿里规范</h1><blockquote>
<p>《Java开发手册》v1.5.0 华山版</p>
</blockquote>
<p>图中默认上层依赖于下层，箭头关系表示可直接依赖，如:开放接口层可以依赖于 Web 层，也可以直接依赖于 Service 层，依此类推:<br><img src="/images/2020/20200224193901683.png" width=400></p>
<ul>
<li><strong>开放接口层</strong> : 可直接封装 Service 方法暴露成 RPC 接口;通过 Web 封装成 http 接口;进行网关安全控制、流量控制等。</li>
<li><strong>终端显示层</strong> : 各个端的模板渲染并执行显示的层。当前主要是 velocity 渲染，JS 渲染，JSP 渲染，移动端展示等。</li>
<li><strong>Web层</strong> : 主要是对访问控制进行转发，各类基本参数校验，或者不复用的业务简单处理等。</li>
<li><strong>Service层</strong> : 相对具体的业务逻辑服务层。</li>
<li><strong>Manager层</strong> : 通用业务处理层，它有如下特征:</li>
</ul>
<ol>
<li>对第三方平台封装的层，预处理返回结果及转化异常信息。</li>
<li>对 Service 层通用能力的下沉，如缓存方案、中间件通用处理。</li>
<li>与 DAO 层交互，对多个 DAO 的组合复用。</li>
</ol>
<ul>
<li><strong>DAO层</strong> : 数据访问层，与底层 MySQL、Oracle、Hbase 等进行数据交互。</li>
<li><strong>外部接口或第三方平台</strong> : 包括其它部门 RPC 开放接口，基础平台，其它公司的 HTTP 接口。</li>
</ul>
<blockquote>
<p>ref:<br><a href="http://www.ruanyifeng.com/blog/2007/11/mvc.html" target="_blank" rel="noopener">谈谈MVC模式</a><br><a href="https://www.jianshu.com/p/3b231e5094c5" target="_blank" rel="noopener">ASP.NET MVC与三层架构</a><br><a href="https://docs.microsoft.com/zh-cn/aspnet/core/mvc/overview?view=aspnetcore-3.1" target="_blank" rel="noopener">ASP.NET Core MVC 概述</a><br><a href="https://docs.microsoft.com/zh-cn/dotnet/architecture/modern-web-apps-azure/architectural-principles#separation-of-concerns" target="_blank" rel="noopener">体系结构原则</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring笔记03 工厂模式</title>
    <url>/2020/02/24/note-spring-03/</url>
    <content><![CDATA[<p><a href="https://www.bilibili.com/video/av47952931" target="_blank" rel="noopener">https://www.bilibili.com/video/av47952931</a><br>p9~14</p>
<hr>
<h1 id="程序的耦合与解耦-以jdbc注册驱动为例"><a href="#程序的耦合与解耦-以jdbc注册驱动为例" class="headerlink" title="程序的耦合与解耦 (以jdbc注册驱动为例)"></a>程序的耦合与解耦 (以jdbc注册驱动为例)</h1><p>jdbc操作中，注册数据库驱动时，有2种方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法1</span></span><br><span class="line">DriverManager.registerDriver(<span class="keyword">new</span> com.mysql.jdbc.Driver());</span><br><span class="line"><span class="comment">// 方法2</span></span><br><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br></pre></td></tr></table></figure>
<p>在pom.xml中添加了依赖的情况下都可以正常运行</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>但是，如果去掉这段依赖</p>
<p>方法1报Error，无法通过编译</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Error:(26, 56) java: 程序包com.mysql.jdbc不存在</span><br></pre></td></tr></table></figure>
<p>而方法2报Exception，可以通过编译（无法运行）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.ClassNotFoundException: com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure>
<p>因为方法1依赖一个具体的驱动类，而方法2用反射，依赖的只是一个字符串<br>但是这个字符串仍是写死在代码里的。应该写到配置文件里去，进一步减少耦合</p>
<p>实际开发中应该做到：</p>
<p><strong>编译期不依赖，运行时才依赖</strong></p>
<p>解耦的思路：</p>
<p><strong>第一步：使用反射来创建对象，而避免使用new关键字</strong></p>
<p><strong>第二步：通过读取配置文件来获取要创建的对象全限定类名</strong></p>
<hr>
<h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><h2 id="原始的分层实现方法"><a href="#原始的分层实现方法" class="headerlink" title="原始的分层实现方法"></a>原始的分层实现方法</h2><img src="/images/2020/202002271544168.png" width=400>

<ul>
<li>Client : 模拟一个表现层，用于调用业务层</li>
<li>IAccountService : 账户业务层的接口</li>
<li>AccountServiceImpl : 账户的业务层实现类</li>
<li>IAccountDao : 账户的持久层接口</li>
<li>AccountDaoImpl : 账户的持久层实现类</li>
</ul>
<p>其中，有两个依赖关系</p>
<ol>
<li>表现层调用业务层时<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IAccountService as = <span class="keyword">new</span> AccountServiceImpl();</span><br><span class="line">        as.saveAccount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>业务层调用持久层时<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> IAccountDao accountDao = <span class="keyword">new</span> AccountDaoImpl();</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">saveAccount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        accountDao.saveAccount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
都用到了new，耦合度高<br>如果此时把AccountDaoImpl的代码删了，Service就报错了。和前面jdbc中编译期的错误一样</li>
</ol>
<p>如何解除这种依赖？</p>
<h2 id="Bean-amp-BeanFactory"><a href="#Bean-amp-BeanFactory" class="headerlink" title="Bean &amp; BeanFactory"></a>Bean &amp; BeanFactory</h2><p><strong>Bean</strong> —— 可重用组件<br>eg：一个Dao可能被多个Service使用，一个Service可能被多个Servlet使用，它们是可重用的</p>
<p><strong>JavaBean</strong> —— 用java语言编写的可重用组件</p>
<p><strong>BeanFactory</strong> —— 创建Bean对象的工厂<br>eg：创建Dao和Service对象</p>
<p>要实现这个工厂，类似前面jdbc，</p>
<p>1.需要一个<strong>配置文件</strong>来配置service和dao<br>内容：唯一标识=全限定类名（key=value)<br>配置文件可以是xml也可以是properties</p>
<p>2.读取配置文件中配置的内容，通过==反射==创建对象</p>
<h2 id="工厂模式解耦"><a href="#工厂模式解耦" class="headerlink" title="工厂模式解耦"></a>工厂模式解耦</h2><p>在resources中新建beans.properties配置文件（此处用properties因为简单，Spring中用的是xml）</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">accountService</span> = <span class="string">com.itheima.service.impl.AccountServiceImpl</span></span><br><span class="line"><span class="attr">accountDao</span> = <span class="string">com.itheima.dao.impl.AccountDaoImpl</span></span><br></pre></td></tr></table></figure>
<p>创建BeanFactory类读取properties文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个Properties对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Properties props;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用静态代码块为Properties对象赋值</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 实例化对象</span></span><br><span class="line">            props = <span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">// 获取properties文件的流对象</span></span><br><span class="line">            InputStream in = BeanFactory.class.getClassLoader().getResourceAsStream("bean.properties");</span><br><span class="line">            props.load(in);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            <span class="comment">// 抛一个Error，没有获取配置信息后面想都不要想</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(<span class="string">"初始化properties失败！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 根据Bean的名称获取bean对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String beanName)</span></span>&#123;</span><br><span class="line">        Object bean = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String beanPath = props.getProperty(beanName);</span><br><span class="line">            bean = Class.forName(beanPath).newInstance();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ol>
<li>读配置文件时不要用FileInputStream，Web工程不好找路径。用类加载器。</li>
<li>getBean()返回的是Object类型</li>
</ol>
<p>把两处使用new创建对象的改为用反射创建</p>
<p>Client中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// IAccountService as = new AccountServiceImpl();</span></span><br><span class="line">IAccountService as = (IAccountService) BeanFactory.getBean(<span class="string">"accountService"</span>);</span><br></pre></td></tr></table></figure>
<p>AccountServiceImpl中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// private IAccountDao accountDao = new AccountDaoImpl();</span></span><br><span class="line"><span class="keyword">private</span> IAccountDao accountDao = (IAccountDao) BeanFactory.getBean(<span class="string">"accountDao"</span>);</span><br></pre></td></tr></table></figure>
<p>Object类强转为对应的类</p>
<p>改进后程序的UML类图长这样</p>
<img src="/images/2020/20200227162837205.png" width=600>

<p>此时如果把AccountServiceImpl删了，程序可以运行，抛ClassNotFoundException</p>
<h2 id="工厂模式的问题与改进"><a href="#工厂模式的问题与改进" class="headerlink" title="工厂模式的问题与改进"></a>工厂模式的问题与改进</h2><p>如果要在Client中多次调用Service？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++) &#123;</span><br><span class="line">	IAccountService as = (IAccountService) BeanFactory.getBean(<span class="string">"accountService"</span>);</span><br><span class="line">	System.out.println(as);</span><br><span class="line">	as.saveAccount();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>并在AccountServiceImpl中加一个成员变量i</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IAccountDao accountDao = (IAccountDao) BeanFactory.getBean(<span class="string">"accountDao"</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">saveAccount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        accountDao.saveAccount();</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行</p>
<blockquote>
<p>com.itheima.service.impl.AccountServiceImpl@610455d6<br>保存了账户<br>1<br>com.itheima.service.impl.AccountServiceImpl@511d50c0<br>保存了账户<br>1<br>com.itheima.service.impl.AccountServiceImpl@60e53b93<br>保存了账户<br>1<br>com.itheima.service.impl.AccountServiceImpl@5e2de80c<br>保存了账户<br>1<br>com.itheima.service.impl.AccountServiceImpl@1d44bcfa<br>保存了账户<br>1</p>
<p>Process finished with exit code 0</p>
</blockquote>
<p>可以看到，AccountServiceImpl创建了5次，每次都是一个新的对象<br>此时的对象是多例，效率没有单例高</p>
<p>可以在BeanFactory中把创建出的对象都存起来</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个Map,用于存放我们要创建的对象。我们把它称之为容器</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,Object&gt; beans;</span><br></pre></td></tr></table></figure>
<p>在静态代码块中，得到配置文件的输入流后，实例化这个容器。取出配置文件中所有的key-value，创建并保存它们</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实例化容器</span></span><br><span class="line">beans = <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</span><br><span class="line"><span class="comment">// 取出配置文件中所有的Key</span></span><br><span class="line">Enumeration keys = props.keys();</span><br><span class="line"><span class="comment">// 遍历枚举</span></span><br><span class="line"><span class="keyword">while</span> (keys.hasMoreElements())&#123;</span><br><span class="line">    <span class="comment">// 取出每个Key</span></span><br><span class="line">    String key = keys.nextElement().toString();</span><br><span class="line">    <span class="comment">// 根据key获取value</span></span><br><span class="line">    String beanPath = props.getProperty(key);</span><br><span class="line">    <span class="comment">// 反射创建对象</span></span><br><span class="line">    Object value = Class.forName(beanPath).newInstance();</span><br><span class="line">    <span class="comment">// 把key和value存入容器中</span></span><br><span class="line">    beans.put(key,value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>获取Beans，不用newInstance()，直接从容器中取即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String beanName)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> beans.get(beanName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样修改后，调用5次Service打印的结果是</p>
<blockquote>
<p>com.itheima.service.impl.AccountServiceImpl@610455d6<br>保存了账户<br>1<br>com.itheima.service.impl.AccountServiceImpl@610455d6<br>保存了账户<br>2<br>com.itheima.service.impl.AccountServiceImpl@610455d6<br>保存了账户<br>3<br>com.itheima.service.impl.AccountServiceImpl@610455d6<br>保存了账户<br>4<br>com.itheima.service.impl.AccountServiceImpl@610455d6<br>保存了账户<br>5</p>
<p>Process finished with exit code 0</p>
</blockquote>
<p>此时的AccountServiceImpl就是单例的了</p>
<p>但有一个问题是，这个i在多线程时是不安全的<br>应该把它移到方法里面，就没有这个问题了（实际使用一般也是这样）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    private int i = 1;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">saveAccount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        accountDao.saveAccount();</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="工厂模式使用套路总结"><a href="#工厂模式使用套路总结" class="headerlink" title="工厂模式使用套路总结"></a>工厂模式使用套路总结</h2><p>1.创建BeanFactory</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// BeanFactory.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个Properties对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Properties props;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个Map,用于存放我们要创建的对象。称之为容器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,Object&gt; beans;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用静态代码块为Properties对象赋值</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1.实例化对象</span></span><br><span class="line">            props = <span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">// 2.获取properties文件的流对象</span></span><br><span class="line">            InputStream in = BeanFactory.class.getClassLoader().getResourceAsStream("bean.properties");</span><br><span class="line">            props.load(in);</span><br><span class="line">            <span class="comment">// 3.实例化容器</span></span><br><span class="line">            beans = <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</span><br><span class="line">            <span class="comment">// 4.取出配置文件中所有的Key</span></span><br><span class="line">            Enumeration keys = props.keys();</span><br><span class="line">            <span class="comment">// 5.遍历枚举</span></span><br><span class="line">            <span class="keyword">while</span> (keys.hasMoreElements())&#123;</span><br><span class="line">                <span class="comment">// 取出每个Key</span></span><br><span class="line">                String key = keys.nextElement().toString();</span><br><span class="line">                <span class="comment">// 根据key获取value</span></span><br><span class="line">                String beanPath = props.getProperty(key);</span><br><span class="line">                <span class="comment">// 反射创建对象</span></span><br><span class="line">                Object value = Class.forName(beanPath).newInstance();</span><br><span class="line">                <span class="comment">// 把key和value存入容器中</span></span><br><span class="line">                beans.put(key,value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(<span class="string">"初始化properties失败！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据bean的名称获取对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String beanName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beans.get(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.配置文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">//</span> <span class="string">beans.properties</span></span><br><span class="line"></span><br><span class="line"><span class="attr">accountService</span>=<span class="string">com.itheima.service.impl.AccountServiceImpl</span></span><br><span class="line"><span class="attr">accountDao</span>=<span class="string">com.itheima.dao.impl.AccountDaoImpl</span></span><br></pre></td></tr></table></figure>

<p>3.获取Bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Client.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    	IAccountService as = (IAccountService) BeanFactory.getBean(<span class="string">"accountService"</span>);</span><br><span class="line">    	as.saveAccount();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring笔记02 Idea运行示例项目的坑</title>
    <url>/2020/02/24/note-spring-02/</url>
    <content><![CDATA[<p>表建好之后，Idea里面直接打开示例工程跑不起来，mysql的依赖有问题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.ClassNotFoundException: com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure>
<p>对比发现Maven路径不对</p>
<p>这是自己创建的可以运行的Maven项目配置<br><img src="/images/2020/20200224170149695.png" alt="img"></p>
<p>这是导入工程的配置<br><img src="/images/2020/20200224170322871.png" alt="img"></p>
<p>修改路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;maven&#x2F;3.6.2&#x2F;libexec</span><br><span class="line">&#x2F;Users&#x2F;coconutnut&#x2F;.m2&#x2F;settings.xml</span><br><span class="line">&#x2F;Users&#x2F;coconutnut&#x2F;.m2&#x2F;repository</span><br></pre></td></tr></table></figure>
<p>解决Driver问题</p>
<hr>
<p>下一个bug<br>Idea中点运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MySQLNonTransientConnectionException: Client does not support authentication protocol requested by server</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://www.cnblogs.com/inconceivable/p/9186822.html" target="_blank" rel="noopener">https://www.cnblogs.com/inconceivable/p/9186822.html</a></p>
</blockquote>
<p>在MySQL Workbench中输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE mysql;</span><br><span class="line">ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;iamgroot&#39;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>
<p>Idea中提示变成了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.sql.SQLException: Unknown initial character set index &#39;255&#39; received from server. Initial client character set can be forced via the &#39;characterEncoding&#39; property.</span><br><span class="line">	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:1055)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://blog.csdn.net/qq1515312832/article/details/85614733" target="_blank" rel="noopener">https://blog.csdn.net/qq1515312832/article/details/85614733</a></p>
</blockquote>
<p>在连接数据库的url后加上编码方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Connection conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/groot?useUnicode=true&amp;characterEncoding=utf8"</span>,<span class="string">"root"</span>,<span class="string">"iamgroot"</span>);</span><br></pre></td></tr></table></figure>
<p>成功</p>
<hr>
<p>总结：</p>
<ol>
<li>修改Preference-&gt;Build, Execution, Deployment-&gt;Build Tools-&gt;Maven中路径</li>
<li>在连接数据库的url后加上编码方式</li>
</ol>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring笔记01 jdbc常用操作</title>
    <url>/2020/02/24/note-spring-01/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/av47952931" target="_blank" rel="noopener">https://www.bilibili.com/video/av47952931</a></p>
</blockquote>
<p>之前学数据库的时候mysql踩了好多坑，主要是版本问题<br>不同版本语法有些不兼容<br>记录一下Apply生成的语句备用</p>
<hr>
<p>版本:<br>mysql-8.0.19-macos10.15-x86_64<br>MySQL Workbench 8.0.16</p>
<hr>
<h1 id="MySQL-Workbench操作"><a href="#MySQL-Workbench操作" class="headerlink" title="MySQL Workbench操作"></a>MySQL Workbench操作</h1><h2 id="创建schema"><a href="#创建schema" class="headerlink" title="创建schema"></a>创建schema</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">SCHEMA</span> <span class="string">`groot`</span> ;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="创建table"><a href="#创建table" class="headerlink" title="创建table"></a>创建table</h2><p>这是b站教程给的sql</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">account</span>(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">	<span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">40</span>),</span><br><span class="line">	money <span class="built_in">float</span></span><br><span class="line">)<span class="built_in">character</span> <span class="keyword">set</span> utf8 <span class="keyword">collate</span> utf8_general_ci;</span><br></pre></td></tr></table></figure>

<p>这是Workbench里生成的sql</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`groot`</span>.<span class="string">`account`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">45</span>) <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`money`</span> <span class="built_in">FLOAT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>));</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="插入记录"><a href="#插入记录" class="headerlink" title="插入记录"></a>插入记录</h2><p>b站教程给的sql</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">account</span>(<span class="keyword">name</span>,money) <span class="keyword">values</span>(<span class="string">'aaa'</span>,<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">account</span>(<span class="keyword">name</span>,money) <span class="keyword">values</span>(<span class="string">'bbb'</span>,<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">account</span>(<span class="keyword">name</span>,money) <span class="keyword">values</span>(<span class="string">'ccc'</span>,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
<p>Workbench里生成的sql</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`groot`</span>.<span class="string">`account`</span> (<span class="string">`name`</span>, <span class="string">`money`</span>) <span class="keyword">VALUES</span> (<span class="string">'aaa'</span>, <span class="string">'1000'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`groot`</span>.<span class="string">`account`</span> (<span class="string">`name`</span>, <span class="string">`money`</span>) <span class="keyword">VALUES</span> (<span class="string">'bbb'</span>, <span class="string">'1000'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`groot`</span>.<span class="string">`account`</span> (<span class="string">`name`</span>, <span class="string">`money`</span>) <span class="keyword">VALUES</span> (<span class="string">'ccc'</span>, <span class="string">'1000'</span>);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="查看记录"><a href="#查看记录" class="headerlink" title="查看记录"></a>查看记录</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> groot.account;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="Idea中连接数据库"><a href="#Idea中连接数据库" class="headerlink" title="Idea中连接数据库"></a>Idea中连接数据库</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.注册驱动</span></span><br><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.获取连接</span></span><br><span class="line">Connection conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/groot?useUnicode=true&amp;characterEncoding=utf8"</span>,<span class="string">"root"</span>,<span class="string">"iamgroot"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.获取操作数据库的预处理对象</span></span><br><span class="line">PreparedStatement pstm = conn.prepareStatement(<span class="string">"select * from account"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.执行SQL，得到结果集</span></span><br><span class="line">ResultSet rs = pstm.executeQuery();</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.遍历结果集</span></span><br><span class="line"><span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">    System.out.println(rs.getString(<span class="string">"name"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//6.释放资源</span></span><br><span class="line">rs.close();</span><br><span class="line">pstm.close();</span><br><span class="line">conn.close();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA 入门笔记</title>
    <url>/2020/02/24/note-idea/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/av71609179?from=search&amp;seid=7606544420555480673" target="_blank" rel="noopener">https://www.bilibili.com/video/av71609179?from=search&amp;seid=7606544420555480673</a></p>
</blockquote>
<hr>
<p>版本<br>ideaIU-2019.3.3 (学生License)<br>macOS Catalina 10.15.3</p>
<hr>
<h1 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h1><p>鼠标悬浮提示<br>Preferences-&gt;Editor-&gt;General-&gt;Show quick documentation on mouse move</p>
<p>自动导包<br>Preferences-&gt;Editor-&gt;General-&gt;AutoImport-&gt;Add unambiguous imports on the fly<br>Preferences-&gt;Editor-&gt;General-&gt;AutoImport-&gt;Optimize imports on the fly (for current project)</p>
<p>方法间分隔符<br>Preferences-&gt;Editor-&gt;General-&gt;Appearance-&gt;Show method separators</p>
<p>忽略大小写提示<br>Preferences-&gt;Editor-&gt;General-&gt;Code Completion-&gt;Match case (不勾选)</p>
<p>文件多行显示栏<br>Preferences-&gt;Editor-&gt;General-&gt;Editor Tabs-&gt;Show tabs in one row (不勾选)</p>
<p>修改注释颜色<br>Preferences-&gt;Editor-&gt;Color Scheme-&gt;Language Defaults-&gt;Comments中</p>
<p>项目工程编码<br>Preferences-&gt;Editor-&gt;File Encodings中</p>
<p>自动编译<br>Preferences-&gt;Build,Execution,Deployment-&gt;Compiler-&gt;Build project automatically<br>Preferences-&gt;Build,Execution,Deployment-&gt;Compiler-&gt;Compile independent modules in parallel</p>
<hr>
<h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><p>补全提示：^+/<br>自动生成：^+Enter<br>单行补全：Command+Shift+Enter<br>方法参数提示：Command+P<br>重新排版：Option+Command+L<br>Surround With：Option+Command+T<br>复制行或选中区域：Command+D<br>删除行：Command+Delete</p>
<h2 id="Live-Templates-amp-Postfix-Completion"><a href="#Live-Templates-amp-Postfix-Completion" class="headerlink" title="Live Templates &amp; Postfix Completion"></a>Live Templates &amp; Postfix Completion</h2><p>查询实时代码模版：Command+J<br>Preferences-&gt;Editor-&gt;LiveTemplates和Preferences-&gt;Editor-&gt;General-&gt;Postfix Completion中修改</p>
<hr>
<h1 id="对普通Java项目打包"><a href="#对普通Java项目打包" class="headerlink" title="对普通Java项目打包"></a>对普通Java项目打包</h1><p>File-&gt;Project Structure (或工具栏直接打开)<br>Project Settings-&gt;Artifacts中加入当前项目</p>
<p>Build-&gt;Build Artifacts<br>在工程目录中out-&gt;artifacts中创建jar包<br>测试时，输入java -cp 包名+类名</p>
<hr>
<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><h2 id="Idea配置Maven"><a href="#Idea配置Maven" class="headerlink" title="Idea配置Maven"></a>Idea配置Maven</h2><p>Preferences-&gt;Build,Execution,Deployment-&gt;Build Tools-&gt;Maven<br>Maven home directory中导入</p>
<p>Preferences-&gt;Build,Execution,Deployment-&gt;Build Tools-&gt;Maven-&gt;Importing-&gt;Import Maven projects automatically勾上</p>
<h2 id="创建Maven项目"><a href="#创建Maven项目" class="headerlink" title="创建Maven项目"></a>创建Maven项目</h2><p>New Project-&gt;Maven-&gt;Create from archetype勾上<br>可以选择maven-archetype-quickstart<br>运行默认的Hello World项目</p>
<h2 id="打包Maven项目"><a href="#打包Maven项目" class="headerlink" title="打包Maven项目"></a>打包Maven项目</h2><p>Idea的Terminal中输入 (或系统Terminal切到工程目录下输入)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn clean package</span><br></pre></td></tr></table></figure>
<p>打包完在target目录下<br>运行输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -cp target&#x2F;xxx.jar 包名+类名</span><br></pre></td></tr></table></figure>
<h2 id="排查依赖包冲突"><a href="#排查依赖包冲突" class="headerlink" title="排查依赖包冲突"></a>排查依赖包冲突</h2><p>pom文件中，右键Diagram-&gt;show Dependencies<br>结构图显示依赖关系<br>红色虚线标明重复<br>有时候重复不删掉也不会报错，默认使用路径短的<br>如果报错，排除掉即可，代码中自动<exclusion>…</exclusion></p>
<hr>
<h1 id="项目目录-amp-文件夹类型"><a href="#项目目录-amp-文件夹类型" class="headerlink" title="项目目录&amp;文件夹类型"></a>项目目录&amp;文件夹类型</h1><h2 id="对项目类型手动标注"><a href="#对项目类型手动标注" class="headerlink" title="对项目类型手动标注"></a>对项目类型手动标注</h2><p>在目录上右键Mark Directory as-&gt;选择类型</p>
<p>Test：可编译的单元测试目录<br>Resources：资源文件目录<br>Test Resources：单元测试资源文件目录<br>Excluded：排除目录（相当于被废弃掉）<br>Generated Sources：类似src（只有这种可以新建java类和包）</p>
<hr>
<h1 id="多模块Maven项目"><a href="#多模块Maven项目" class="headerlink" title="多模块Maven项目"></a>多模块Maven项目</h1><h2 id="构建多模块Maven项目"><a href="#构建多模块Maven项目" class="headerlink" title="构建多模块Maven项目"></a>构建多模块Maven项目</h2><p>新建一个Maven项目<br>再新建Module，它也会有src、main的目录结构</p>
<h2 id="设置模块间依赖关系"><a href="#设置模块间依赖关系" class="headerlink" title="设置模块间依赖关系"></a>设置模块间依赖关系</h2><p>Project Structure-&gt;Modules-&gt;选中一个模块-&gt;Dependencies中添加，然后勾选上<br>pom.xml中也许添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xxx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>添加依赖后可以直接引用被依赖模块中的代码</p>
<hr>
<h1 id="Maven-Web项目"><a href="#Maven-Web项目" class="headerlink" title="Maven Web项目"></a>Maven Web项目</h1><h2 id="创建Maven-Web项目"><a href="#创建Maven-Web项目" class="headerlink" title="创建Maven Web项目"></a>创建Maven Web项目</h2><p>New Project-&gt;Maven-&gt;Create from archetype<br>可以选择maven-archetype-webapp</p>
<h2 id="配置Tomcat"><a href="#配置Tomcat" class="headerlink" title="配置Tomcat"></a>配置Tomcat</h2><p>工具栏中build(绿色锤子)旁边，Add Configuration<br>新加Tomcat-&gt;Local （需先下载放在本地，配置路径）</p>
<p>Server中可以修改默认浏览器，可以修改端口号</p>
<p>Deployment中添加Artifact<br>xxx:war exploded</p>
<p>即可启动运行<br>默认index.jsp显示Hello World!</p>
<h2 id="打包运行"><a href="#打包运行" class="headerlink" title="打包运行"></a>打包运行</h2><p>右侧Maven工具栏中<br>Lifecycle-&gt;package-&gt;Run Maven Build<br>install-&gt;Run ‘xxx [install]’<br>打包成功后，在target文件夹下</p>
<p>war包可以部署到服务器上</p>
<p>也可以拷贝到本地Tomcat的webapp目录下<br>运行Tomcat的bin目录下的startup，启动tomcat<br>即可浏览器访问<br>结束后shutdown关闭Tomcat</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
</search>
