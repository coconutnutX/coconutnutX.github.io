<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>IntelliJ IDEA 笔记</title>
    <url>/2020/02/24/note-idea/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/av71609179?from=search&amp;seid=7606544420555480673">https://www.bilibili.com/video/av71609179?from=search&amp;seid=7606544420555480673</a></p>
</blockquote>
<hr>
<p>版本<br>ideaIU-2019.3.3 (学生License)<br>macOS Catalina 10.15.3</p>
<hr>
<h1 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h1><p>鼠标悬浮提示<br>Preferences-&gt;Editor-&gt;General-&gt;Show quick documentation on mouse move</p>
<p>自动导包<br>Preferences-&gt;Editor-&gt;General-&gt;AutoImport-&gt;Add unambiguous imports on the fly<br>Preferences-&gt;Editor-&gt;General-&gt;AutoImport-&gt;Optimize imports on the fly (for current project)</p>
<p>方法间分隔符<br>Preferences-&gt;Editor-&gt;General-&gt;Appearance-&gt;Show method separators</p>
<p>忽略大小写提示<br>Preferences-&gt;Editor-&gt;General-&gt;Code Completion-&gt;Match case (不勾选)</p>
<p>文件多行显示栏<br>Preferences-&gt;Editor-&gt;General-&gt;Editor Tabs-&gt;Show tabs in one row (不勾选)</p>
<p>修改注释颜色<br>Preferences-&gt;Editor-&gt;Color Scheme-&gt;Language Defaults-&gt;Comments中</p>
<p>项目工程编码<br>Preferences-&gt;Editor-&gt;File Encodings中</p>
<p>自动编译<br>Preferences-&gt;Build,Execution,Deployment-&gt;Compiler-&gt;Build project automatically<br>Preferences-&gt;Build,Execution,Deployment-&gt;Compiler-&gt;Compile independent modules in parallel</p>
<hr>
<h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><p>补全提示：^+/<br>自动生成：^+Enter<br>单行补全：Command+Shift+Enter<br>方法参数提示：Command+P<br>重新排版：Option+Command+L<br>Surround With：Option+Command+T<br>复制行或选中区域：Command+D<br>删除行：Command+Delete</p>
<h2 id="Live-Templates-amp-Postfix-Completion"><a href="#Live-Templates-amp-Postfix-Completion" class="headerlink" title="Live Templates &amp; Postfix Completion"></a>Live Templates &amp; Postfix Completion</h2><p>查询实时代码模版：Command+J<br>Preferences-&gt;Editor-&gt;LiveTemplates和Preferences-&gt;Editor-&gt;General-&gt;Postfix Completion中修改</p>
<hr>
<h1 id="对普通Java项目打包"><a href="#对普通Java项目打包" class="headerlink" title="对普通Java项目打包"></a>对普通Java项目打包</h1><p>File-&gt;Project Structure (或工具栏直接打开)<br>Project Settings-&gt;Artifacts中加入当前项目</p>
<p>Build-&gt;Build Artifacts<br>在工程目录中out-&gt;artifacts中创建jar包<br>测试时，输入java -cp 包名+类名</p>
<hr>
<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><h2 id="Idea配置Maven"><a href="#Idea配置Maven" class="headerlink" title="Idea配置Maven"></a>Idea配置Maven</h2><p>Preferences-&gt;Build,Execution,Deployment-&gt;Build Tools-&gt;Maven<br>Maven home directory中导入</p>
<p>Preferences-&gt;Build,Execution,Deployment-&gt;Build Tools-&gt;Maven-&gt;Importing-&gt;Import Maven projects automatically勾上</p>
<h2 id="创建Maven项目"><a href="#创建Maven项目" class="headerlink" title="创建Maven项目"></a>创建Maven项目</h2><p>New Project-&gt;Maven-&gt;Create from archetype勾上<br>可以选择maven-archetype-quickstart<br>运行默认的Hello World项目</p>
<h2 id="打包Maven项目"><a href="#打包Maven项目" class="headerlink" title="打包Maven项目"></a>打包Maven项目</h2><p>Idea的Terminal中输入 (或系统Terminal切到工程目录下输入)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn clean package</span><br></pre></td></tr></table></figure>
<p>打包完在target目录下<br>运行输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -cp target/xxx.jar 包名+类名</span><br></pre></td></tr></table></figure>
<h2 id="排查依赖包冲突"><a href="#排查依赖包冲突" class="headerlink" title="排查依赖包冲突"></a>排查依赖包冲突</h2><p>pom文件中，右键Diagram-&gt;show Dependencies<br>结构图显示依赖关系<br>红色虚线标明重复<br>有时候重复不删掉也不会报错，默认使用路径短的<br>如果报错，排除掉即可，代码中自动<exclusion>…</exclusion></p>
<hr>
<h1 id="项目目录-amp-文件夹类型"><a href="#项目目录-amp-文件夹类型" class="headerlink" title="项目目录&amp;文件夹类型"></a>项目目录&amp;文件夹类型</h1><h2 id="对项目类型手动标注"><a href="#对项目类型手动标注" class="headerlink" title="对项目类型手动标注"></a>对项目类型手动标注</h2><p>在目录上右键Mark Directory as-&gt;选择类型</p>
<p>Test：可编译的单元测试目录<br>Resources：资源文件目录<br>Test Resources：单元测试资源文件目录<br>Excluded：排除目录（相当于被废弃掉）<br>Generated Sources：类似src（只有这种可以新建java类和包）</p>
<hr>
<h1 id="多模块Maven项目"><a href="#多模块Maven项目" class="headerlink" title="多模块Maven项目"></a>多模块Maven项目</h1><h2 id="构建多模块Maven项目"><a href="#构建多模块Maven项目" class="headerlink" title="构建多模块Maven项目"></a>构建多模块Maven项目</h2><p>新建一个Maven项目<br>再新建Module，它也会有src、main的目录结构</p>
<h2 id="设置模块间依赖关系"><a href="#设置模块间依赖关系" class="headerlink" title="设置模块间依赖关系"></a>设置模块间依赖关系</h2><p>Project Structure-&gt;Modules-&gt;选中一个模块-&gt;Dependencies中添加，然后勾选上<br>pom.xml中也许添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xxx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>添加依赖后可以直接引用被依赖模块中的代码</p>
<hr>
<h1 id="Maven-Web项目"><a href="#Maven-Web项目" class="headerlink" title="Maven Web项目"></a>Maven Web项目</h1><h2 id="创建Maven-Web项目"><a href="#创建Maven-Web项目" class="headerlink" title="创建Maven Web项目"></a>创建Maven Web项目</h2><p>New Project-&gt;Maven-&gt;Create from archetype<br>可以选择maven-archetype-webapp</p>
<h2 id="配置Tomcat"><a href="#配置Tomcat" class="headerlink" title="配置Tomcat"></a>配置Tomcat</h2><p>工具栏中build(绿色锤子)旁边，Add Configuration<br>新加Tomcat-&gt;Local （需先下载放在本地，配置路径）</p>
<p>Server中可以修改默认浏览器，可以修改端口号</p>
<p>Deployment中添加Artifact<br>xxx:war exploded</p>
<p>即可启动运行<br>默认index.jsp显示Hello World!</p>
<h2 id="打包运行"><a href="#打包运行" class="headerlink" title="打包运行"></a>打包运行</h2><p>右侧Maven工具栏中<br>Lifecycle-&gt;package-&gt;Run Maven Build<br>install-&gt;Run ‘xxx [install]’<br>打包成功后，在target文件夹下</p>
<p>war包可以部署到服务器上</p>
<p>也可以拷贝到本地Tomcat的webapp目录下<br>运行Tomcat的bin目录下的startup，启动tomcat<br>即可浏览器访问<br>结束后shutdown关闭Tomcat</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>课程总结 民事诉讼法</title>
    <url>/2020/02/22/mindmap/</url>
    <content><![CDATA[<blockquote>
<p>MOOC 北京交通大学 杨军 民事诉讼法</p>
</blockquote>
<p>P1<br><img src="/images/2020/civil_procedure_law1.png"></p>
<p>P2<br><img src="/images/2020/civil_procedure_law2.png"></p>
<p>P3<br><img src="/images/2020/civil_procedure_law3.png"></p>
<p>P4<br><img src="/images/2020/civil_procedure_law4.png"></p>
]]></content>
      <categories>
        <category>Memo</category>
      </categories>
      <tags>
        <tag>mindmap</tag>
      </tags>
  </entry>
  <entry>
    <title>课程总结 压力与情绪管理</title>
    <url>/2020/02/22/mindmap-stress/</url>
    <content><![CDATA[<blockquote>
<p>MOOC 四川大学 杨鑫 压力与情绪管理</p>
</blockquote>
<img src="/images/2020/stress.png">]]></content>
      <categories>
        <category>Memo</category>
      </categories>
      <tags>
        <tag>mindmap</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring笔记02 Idea运行示例项目的坑</title>
    <url>/2020/02/24/note-spring-02/</url>
    <content><![CDATA[<p>表建好之后，Idea里面直接打开示例工程跑不起来，mysql的依赖有问题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.ClassNotFoundException: com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure>
<p>对比发现Maven路径不对</p>
<p>这是自己创建的可以运行的Maven项目配置<br><img src="/images/2020/20200224170149695.png" alt="img"></p>
<p>这是导入工程的配置<br><img src="/images/2020/20200224170322871.png" alt="img"></p>
<p>修改路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/local/Cellar/maven/3.6.2/libexec</span><br><span class="line">/Users/coconutnut/.m2/settings.xml</span><br><span class="line">/Users/coconutnut/.m2/repository</span><br></pre></td></tr></table></figure>
<p>解决Driver问题</p>
<hr>
<p>下一个bug<br>Idea中点运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MySQLNonTransientConnectionException: Client does not support authentication protocol requested by server</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://www.cnblogs.com/inconceivable/p/9186822.html">https://www.cnblogs.com/inconceivable/p/9186822.html</a></p>
</blockquote>
<p>在MySQL Workbench中输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">USE mysql;</span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;iamgroot&#x27;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>
<p>Idea中提示变成了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.sql.SQLException: Unknown initial character set index &#x27;255&#x27; received from server. Initial client character set can be forced via the &#x27;characterEncoding&#x27; property.</span><br><span class="line">	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:1055)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://blog.csdn.net/qq1515312832/article/details/85614733">https://blog.csdn.net/qq1515312832/article/details/85614733</a></p>
</blockquote>
<p>在连接数据库的url后加上编码方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Connection conn = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/groot?useUnicode=true&amp;characterEncoding=utf8&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;iamgroot&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>成功</p>
<hr>
<p>总结：</p>
<ol>
<li>修改Preference-&gt;Build, Execution, Deployment-&gt;Build Tools-&gt;Maven中路径</li>
<li>在连接数据库的url后加上编码方式</li>
</ol>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>课程总结 信息素养与实践</title>
    <url>/2020/02/22/mindmap-paper/</url>
    <content><![CDATA[<blockquote>
<p>大三上的公选课</p>
</blockquote>
<img src="/images/2020/paper.png">

]]></content>
      <categories>
        <category>Memo</category>
      </categories>
      <tags>
        <tag>mindmap</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring笔记01 jdbc常用操作</title>
    <url>/2020/02/24/note-spring-01/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/av47952931">https://www.bilibili.com/video/av47952931</a></p>
</blockquote>
<p>之前学数据库的时候mysql踩了好多坑，主要是版本问题<br>不同版本语法有些不兼容<br>记录一下Apply生成的语句备用</p>
<hr>
<p>版本:<br>mysql-8.0.19-macos10.15-x86_64<br>MySQL Workbench 8.0.16</p>
<hr>
<h1 id="MySQL-Workbench操作"><a href="#MySQL-Workbench操作" class="headerlink" title="MySQL Workbench操作"></a>MySQL Workbench操作</h1><h2 id="创建schema"><a href="#创建schema" class="headerlink" title="创建schema"></a>创建schema</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> SCHEMA `groot` ;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="创建table"><a href="#创建table" class="headerlink" title="创建table"></a>创建table</h2><p>这是b站教程给的sql</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> account(</span><br><span class="line">	id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">	name <span class="type">varchar</span>(<span class="number">40</span>),</span><br><span class="line">	money <span class="type">float</span></span><br><span class="line">)<span class="type">character</span> <span class="keyword">set</span> utf8 <span class="keyword">collate</span> utf8_general_ci;</span><br></pre></td></tr></table></figure>

<p>这是Workbench里生成的sql</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `groot`.`account` (</span><br><span class="line">  `id` <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">45</span>) <span class="keyword">NULL</span>,</span><br><span class="line">  `money` <span class="type">FLOAT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`));</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="插入记录"><a href="#插入记录" class="headerlink" title="插入记录"></a>插入记录</h2><p>b站教程给的sql</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> account(name,money) <span class="keyword">values</span>(<span class="string">&#x27;aaa&#x27;</span>,<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> account(name,money) <span class="keyword">values</span>(<span class="string">&#x27;bbb&#x27;</span>,<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> account(name,money) <span class="keyword">values</span>(<span class="string">&#x27;ccc&#x27;</span>,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
<p>Workbench里生成的sql</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `groot`.`account` (`name`, `money`) <span class="keyword">VALUES</span> (<span class="string">&#x27;aaa&#x27;</span>, <span class="string">&#x27;1000&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `groot`.`account` (`name`, `money`) <span class="keyword">VALUES</span> (<span class="string">&#x27;bbb&#x27;</span>, <span class="string">&#x27;1000&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `groot`.`account` (`name`, `money`) <span class="keyword">VALUES</span> (<span class="string">&#x27;ccc&#x27;</span>, <span class="string">&#x27;1000&#x27;</span>);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="查看记录"><a href="#查看记录" class="headerlink" title="查看记录"></a>查看记录</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> groot.account;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="Idea中连接数据库"><a href="#Idea中连接数据库" class="headerlink" title="Idea中连接数据库"></a>Idea中连接数据库</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.注册驱动</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.获取连接</span></span><br><span class="line">Connection conn = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/groot?useUnicode=true&amp;characterEncoding=utf8&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;iamgroot&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.获取操作数据库的预处理对象</span></span><br><span class="line">PreparedStatement pstm = conn.prepareStatement(<span class="string">&quot;select * from account&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.执行SQL，得到结果集</span></span><br><span class="line">ResultSet rs = pstm.executeQuery();</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.遍历结果集</span></span><br><span class="line"><span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">    System.out.println(rs.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//6.释放资源</span></span><br><span class="line">rs.close();</span><br><span class="line">pstm.close();</span><br><span class="line">conn.close();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring笔记03 工厂模式</title>
    <url>/2020/02/24/note-spring-03/</url>
    <content><![CDATA[<p><a href="https://www.bilibili.com/video/av47952931">https://www.bilibili.com/video/av47952931</a><br>p9~14</p>
<hr>
<h1 id="程序的耦合与解耦-以jdbc注册驱动为例"><a href="#程序的耦合与解耦-以jdbc注册驱动为例" class="headerlink" title="程序的耦合与解耦 (以jdbc注册驱动为例)"></a>程序的耦合与解耦 (以jdbc注册驱动为例)</h1><p>jdbc操作中，注册数据库驱动时，有2种方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法1</span></span><br><span class="line">DriverManager.registerDriver(<span class="keyword">new</span> com.mysql.jdbc.Driver());</span><br><span class="line"><span class="comment">// 方法2</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>在pom.xml中添加了依赖的情况下都可以正常运行</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>但是，如果去掉这段依赖</p>
<p>方法1报Error，无法通过编译</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Error:(26, 56) java: 程序包com.mysql.jdbc不存在</span><br></pre></td></tr></table></figure>
<p>而方法2报Exception，可以通过编译（无法运行）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.ClassNotFoundException: com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure>
<p>因为方法1依赖一个具体的驱动类，而方法2用反射，依赖的只是一个字符串<br>但是这个字符串仍是写死在代码里的。应该写到配置文件里去，进一步减少耦合</p>
<p>实际开发中应该做到：</p>
<p><strong>编译期不依赖，运行时才依赖</strong></p>
<p>解耦的思路：</p>
<p><strong>第一步：使用反射来创建对象，而避免使用new关键字</strong></p>
<p><strong>第二步：通过读取配置文件来获取要创建的对象全限定类名</strong></p>
<hr>
<h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><h2 id="原始的分层实现方法"><a href="#原始的分层实现方法" class="headerlink" title="原始的分层实现方法"></a>原始的分层实现方法</h2><img src="/images/2020/202002271544168.png" width=400>

<ul>
<li>Client : 模拟一个表现层，用于调用业务层</li>
<li>IAccountService : 账户业务层的接口</li>
<li>AccountServiceImpl : 账户的业务层实现类</li>
<li>IAccountDao : 账户的持久层接口</li>
<li>AccountDaoImpl : 账户的持久层实现类</li>
</ul>
<p>其中，有两个依赖关系</p>
<ol>
<li>表现层调用业务层时<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IAccountService as = <span class="keyword">new</span> AccountServiceImpl();</span><br><span class="line">        as.saveAccount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>业务层调用持久层时<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> IAccountDao accountDao = <span class="keyword">new</span> AccountDaoImpl();</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">saveAccount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        accountDao.saveAccount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
都用到了new，耦合度高<br>如果此时把AccountDaoImpl的代码删了，Service就报错了。和前面jdbc中编译期的错误一样</li>
</ol>
<p>如何解除这种依赖？</p>
<h2 id="Bean-amp-BeanFactory"><a href="#Bean-amp-BeanFactory" class="headerlink" title="Bean &amp; BeanFactory"></a>Bean &amp; BeanFactory</h2><p><strong>Bean</strong> —— 可重用组件<br>eg：一个Dao可能被多个Service使用，一个Service可能被多个Servlet使用，它们是可重用的</p>
<p><strong>JavaBean</strong> —— 用java语言编写的可重用组件</p>
<p><strong>BeanFactory</strong> —— 创建Bean对象的工厂<br>eg：创建Dao和Service对象</p>
<p>要实现这个工厂，类似前面jdbc，</p>
<p>1.需要一个<strong>配置文件</strong>来配置service和dao<br>内容：唯一标识=全限定类名（key=value)<br>配置文件可以是xml也可以是properties</p>
<p>2.读取配置文件中配置的内容，通过==反射==创建对象</p>
<h2 id="工厂模式解耦"><a href="#工厂模式解耦" class="headerlink" title="工厂模式解耦"></a>工厂模式解耦</h2><p>在resources中新建beans.properties配置文件（此处用properties因为简单，Spring中用的是xml）</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">accountService</span> = <span class="string">com.itheima.service.impl.AccountServiceImpl</span></span><br><span class="line"><span class="attr">accountDao</span> = <span class="string">com.itheima.dao.impl.AccountDaoImpl</span></span><br></pre></td></tr></table></figure>
<p>创建BeanFactory类读取properties文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个Properties对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Properties props;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用静态代码块为Properties对象赋值</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 实例化对象</span></span><br><span class="line">            props = <span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">// 获取properties文件的流对象</span></span><br><span class="line">            InputStream in = BeanFactory.class.getClassLoader().getResourceAsStream(<span class="string">&quot;bean.properties&quot;</span>);</span><br><span class="line">            props.load(in);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            <span class="comment">// 抛一个Error，没有获取配置信息后面想都不要想</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(<span class="string">&quot;初始化properties失败！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 根据Bean的名称获取bean对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String beanName)</span></span>&#123;</span><br><span class="line">        Object bean = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String beanPath = props.getProperty(beanName);</span><br><span class="line">            bean = Class.forName(beanPath).newInstance();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ol>
<li>读配置文件时不要用FileInputStream，Web工程不好找路径。用类加载器。</li>
<li>getBean()返回的是Object类型</li>
</ol>
<p>把两处使用new创建对象的改为用反射创建</p>
<p>Client中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// IAccountService as = new AccountServiceImpl();</span></span><br><span class="line">IAccountService as = (IAccountService) BeanFactory.getBean(<span class="string">&quot;accountService&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>AccountServiceImpl中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// private IAccountDao accountDao = new AccountDaoImpl();</span></span><br><span class="line"><span class="keyword">private</span> IAccountDao accountDao = (IAccountDao) BeanFactory.getBean(<span class="string">&quot;accountDao&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>Object类强转为对应的类</p>
<p>改进后程序的UML类图长这样</p>
<img src="/images/2020/20200227162837205.png" width=600>

<p>此时如果把AccountServiceImpl删了，程序可以运行，抛ClassNotFoundException</p>
<h2 id="工厂模式的问题与改进"><a href="#工厂模式的问题与改进" class="headerlink" title="工厂模式的问题与改进"></a>工厂模式的问题与改进</h2><p>如果要在Client中多次调用Service？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++) &#123;</span><br><span class="line">	IAccountService as = (IAccountService) BeanFactory.getBean(<span class="string">&quot;accountService&quot;</span>);</span><br><span class="line">	System.out.println(as);</span><br><span class="line">	as.saveAccount();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>并在AccountServiceImpl中加一个成员变量i</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IAccountDao accountDao = (IAccountDao) BeanFactory.getBean(<span class="string">&quot;accountDao&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">saveAccount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        accountDao.saveAccount();</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行</p>
<blockquote>
<p>com.itheima.service.impl.AccountServiceImpl@610455d6<br>保存了账户<br>1<br>com.itheima.service.impl.AccountServiceImpl@511d50c0<br>保存了账户<br>1<br>com.itheima.service.impl.AccountServiceImpl@60e53b93<br>保存了账户<br>1<br>com.itheima.service.impl.AccountServiceImpl@5e2de80c<br>保存了账户<br>1<br>com.itheima.service.impl.AccountServiceImpl@1d44bcfa<br>保存了账户<br>1</p>
<p>Process finished with exit code 0</p>
</blockquote>
<p>可以看到，AccountServiceImpl创建了5次，每次都是一个新的对象<br>此时的对象是多例，效率没有单例高</p>
<p>可以在BeanFactory中把创建出的对象都存起来</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个Map,用于存放我们要创建的对象。我们把它称之为容器</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,Object&gt; beans;</span><br></pre></td></tr></table></figure>
<p>在静态代码块中，得到配置文件的输入流后，实例化这个容器。取出配置文件中所有的key-value，创建并保存它们</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实例化容器</span></span><br><span class="line">beans = <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</span><br><span class="line"><span class="comment">// 取出配置文件中所有的Key</span></span><br><span class="line">Enumeration keys = props.keys();</span><br><span class="line"><span class="comment">// 遍历枚举</span></span><br><span class="line"><span class="keyword">while</span> (keys.hasMoreElements())&#123;</span><br><span class="line">    <span class="comment">// 取出每个Key</span></span><br><span class="line">    String key = keys.nextElement().toString();</span><br><span class="line">    <span class="comment">// 根据key获取value</span></span><br><span class="line">    String beanPath = props.getProperty(key);</span><br><span class="line">    <span class="comment">// 反射创建对象</span></span><br><span class="line">    Object value = Class.forName(beanPath).newInstance();</span><br><span class="line">    <span class="comment">// 把key和value存入容器中</span></span><br><span class="line">    beans.put(key,value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>获取Beans，不用newInstance()，直接从容器中取即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String beanName)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> beans.get(beanName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样修改后，调用5次Service打印的结果是</p>
<blockquote>
<p>com.itheima.service.impl.AccountServiceImpl@610455d6<br>保存了账户<br>1<br>com.itheima.service.impl.AccountServiceImpl@610455d6<br>保存了账户<br>2<br>com.itheima.service.impl.AccountServiceImpl@610455d6<br>保存了账户<br>3<br>com.itheima.service.impl.AccountServiceImpl@610455d6<br>保存了账户<br>4<br>com.itheima.service.impl.AccountServiceImpl@610455d6<br>保存了账户<br>5</p>
<p>Process finished with exit code 0</p>
</blockquote>
<p>此时的AccountServiceImpl就是单例的了</p>
<p>但有一个问题是，这个i在多线程时是不安全的<br>应该把它移到方法里面，就没有这个问题了（实际使用一般也是这样）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    private int i = 1;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">saveAccount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        accountDao.saveAccount();</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="工厂模式使用套路总结"><a href="#工厂模式使用套路总结" class="headerlink" title="工厂模式使用套路总结"></a>工厂模式使用套路总结</h2><p>1.创建BeanFactory</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// BeanFactory.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个Properties对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Properties props;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个Map,用于存放我们要创建的对象。称之为容器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,Object&gt; beans;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用静态代码块为Properties对象赋值</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1.实例化对象</span></span><br><span class="line">            props = <span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">// 2.获取properties文件的流对象</span></span><br><span class="line">            InputStream in = BeanFactory.class.getClassLoader().getResourceAsStream(<span class="string">&quot;bean.properties&quot;</span>);</span><br><span class="line">            props.load(in);</span><br><span class="line">            <span class="comment">// 3.实例化容器</span></span><br><span class="line">            beans = <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</span><br><span class="line">            <span class="comment">// 4.取出配置文件中所有的Key</span></span><br><span class="line">            Enumeration keys = props.keys();</span><br><span class="line">            <span class="comment">// 5.遍历枚举</span></span><br><span class="line">            <span class="keyword">while</span> (keys.hasMoreElements())&#123;</span><br><span class="line">                <span class="comment">// 取出每个Key</span></span><br><span class="line">                String key = keys.nextElement().toString();</span><br><span class="line">                <span class="comment">// 根据key获取value</span></span><br><span class="line">                String beanPath = props.getProperty(key);</span><br><span class="line">                <span class="comment">// 反射创建对象</span></span><br><span class="line">                Object value = Class.forName(beanPath).newInstance();</span><br><span class="line">                <span class="comment">// 把key和value存入容器中</span></span><br><span class="line">                beans.put(key,value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(<span class="string">&quot;初始化properties失败！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据bean的名称获取对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String beanName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beans.get(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.配置文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">//</span> <span class="string">beans.properties</span></span><br><span class="line"></span><br><span class="line"><span class="attr">accountService</span>=<span class="string">com.itheima.service.impl.AccountServiceImpl</span></span><br><span class="line"><span class="attr">accountDao</span>=<span class="string">com.itheima.dao.impl.AccountDaoImpl</span></span><br></pre></td></tr></table></figure>

<p>3.获取Bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Client.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    	IAccountService as = (IAccountService) BeanFactory.getBean(<span class="string">&quot;accountService&quot;</span>);</span><br><span class="line">    	as.saveAccount();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring笔记04 应用分层</title>
    <url>/2020/02/24/note-spring-04/</url>
    <content><![CDATA[<h1 id="三层架构-3-Tier-Architecture"><a href="#三层架构-3-Tier-Architecture" class="headerlink" title="三层架构 (3-Tier Architecture)"></a>三层架构 (3-Tier Architecture)</h1><img src="/images/2020/20200224200654315.png" width=400>

<ul>
<li><strong>表示层 (PL, Presentation Layer 或 UI, User Interface Layer)</strong> —— 主要是与用户交互的界面，用于接收用户输入的数据和显示处理后的数据</li>
<li><strong>业务逻辑层 (BLL, Business Logic Layer)</strong> —— PL与DAL之间的桥梁，实现业务逻辑，主要包括验证、计算、规则等</li>
<li><strong>数据访问层 (DAL, Data Access Layer)</strong> —— 与数据库交互，实现对数据的CURD，将存储在数据库中的数据提交给业务层，同时将业务层处理的数据保存到数据库</li>
</ul>
<h1 id="MVC模式-Model-View-Controller"><a href="#MVC模式-Model-View-Controller" class="headerlink" title="MVC模式 (Model-View-Controller)"></a>MVC模式 (Model-View-Controller)</h1><img src="/images/2020/20200224201239437.png" width=300>

<p>描述1:</p>
<ul>
<li><strong>模型 (Model)</strong> —— 程序需要操作的数据或信息</li>
<li><strong>视图 (View)</strong> —— 提供给用户的操作界面，是程序的外壳</li>
<li><strong>控制器 (Controller)</strong> —— 负责根据用户从”视图层”输入的指令，选取”数据层”中的数据，然后对其进行相应的操作，产生最终结果</li>
</ul>
<p>描述2:</p>
<ul>
<li><strong>模型 (Model)</strong> —— 表示应用程序和任何应由其执行的业务逻辑或操作的状态</li>
<li><strong>视图 (View)</strong> —— 负责通过用户界面展示内容</li>
<li><strong>控制器 (Controller)</strong> —— 是处理用户交互、使用模型并最终选择要呈现的视图的组件</li>
</ul>
<h1 id="三层架构与MVC的区别与联系"><a href="#三层架构与MVC的区别与联系" class="headerlink" title="三层架构与MVC的区别与联系"></a>三层架构与MVC的区别与联系</h1><h4 id="1-关注点"><a href="#1-关注点" class="headerlink" title="1. 关注点"></a>1. 关注点</h4><ul>
<li>三层架构是为了解决整个应用程序中各个业务操作过程中的==不同阶段的代码封装==问题，使程序员更加专注的处理某阶段的业务逻辑</li>
<li>MVC架构模式将应用程序分为三个主要组成部分，有助于实现关注点分离。分离关注点是开发时的指导原则，此原则主张应根据==软件执行的工作类型==将软件分离<h4 id="2-切分方向"><a href="#2-切分方向" class="headerlink" title="2. 切分方向"></a>2. 切分方向</h4></li>
<li>三层架构是一种软件抽象的层次结构，是对复杂系统的一种<strong>纵向切分</strong></li>
<li>MVC更像是<strong>横向切分</strong>，每块都可以独立测试<h4 id="3-依赖关系"><a href="#3-依赖关系" class="headerlink" title="3. 依赖关系"></a>3. 依赖关系</h4></li>
<li>三层架构中，层次之间一般是<strong>向下依赖</strong>的。下层在未确定接口（契约）规范前，上层代码无法开发，下层代码接口的变化将使上层一起变化</li>
<li>MVC中，三者并<strong>不存在明显的层次结构</strong>，没有明显的向下依赖的关系。相反的是View和Model往往是比较独立的，而Controller则是两者的桥梁</li>
</ul>
<p><strong>都是为了解耦</strong></p>
<hr>
<h1 id="MVC、MVP、MVVM"><a href="#MVC、MVP、MVVM" class="headerlink" title="MVC、MVP、MVVM"></a>MVC、MVP、MVVM</h1><blockquote>
<p><a href="http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html">MVC，MVP 和 MVVM 的图示</a></p>
</blockquote>
<hr>
<h1 id="阿里规范"><a href="#阿里规范" class="headerlink" title="阿里规范"></a>阿里规范</h1><blockquote>
<p>《Java开发手册》v1.5.0 华山版</p>
</blockquote>
<p>图中默认上层依赖于下层，箭头关系表示可直接依赖，如:开放接口层可以依赖于 Web 层，也可以直接依赖于 Service 层，依此类推:<br><img src="/images/2020/20200224193901683.png" width=400></p>
<ul>
<li><strong>开放接口层</strong> : 可直接封装 Service 方法暴露成 RPC 接口;通过 Web 封装成 http 接口;进行网关安全控制、流量控制等。</li>
<li><strong>终端显示层</strong> : 各个端的模板渲染并执行显示的层。当前主要是 velocity 渲染，JS 渲染，JSP 渲染，移动端展示等。</li>
<li><strong>Web层</strong> : 主要是对访问控制进行转发，各类基本参数校验，或者不复用的业务简单处理等。</li>
<li><strong>Service层</strong> : 相对具体的业务逻辑服务层。</li>
<li><strong>Manager层</strong> : 通用业务处理层，它有如下特征:</li>
</ul>
<ol>
<li>对第三方平台封装的层，预处理返回结果及转化异常信息。</li>
<li>对 Service 层通用能力的下沉，如缓存方案、中间件通用处理。</li>
<li>与 DAO 层交互，对多个 DAO 的组合复用。</li>
</ol>
<ul>
<li><strong>DAO层</strong> : 数据访问层，与底层 MySQL、Oracle、Hbase 等进行数据交互。</li>
<li><strong>外部接口或第三方平台</strong> : 包括其它部门 RPC 开放接口，基础平台，其它公司的 HTTP 接口。</li>
</ul>
<blockquote>
<p>ref:<br><a href="http://www.ruanyifeng.com/blog/2007/11/mvc.html">谈谈MVC模式</a><br><a href="https://www.jianshu.com/p/3b231e5094c5">ASP.NET MVC与三层架构</a><br><a href="https://docs.microsoft.com/zh-cn/aspnet/core/mvc/overview?view=aspnetcore-3.1">ASP.NET Core MVC 概述</a><br><a href="https://docs.microsoft.com/zh-cn/dotnet/architecture/modern-web-apps-azure/architectural-principles#separation-of-concerns">体系结构原则</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring笔记05 IoC</title>
    <url>/2020/02/28/note-spring-05/</url>
    <content><![CDATA[<p><a href="https://www.bilibili.com/video/av47952931">https://www.bilibili.com/video/av47952931</a><br>p15～34</p>
<hr>
<h1 id="IoC的概念和作用"><a href="#IoC的概念和作用" class="headerlink" title="IoC的概念和作用"></a>IoC的概念和作用</h1><p>上次工厂模式中创建对象有2种方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式1</span></span><br><span class="line">IAccountService as = <span class="keyword">new</span> AccountServiceImpl();</span><br><span class="line"><span class="comment">// 方式2</span></span><br><span class="line">IAccountService as = (IAccountService) BeanFactory.getBean(<span class="string">&quot;accountService&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>方式1是主动的；方式2是被动的（根据配置创建），控制权转移给了工厂</p>
<p><strong>IoC (Inversion of Control 控制反转)把创建对象的权利交给框架</strong><br><strong>其作用是降低程序的耦合</strong><br>但只能是降低，而不能完全消除。如果两个类之间任何关系都没有，那有一个类一定是多余的。<br>自己写时用工厂模式实现，Spring中的Ioc如何实现？</p>
<hr>
<h1 id="Spring中的IoC"><a href="#Spring中的IoC" class="headerlink" title="Spring中的IoC"></a>Spring中的IoC</h1><p><strong>控制反转 Inversion of Control, IoC</strong></p>
<p>解决的问题：降低程序耦合（减少依赖关系）<br>解决的方法：使用配置的方式</p>
<h2 id="1-导入依赖"><a href="#1-导入依赖" class="headerlink" title="1.导入依赖"></a>1.导入依赖</h2><p>导入Spring依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在查看引入的依赖<br><img src="/images/2020/20200228105855284.png" width=400>  <img src="/images/2020/20200228110642475.png" width=500><br>包含了常用的核心组件<br><img src="/images/2020/20200228110023357.png" width=400></p>
<p>Core Container简单的说就是一个Map，封装了要用的对象</p>
<h2 id="2-创建配置文件-amp-导入约束-amp-配置bean"><a href="#2-创建配置文件-amp-导入约束-amp-配置bean" class="headerlink" title="2.创建配置文件&amp;导入约束&amp;配置bean"></a>2.创建配置文件&amp;导入约束&amp;配置bean</h2><p>然后创建bean.xml（没有固定要求，习惯这样命名，因为是管beans的）<br>在spring-framework-5.0.2.RELEASE-docs/spring-framework-reference文件夹中找到index.html<br><img src="/images/2020/20200228111723489.png" width=800><br>点core，搜索xmlns（导入xml schema约束的关键字）<br><img src="/images/2020/20200228111921799.png" width=800><br>把它复制粘贴到配置文件中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>配置bean，把对象的创建交给Spring来管理<br>同工厂模式，需要唯一标志和对象的全限定类名（包名+类名）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.AccountServiceImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.AccountDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>剩下的解析配置文件的事就由Spring做了</p>
<h2 id="3-取出容器-amp-获取对象"><a href="#3-取出容器-amp-获取对象" class="headerlink" title="3.取出容器&amp;获取对象"></a>3.取出容器&amp;获取对象</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Client.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取核心容器对象</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.根据id获取Bean对象</span></span><br><span class="line">        <span class="comment">// 方法一：拿到一个Object类，自己强转</span></span><br><span class="line">        IAccountService as  = (IAccountService)ac.getBean(<span class="string">&quot;accountService&quot;</span>);</span><br><span class="line">        <span class="comment">// 方法二：给一个类型，直接得到该类型对象</span></span><br><span class="line">        IAccountDao adao = ac.getBean(<span class="string">&quot;accountDao&quot;</span>,IAccountDao.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="tip-ApplicationContext的继承关系"><a href="#tip-ApplicationContext的继承关系" class="headerlink" title="tip: ApplicationContext的继承关系"></a>tip: ApplicationContext的继承关系</h2><p>Idea中，在类上右键-&gt;Diagrams-&gt;Show Diagram<br>在接口上右键-&gt;Show Implementations<br><img src="/images/2020/20200228114140888.png"><br>可以看到，ApplicationContext继承自BeanFactory，ClassPathXmlApplicationContext是它的实现类</p>
<p>ApplicationContext的三个常用实现类：<br>     *      ClassPathXmlApplicationContext：它可以加载类路径下的配置文件（配置文件必须在类路径下，不在的加载不了）（更常用）<br>     *      FileSystemXmlApplicationContext：它可以加载磁盘任意路径下的配置文件（必须有访问权限）<br>     *      AnnotationConfigApplicationContext：它是用于读取注解创建容器的（后面讲）</p>
<h2 id="tip-ApplicationContext和BeanFactory的区别"><a href="#tip-ApplicationContext和BeanFactory的区别" class="headerlink" title="tip: ApplicationContext和BeanFactory的区别"></a>tip: ApplicationContext和BeanFactory的区别</h2><p><strong>ApplicationContext</strong></p>
<ul>
<li>构建核心容器时，创建对象采取的策略是采用立即加载的方式。即，一读取完配置文件马上就创建配置文件中配置的对象</li>
<li>单例对象适用 </li>
</ul>
<p><strong>BeanFactory</strong></p>
<ul>
<li>构建核心容器时，创建对象采取的策略是采用延迟加载的方式。即，什么时候根据id获取对象了，什么时候才真正的创建对象</li>
<li>多例对象使用</li>
</ul>
<hr>
<h1 id="bean的细节"><a href="#bean的细节" class="headerlink" title="bean的细节"></a>bean的细节</h1><h2 id="创建bean对象的三种方式"><a href="#创建bean对象的三种方式" class="headerlink" title="创建bean对象的三种方式"></a>创建bean对象的三种方式</h2><h3 id="方式一：使用默认构造函数创建"><a href="#方式一：使用默认构造函数创建" class="headerlink" title="方式一：使用默认构造函数创建"></a>方式一：使用默认构造函数创建</h3><p>在spring的配置文件中使用bean标签，配以id和class属性之后，且没有其他属性和标签时。采用的就是默认构造函数创建bean对象，此时如果类中没有默认构造函数，则对象无法创建。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.AccountServiceImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="方式二：使用普通工厂中的方法创建对象"><a href="#方式二：使用普通工厂中的方法创建对象" class="headerlink" title="方式二：使用普通工厂中的方法创建对象"></a>方式二：使用普通工厂中的方法创建对象</h3><p>实际开发中，可能要用到别人写好的jar包中的类。（不知道有没有默认构造函数，也无法通过修改源码来提供默认构造函数）。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模拟一个工厂类（该类可能是存在于jar包中的，我们无法通过修改源码的方式来提供默认构造函数）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IAccountService <span class="title">getAccountService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AccountServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有这么一个InstanceFactory类，需要拿到AccountServiceImpl<br>如果像方法一那样创建对象，即</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;instanceFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.factory.InstanceFactory&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>得到的并不是AccountServiceImpl对象，而是InstanceFactory对象</p>
<p>此时应该修改创建对象的方式<br><strong>使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并存入spring容器）</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;instanceFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.factory.InstanceFactory&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;instanceFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getAccountService&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>先创建工厂，再通过工厂的方法创建所需对象</p>
<h3 id="方式三：使用工厂中的静态方法创建对象"><a href="#方式三：使用工厂中的静态方法创建对象" class="headerlink" title="方式三：使用工厂中的静态方法创建对象"></a>方式三：使用工厂中的静态方法创建对象</h3><p>模拟一个工厂类，它有一个返回对象的静态方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模拟一个工厂类（该类可能是存在于jar包中的，我们无法通过修改源码的方式来提供默认构造函数）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IAccountService <span class="title">getAccountService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AccountServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器)</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.factory.StaticFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getAccountService&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里的factory-method是一个静态方法</p>
<p>Q：这两个工厂中不都new对象了吗？<br>A：把这两个对象看作jar包中的类（此处只是模拟它），jar包中不是.java文件而是.class，都是无法修改的。实际开发中，有些对象就得用方法二或方法三来创建</p>
<h2 id="指定bean对象的作用范围：bean标签的scope属性"><a href="#指定bean对象的作用范围：bean标签的scope属性" class="headerlink" title="指定bean对象的作用范围：bean标签的scope属性"></a>指定bean对象的作用范围：bean标签的scope属性</h2><p>取值：<br><strong>singleton</strong>：单例的（默认值）（常用）<br><strong>prototype</strong>：多例的（常用）<br><strong>request</strong>：作用于web应用的请求范围<br><strong>session</strong>：作用于web应用的会话范围<br><strong>global-session</strong>：作用于集群环境的会话范围（全局会话范围），当不是集群环境时，它就是session</p>
<p>例子：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.AccountServiceImpl&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>global-session的含义<br><img src="/images/2020/20200228131045586.png" width=800></p>
<h2 id="bean对象的生命周期"><a href="#bean对象的生命周期" class="headerlink" title="bean对象的生命周期"></a>bean对象的生命周期</h2><p><strong>单例对象</strong></p>
<ul>
<li>出生：当容器创建时对象出生</li>
<li>活着：只要容器还在，对象一直活着</li>
<li>死亡：容器销毁，对象消亡</li>
</ul>
<p>总结：单例对象的生命周期和容器相同</p>
<p><strong>多例对象</strong></p>
<ul>
<li>出生：当我们使用对象时spring框架为我们创建</li>
<li>活着：对象只要是在使用过程中就一直活着。</li>
<li>死亡：当对象长时间不用，且没有别的对象引用时，由Java的垃圾回收器回收</li>
</ul>
<p>可以通过bean标签指定在特定生命周期执行的方法</p>
<p>例子：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">// beans.xml</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.AccountServiceImpl&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Client.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取核心容器对象</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean.xml&quot;</span>);  <span class="comment">// 执行完这句，单例对象就创建了</span></span><br><span class="line">        <span class="comment">// 2.根据id获取Bean对象</span></span><br><span class="line">        IAccountService as  = (IAccountService)ac.getBean(<span class="string">&quot;accountService&quot;</span>);  <span class="comment">// 执行完这句，多例对象才创建</span></span><br><span class="line">        as.saveAccount();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AccountServiceImpl.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccountServiceImpl</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;对象创建了...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">saveAccount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service中的saveAccount方法执行了...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;对象初始化了...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">destroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;对象销毁了...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>执行输出</p>
<blockquote>
<p>对象创建了…<br>对象初始化了…<br>service中的saveAccount方法执行了…</p>
</blockquote>
<p>Q：为什么没有执行销毁方法？<br>A：main()结束之后，当前进程占用的内存全部释放（包括容器），此时并没有调用销毁方法就已经把内存释放了。这里要想调用销毁方法，可以手动关闭容器</p>
<p>在main()中手动关闭容器<br><img src="/images/2020/20200228132514347.png" width=600><br>为什么没有呢？<br>这里ApplicationContext是个接口，调不到子类的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.获取核心容器对象</span></span><br><span class="line"><span class="comment">// ApplicationContext ac = new ClassPathXmlApplicationContext(&quot;bean.xml&quot;);</span></span><br><span class="line">ClassPathXmlApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line"><span class="comment">// 2.根据id获取Bean对象</span></span><br><span class="line">IAccountService as  = (IAccountService)ac.getBean(<span class="string">&quot;accountService&quot;</span>);</span><br><span class="line">as.saveAccount();</span><br><span class="line"><span class="comment">// 3.手动关闭容器</span></span><br><span class="line">ac.close();</span><br></pre></td></tr></table></figure>
<p>这样就可以了</p>
<blockquote>
<p>对象创建了…<br>对象初始化了…<br>service中的saveAccount方法执行了…<br>对象销毁了…</p>
</blockquote>
<p>但是，此时如果把对象改为多例的，其它都不变，不会执行销毁方法</p>
<hr>
<h1 id="Spring中的依赖注入-DI"><a href="#Spring中的依赖注入-DI" class="headerlink" title="Spring中的依赖注入(DI)"></a>Spring中的依赖注入(DI)</h1><p><strong>依赖注入 Dependency Injection, DI</strong></p>
<p><strong>能注入的三类数据</strong></p>
<ol>
<li>基本类型和String</li>
<li>其他bean类型（在配置文件中或者注解配置过的bean）</li>
<li>复杂类型/集合类型</li>
</ol>
<p><strong>注入的三种方式</strong></p>
<ol>
<li>使用构造函数提供</li>
<li>使用set方法提供</li>
<li>使用注解提供</li>
</ol>
<h2 id="构造函数注入"><a href="#构造函数注入" class="headerlink" title="构造函数注入"></a>构造函数注入</h2><p><strong>使用的标签</strong>：constructor-arg<br><strong>标签出现的位置</strong>：bean标签的内部<br><strong>标签中的属性（指定参数）</strong>：</p>
<ul>
<li>type：指定数据类型</li>
<li>index：指定构造函数中的索引位置</li>
<li>name：指定名称（常用）</li>
</ul>
<p><strong>标签中的属性（提供赋值）</strong>：</p>
<ul>
<li>value：用于提供基本类型和String类型的数据</li>
<li>ref：用于指定其他的bean类型数据（在spring的Ioc核心容器中出现过的bean对象）</li>
</ul>
<p><strong>优势</strong>：<br>在获取bean对象时，注入数据是必须的操作，否则对象无法创建成功（必须某些数据时，不会被忽略）<br><strong>弊端</strong>：<br>改变了bean对象的实例化方式，创建对象时，即使以后用不到这些数据，也必须提供</p>
<p>例：</p>
<p>AccountServiceImpl类有3个变量，没有无参构造函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果是经常变化的数据，并不适用于注入的方式</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccountServiceImpl</span><span class="params">(String name,Integer age,Date birthday)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>bean.xml对应的bean配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.AccountServiceImpl&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;now&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置一个日期对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;now&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.util.Date&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>配置中的value都是字符串，对于String、Integer类型，Spring可以自动转换<br>但Date无法直接转换，需另外配置</p>
<h2 id="set方法注入"><a href="#set方法注入" class="headerlink" title="set方法注入"></a>set方法注入</h2><p>比构造函数常用</p>
<p><strong>使用的标签</strong>：property<br><strong>出现的位置</strong>：bean标签的内部<br><strong>标签的属性</strong>：</p>
<ul>
<li>name：用于指定注入时所调用的set方法名称（不管变量名）</li>
<li>value：用于提供基本类型和String类型的数据</li>
<li>ref：用于指定其他的bean类型数据</li>
</ul>
<p><strong>优势</strong>：<br>创建对象时没有明确的限制，可以直接使用默认构造函数<br><strong>弊端</strong>：<br>如果有某个成员必须有值，但没有注入</p>
<p>例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl2</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;<span class="keyword">this</span>.name = name;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;<span class="keyword">this</span>.age = age;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;<span class="keyword">this</span>.birthday = birthday;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.AccountServiceImpl2&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;TEST&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;21&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;now&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="复杂类型注入"><a href="#复杂类型注入" class="headerlink" title="复杂类型注入"></a>复杂类型注入</h2><p>用于给List结构集合注入的标签：<br>            list array set</p>
<p>用于个Map结构集合注入的标签:<br>            map  props</p>
<p>! 结构相同，标签可以互换</p>
<p>例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl3</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// list结构</span></span><br><span class="line">    <span class="keyword">private</span> String[] myStrs;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; myList;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; mySet;</span><br><span class="line">    <span class="comment">// map结构</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; myMap;</span><br><span class="line">    <span class="keyword">private</span> Properties myProps;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyStrs</span><span class="params">(String[] myStrs)</span> </span>&#123; <span class="keyword">this</span>.myStrs = myStrs; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyList</span><span class="params">(List&lt;String&gt; myList)</span> </span>&#123; <span class="keyword">this</span>.myList = myList; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMySet</span><span class="params">(Set&lt;String&gt; mySet)</span> </span>&#123; <span class="keyword">this</span>.mySet = mySet; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyMap</span><span class="params">(Map&lt;String, String&gt; myMap)</span> </span>&#123; <span class="keyword">this</span>.myMap = myMap; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyProps</span><span class="params">(Properties myProps)</span> </span>&#123; <span class="keyword">this</span>.myProps = myProps; &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.AccountServiceImpl3&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--用array、list、set都行--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;myStrs&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>CCC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--用map、prop都行--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;myMap&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;testA&quot;</span> <span class="attr">value</span>=<span class="string">&quot;aaa&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;testB&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">value</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	        <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="基于注解的IoC配置"><a href="#基于注解的IoC配置" class="headerlink" title="基于注解的IoC配置"></a>基于注解的IoC配置</h1><p>注解配置和xml配置要实现的功能都是一样的：降低程序耦合</p>
<p>曾经XML的配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.AccountServiceImpl&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">scope</span>=<span class="string">&quot;&quot;</span>  <span class="attr">init-method</span>=<span class="string">&quot;&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;&quot;</span> | <span class="attr">ref</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用注解时，不用上面的<bean></bean>，但需要告诉Spring开启注解扫描</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--告知spring在创建容器时要扫描的包，配置所需要的标签不是在beans的约束中，而是一个名称为</span></span><br><span class="line"><span class="comment">    context名称空间和约束中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itheima&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>其中context名称空间和前面一样，在文档中搜索找</p>
<h2 id="用于创建对象的注解"><a href="#用于创建对象的注解" class="headerlink" title="用于创建对象的注解"></a>用于创建对象的注解</h2><p><strong>@Component</strong><br>作用：<br>用于把当前类对象存入spring容器中</p>
<p>属性：<br>value：用于指定bean的id（不写时，默认值是当前类名，且首字母小写）</p>
<p>例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(value = &quot;accountService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line">	<span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>细节：<br>当只给一个value属性赋值时，value可以不写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;accountService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line">	<span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>@Controller</strong>：一般用在表现层<br><strong>@Service</strong>：一般用在业务层<br><strong>@Repository</strong>：一般用在持久层</p>
<p>以上三个注解的作用和属性与@Component一模一样<br>是Spring框架提供的明确的三层使用的注解，使三层对象更加清晰</p>
<h2 id="用于注入数据的注解"><a href="#用于注入数据的注解" class="headerlink" title="用于注入数据的注解"></a>用于注入数据的注解</h2><p><strong>@Autowired</strong><br>作用：<br>自动按照类型注入。只要容器中有唯一的一个bean对象类型和要注入的变量类型匹配，就可以注入成功。如果ioc容器中没有任何bean的类型和要注入的变量类型匹配，则报错<br>（当有多个bean类型匹配时，用变量名和bean的id匹配，如果恰好有一个匹配，也可以成功，否则报错）</p>
<p>出现位置：<br>可以是变量上，也可以是方法上</p>
<p>例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> IAccountDao accountDao = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>

<p>细节：<br>在使用注解注入时，set方法就不是必须的了</p>
<p><strong>@Qualifier</strong><br> 作用：<br> 在按照类中注入的基础之上再按照名称注入。在给类成员注入时不能单独使用，必须和@Autowired一起。但是在给方法参数注入时可以单独使用</p>
<p>属性：<br>value：用于指定注入bean的id</p>
<p>例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier(&quot;accountDao1&quot;)</span></span><br><span class="line"><span class="keyword">private</span> IAccountDao accountDao = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>

<p><strong>@Resource</strong><br> 作用：<br> 直接按照bean的id注入，可以独立使用</p>
<p>属性：<br>name：用于指定bean的id<br>（注意：这里是name，不是value）</p>
<p>例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource(name = &quot;accountDao1&quot;)</span></span><br><span class="line"><span class="keyword">private</span> IAccountDao accountDao = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>

<p>以上三个注解都只能注入其他bean类型的数据，而基本类型和String类型无法注入<br>另外，集合类型的注入只能通过XML来实现</p>
<p><strong>@Value</strong><br>作用：<br>用于注入基本类型和String类型的数据</p>
<p>属性：<br>value：用于指定数据的值<br>可以使用Spring中SpEL（即Spring的el表达式）写法：${表达式}</p>
<h2 id="用于改变作用范围的注解"><a href="#用于改变作用范围的注解" class="headerlink" title="用于改变作用范围的注解"></a>用于改变作用范围的注解</h2><p><strong>@Scope</strong><br>作用：<br>用于指定bean的作用范围</p>
<p>属性：<br>value：指定范围的取值（常用：singleton prototype）</p>
<p>例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;accountService&quot;)</span></span><br><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line">	<span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="生命周期相关的注解"><a href="#生命周期相关的注解" class="headerlink" title="生命周期相关的注解"></a>生命周期相关的注解</h2><p><strong>@PreDestroy</strong><br>作用：用于指定销毁方法</p>
<p><strong>@PostConstruct</strong><br>作用：用于指定初始化方法</p>
<p>和bean标签中使用init-method和destroy-methode一样</p>
<p>例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;accountService&quot;)</span></span><br><span class="line"><span class="meta">@Scope(&quot;singleton&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name = &quot;accountDao1&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> IAccountDao accountDao = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化方法执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">destroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;销毁方法执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">saveAccount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        accountDao.saveAccount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同样，如果类是多例的，可能不会看到销毁方法执行的输出，因为它的销毁是JVM管的</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>买卖股票的最佳时机问题</title>
    <url>/2020/02/29/exercise/</url>
    <content><![CDATA[<p>思路：动态规划</p>
<p>dp[ i ][ j ][ k ]<br>i - 到第 i 天<br>j - 最多交易 j 次<br>k - 0:当前持股 / 1:当前不持股</p>
<p>状态转移方程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 第i天，最多交易j次，当前不持股</span><br><span class="line">dp[i][j][0] = MAX&#123;</span><br><span class="line">	dp[i-1][j][0],                 // 本次不持-上次就不持</span><br><span class="line">	dp[i-1][j-1][1] + 差价          // 本次不持-本次卖</span><br><span class="line">&#125;</span><br><span class="line">// 第i天，最多交易j次，当前持股</span><br><span class="line">dp[i][j][1] = MAX&#123;</span><br><span class="line">	dp[i-1][j][0],                // 本次持-本次买</span><br><span class="line">	dp[i-1][j][1] + 差价           // 本次持-上次就持</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getdp</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j,<span class="keyword">int</span> k,<span class="keyword">int</span>[][][] dp,<span class="keyword">int</span>[] prices)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(dp[i][j][k]==-<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(i&lt;<span class="number">1</span>)&#123;</span><br><span class="line">			dp[i][j][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">			dp[i][j][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="comment">// 本次不持-上次就不持</span></span><br><span class="line">			<span class="keyword">int</span> dp1 = getdp(i-<span class="number">1</span>,j,<span class="number">0</span>,dp,prices);</span><br><span class="line">			<span class="comment">// 本次不持-本次卖</span></span><br><span class="line">			<span class="keyword">int</span> dp2 = j&gt;<span class="number">0</span> ? getdp(i-<span class="number">1</span>,j-<span class="number">1</span>,<span class="number">1</span>,dp,prices)+prices[i]-prices[i-<span class="number">1</span>] : <span class="number">0</span>;</span><br><span class="line">			dp[i][j][<span class="number">0</span>] = Math.max(dp1,dp2);</span><br><span class="line">           </span><br><span class="line">			<span class="comment">// 本次持-本次买</span></span><br><span class="line">			<span class="keyword">int</span> dp3 = getdp(i-<span class="number">1</span>,j,<span class="number">0</span>,dp,prices);</span><br><span class="line">			<span class="comment">// 本次持-上次就持</span></span><br><span class="line">			<span class="keyword">int</span> dp4 = getdp(i-<span class="number">1</span>,j,<span class="number">1</span>,dp,prices)+prices[i]-prices[i-<span class="number">1</span>];</span><br><span class="line">			dp[i][j][<span class="number">1</span>] = Math.max(dp3,dp4);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">	<span class="keyword">return</span> dp[i][j][k];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>坑：当k很大时，内存会爆，此时相当于不限制交易次数，直接用贪心解决</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices.length&lt;<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(k &gt; prices.length/<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="comment">// 相当于不限制次数，贪心</span></span><br><span class="line">            <span class="keyword">int</span> value = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;prices.length;i++)&#123;</span><br><span class="line">                value += prices[i]&gt;prices[i-<span class="number">1</span>] ? prices[i]-prices[i-<span class="number">1</span>] : <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[][][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[prices.length][k+<span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;prices.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;k+<span class="number">1</span>;j++)&#123;</span><br><span class="line">                Arrays.fill(dp[i][j],-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> getdp(prices.length-<span class="number">1</span>,k,<span class="number">0</span>,dp,prices);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getdp</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j,<span class="keyword">int</span> k,<span class="keyword">int</span>[][][] dp,<span class="keyword">int</span>[] prices)</span></span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>用这一套解法干掉4题</p>
<p>Leetcode 121 买卖股票的最佳时机 —— 最多交易1次<br>令 k = 1</p>
<p>Leetcode 122 买卖股票的最佳时机 II —— 不限次数<br>直接贪心</p>
<p>Leetcode 123 买卖股票的最佳时机 III —— 最多交易2次<br>令 k = 2</p>
<p>Leetcode 188 买卖股票的最佳时机 IV —— 最多交易k次</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring笔记08 Spring整合Junit</title>
    <url>/2020/03/04/note-spring-08/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/av47952931">https://www.bilibili.com/video/av47952931</a><br>p44～45 </p>
</blockquote>
<hr>
<p>用于解决之前测试时的重复代码</p>
<p>原本的AccountServiceTest中，每个方法中都有步骤1和2</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.得到业务层对象</span></span><br><span class="line">        IAccountService as = ac.getBean(<span class="string">&quot;accountService&quot;</span>,IAccountService.class);</span><br><span class="line">        <span class="comment">// 3.执行方法</span></span><br><span class="line">        Account account = <span class="keyword">new</span> Account();</span><br><span class="line">        account.setName(<span class="string">&quot;eee&quot;</span>);</span><br><span class="line">        account.setMoney(<span class="number">10000f</span>);</span><br><span class="line">        as.createAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.得到业务层对象</span></span><br><span class="line">        IAccountService as = ac.getBean(<span class="string">&quot;accountService&quot;</span>,IAccountService.class);</span><br><span class="line">        <span class="comment">// 3.执行方法</span></span><br><span class="line">        as.deleteAccount(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用init()可以将重复代码抽出来</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext ac;</span><br><span class="line">    <span class="keyword">private</span> IAccountService as;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取容器</span></span><br><span class="line">        ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.得到业务层对象</span></span><br><span class="line">        as = ac.getBean(<span class="string">&quot;accountService&quot;</span>,IAccountService.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account();</span><br><span class="line">        account.setName(<span class="string">&quot;eee&quot;</span>);</span><br><span class="line">        account.setMoney(<span class="number">10000f</span>);</span><br><span class="line">        as.createAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        as.deleteAccount(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是并没有根本上解决问题<br>开发和测试的代码仍在一个类中，需要进一步解耦</p>
<p>如果不要init()，只在变量上加@Autowired没有用<br>一波分析：<br><img src="/images/2020/20200304194906403.png" width=600></p>
<p>解决方法：</p>
<ol>
<li><p>pom.xml中导入spring整合junit的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>且：使用spring 5.x时，juint需要4.12以上的版本</p>
</li>
<li><p>使用junit的@RunWith注解将原有的main()替换成spring提供的</p>
</li>
<li><p>用@ContextConfiguration告知spring的运行器，基于xml还是注解，并说明位置<br>locations：指定xml文件的位置，加上classpath关键字，表示在类路径下<br>classes：指定注释类所在的位置</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(locations = &quot;classpath:beans.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IAccountService as;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account();</span><br><span class="line">        account.setName(<span class="string">&quot;eee&quot;</span>);</span><br><span class="line">        account.setMoney(<span class="number">10000f</span>);</span><br><span class="line">        as.createAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>即可正常执行</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring笔记07 基于注解的IoC案例（实现CRUD）</title>
    <url>/2020/03/04/note-spring-07/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/av47952931?p=38">https://www.bilibili.com/video/av47952931?p=38</a></p>
</blockquote>
<hr>
<h1 id="数据库部分"><a href="#数据库部分" class="headerlink" title="数据库部分"></a>数据库部分</h1><p>继续用上次的表<br><img src="/images/2020/20200304181444129.png" width=200></p>
<hr>
<h1 id="在基于xml的案例上修改"><a href="#在基于xml的案例上修改" class="headerlink" title="在基于xml的案例上修改"></a>在基于xml的案例上修改</h1><p>（加上整合junit的部分，具体记录在笔记8）</p>
<p>pom.xml加上整合junit需要的依赖spring-test<br>junit版本4.12及以上</p>
<p>beans.xml名称空间需要修改<br>在Spring文档中搜索xmlns:context（基于xml时是xmlns）找名称空间<br>配置Service和Dao的部分可以不要了<br>加上component-scan告知Spring在创建容器时要扫描的包</p>
<p>实体类、接口没有变化</p>
<p>业务层实现类AccountServiceImpl加注解<br>@Service(“accountService”)<br>变量accountDao上加注解，由于只有一个AccountDao，可以用@Autowired<br>对应的set方法可以删掉</p>
<p>持久层实现类AccountDaoImpl加注解<br>@Repository(“accountDao”)<br>runner同样用@Autowired，set方法删掉</p>
<p>测试类改为整合junit的写法</p>
<hr>
<h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><img src="/images/2020/20200304183227273.png" width=300>

<h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.coconutnut<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>day02_02_account_xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    打成jar包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    加入依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        spring--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    	<span class="comment">&lt;!--    	spring整合junit--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--        dbutils--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--        mysql驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--        jdbc连接池--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--    junit测试--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="beans-xml"><a href="#beans-xml" class="headerlink" title="beans.xml"></a>beans.xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    告知Spring在创建容器时要扫描的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.cc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    配置QueryRunner（多例）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;runner&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.commons.dbutils.QueryRunner&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        注入数据源（没有set方法，只能构造函数注入）--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;ds&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    配置数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        注入连接数据库的信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/groot?characterEncoding=utf8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;iamgroot&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h2><p>Account.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cc.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Float money;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Float <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(Float money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Account&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, money=&quot;</span> + money +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h2><p>IAccountService.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cc.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.cc.domain.Account;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的业务层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accountId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer accountId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 改</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查一个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accountId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Account <span class="title">retrieveAccountById</span><span class="params">(Integer accountId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查所有</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">retrieveAllAccounts</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>AccountServiceImpl.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cc.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.cc.dao.IAccountDao;</span><br><span class="line"><span class="keyword">import</span> com.cc.domain.Account;</span><br><span class="line"><span class="keyword">import</span> com.cc.service.IAccountService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service(&quot;accountService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IAccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        accountDao.createAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer accountId)</span> </span>&#123;</span><br><span class="line">        accountDao.deleteAccount(accountId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        accountDao.updateAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">retrieveAccountById</span><span class="params">(Integer accountId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.retrieveAccountById(accountId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">retrieveAllAccounts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.retrieveAllAccounts();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><p>IAccountDao.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cc.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.cc.domain.Account;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的持久层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer accountId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Account <span class="title">retrieveAccountById</span><span class="params">(Integer accountId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">retrieveAllAccounts</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>AccountDaoImpl.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cc.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.cc.dao.IAccountDao;</span><br><span class="line"><span class="keyword">import</span> com.cc.domain.Account;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.QueryRunner;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.BeanHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.BeanListHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的持久层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository(&quot;accountDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> QueryRunner runner;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            runner.update(<span class="string">&quot;insert into account(name,money) values(?,?)&quot;</span>, account.getName(), account.getMoney());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer accountId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            runner.update(<span class="string">&quot;delete from account where id = ?&quot;</span>, accountId);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            runner.update(<span class="string">&quot;update account set name = ?, money = ? where id = ?&quot;</span>, account.getName(), account.getMoney(),account.getId());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">retrieveAccountById</span><span class="params">(Integer accountId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> runner.query(<span class="string">&quot;select * from account where id = ?&quot;</span>, <span class="keyword">new</span> BeanHandler&lt;Account&gt;(Account.class), accountId);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">retrieveAllAccounts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> runner.query(<span class="string">&quot;select * from account&quot;</span>, <span class="keyword">new</span> BeanListHandler&lt;Account&gt;(Account.class));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h2><p>AccountServiceTest.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cc.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.cc.domain.Account;</span><br><span class="line"><span class="keyword">import</span> com.cc.service.IAccountService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用Junit测试配置</span></span><br><span class="line"><span class="comment"> * Spring整合Junit的配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(locations = &quot;classpath:beans.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IAccountService as;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account();</span><br><span class="line">        account.setName(<span class="string">&quot;eee&quot;</span>);</span><br><span class="line">        account.setMoney(<span class="number">10000f</span>);</span><br><span class="line">        as.createAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        as.deleteAccount(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Account account = as.retrieveAccountById(<span class="number">3</span>);</span><br><span class="line">        account.setMoney(<span class="number">3000f</span>);</span><br><span class="line">        as.updateAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRetrieveOne</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Account account = as.retrieveAccountById(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRetrieveAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Account&gt; accounts = as.retrieveAllAccounts();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Account account : accounts)&#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>testRetrieveAll()<br><img src="/images/2020/20200304182802930.png" width=800></p>
<p>testRetrieveOne()<br><img src="/images/2020/20200304182924177.png" width=800></p>
<p>testCreate()<br><img src="/images/2020/20200304183005488.png" width=200></p>
<p>testDelete()<br><img src="/images/2020/20200304183052388.png" width=200></p>
<p>testUpdate()<br><img src="/images/2020/20200304183142618.png" width=200></p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue笔记02 Spring Boot+Vue前后端分离开发基本流程</title>
    <url>/2020/03/06/note-vue-02/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/av85793766?p=1">https://www.bilibili.com/video/av85793766?p=1</a></p>
</blockquote>
<hr>
<h1 id="Vue工程"><a href="#Vue工程" class="headerlink" title="Vue工程"></a>Vue工程</h1><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p>vue ui创建工程，导入Idea<br>(js版本太低可能有语法报错，配置中改为6即可)</p>
<p>启动：npm run serve<br>停止：ctrl+C</p>
<h2 id="引入页面-amp-配置路径"><a href="#引入页面-amp-配置路径" class="headerlink" title="引入页面&amp;配置路径"></a>引入页面&amp;配置路径</h2><p>router/index.js中引入.vue<br>App.vue中配置router</p>
<h2 id="Book-vue"><a href="#Book-vue" class="headerlink" title="Book.vue"></a>Book.vue</h2><p>template就是html，script就是js，style就是css<br>template中只允许有一个根节点<br>前端可以先用假数据，写在script里面</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;showcase&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>名称<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>作者<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;item in books&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.author&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;&#123;msg&#125;&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">name</span>: <span class="string">&quot;Book&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="keyword">return</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">msg</span>:<span class="string">&#x27;2019999999999999&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="attr">books</span>:[</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        <span class="attr">id</span>: <span class="number">20200001</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        <span class="attr">name</span>: <span class="string">&#x27;病毒星球&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        <span class="attr">author</span>: <span class="string">&#x27;卡尔·齐默&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        <span class="attr">id</span>:<span class="number">20200002</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        <span class="attr">name</span>: <span class="string">&#x27;洛基启示录&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        <span class="attr">author</span>: <span class="string">&#x27;乔安妮·M·哈里斯&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        <span class="attr">id</span>:<span class="number">20200003</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        <span class="attr">name</span>: <span class="string">&#x27;增强人类&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        <span class="attr">author</span>: <span class="string">&#x27;海伦·帕帕扬尼斯&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                ]</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>vue可以动态加载，改完代码不需要重启，直接访问即可<br>试了下可以正常访问～</p>
<h1 id="Spring工程"><a href="#Spring工程" class="headerlink" title="Spring工程"></a>Spring工程</h1><h2 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h2><p>Idea中Spring Initializr默认模版创建<br>依赖勾上：Lombok、Spring Web、Spring Data JPA、MySQL Driver</p>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>这里没有用application.properties，删掉<br>新建application.yml，存放连接数据库的信息</p>
<h2 id="数据库建表"><a href="#数据库建表" class="headerlink" title="数据库建表"></a>数据库建表</h2><p>用提供的book.sql建book表</p>
<h2 id="Book"><a href="#Book" class="headerlink" title="Book"></a>Book</h2><p>和book表对应，加@Entity后，根据类名和表名对应绑定<br>再加一个@Data，是lombok的注解，自动生成get/set<br>属性名和变量名对应，自动绑定<br>id要加一个@Id，它是主键</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="BookRepository"><a href="#BookRepository" class="headerlink" title="BookRepository"></a>BookRepository</h2><p>继承JpaRepository，&lt;&gt;中第一个是实体类，第二个是主键类型<br>接口中findAll等方法都有，直接用就行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Book</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="测试BookRepository"><a href="#测试BookRepository" class="headerlink" title="测试BookRepository"></a>测试BookRepository</h2><p>然后测试一下<br>建立的Spring工程自带一个测试类BookstoreServerApplicationTests<br>或者自己创建，在接口名上右键-&gt;Go To-&gt;Test-&gt;Create New Test<br>给生成的测试类加一个@SpringBootTest，要测试的类@Autowired自动注入，写的方法加一个@Test，就可以运行了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookRepositoryTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookRepository bookRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(bookRepository.findAll());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>试一下<br><img src="/images/2020/20200306180717607.png"><br>成功<br>且打印了sql语句，因为yml里面配了jpa: show-sql: true和格式化</p>
<p>每写一个repository先测一下，保证没问题再继续写controller</p>
<h2 id="BookHandler"><a href="#BookHandler" class="headerlink" title="BookHandler"></a>BookHandler</h2><p>配上对应的注解和mapping</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/book&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookRepository bookRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/findAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>运行BookstoreServerApplication启动类<br>注意此时端口是8181<br><img src="/images/2020/20200306181433240.png"><br>没有问题，后端就搞定了<br>接下来前后端对接就行</p>
<h1 id="对接"><a href="#对接" class="headerlink" title="对接"></a>对接</h1><p>vue中ajax请求用axios组件<br>（先在命令行把服务停掉，安装，vue add axios）<br>装好之后自动有了src/plugins/axios.js</p>
<p>刷新页面时读取数据，可以写到初始化函数中，比如这样：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">		<span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            alert(<span class="number">123</span>)</span><br><span class="line">            axios.get(<span class="string">&#x27;http://localhost:8181/book/findAll/&#x27;</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">resp</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(resp)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>刷新，看浏览器的控制台<br>有个跨域问题（8181访问8080），前端后端都可以解决<br>这里在SpringBoot中解决<br>只需添加一个配置类，重写addCorsMappings方法即可（不用记，固定的，要用的时候复制就行）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CrosConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .allowedOrigins(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                .allowedMethods(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;HEAD&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;PUT&quot;</span>, <span class="string">&quot;DELETE&quot;</span>, <span class="string">&quot;OPTIONS&quot;</span>)</span><br><span class="line">                .allowCredentials(<span class="keyword">true</span>)</span><br><span class="line">                .maxAge(<span class="number">3600</span>)</span><br><span class="line">                .allowedHeaders(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重启，再访问就好了<br><img src="https://img-blog.csdnimg.cn/20200306185233941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjMxOTQwOA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后再回调函数中把data拿到就行<br>注意：不能直接用this，回调函数中this指的是回调，而不是外面，要先在外面拿到this</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;showcase&quot;</span>&gt;</span><br><span class="line">        &lt;table&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;编号&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;名称&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;作者&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr v-<span class="keyword">for</span>=<span class="string">&quot;item in books&quot;</span>&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123;item.id&#125;&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123;item.author&#125;&#125;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export <span class="keyword">default</span> &#123;</span><br><span class="line">        name: <span class="string">&quot;Book&quot;</span>,</span><br><span class="line">        data()&#123;</span><br><span class="line">            <span class="keyword">return</span>&#123;</span><br><span class="line">                books:[]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        created() &#123;</span><br><span class="line">            <span class="keyword">const</span> _this = <span class="keyword">this</span></span><br><span class="line">            axios.get(<span class="string">&#x27;http://localhost:8181/book/findAll&#x27;</span>).then(function (resp)&#123;</span><br><span class="line">                _this.books = resp.data</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>这样前后端就连上了<br><img src="/images/2020/20200306185851937.png"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li>写前端，用加数据测试</li>
<li>写后端，保证接口能访问</li>
<li>调后端（后端解决跨域问题）</li>
</ol>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring笔记06 基于xml的IoC案例（实现CRUD）</title>
    <url>/2020/03/04/note-spring-06/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/av47952931">https://www.bilibili.com/video/av47952931</a><br>p35~37</p>
</blockquote>
<hr>
<h1 id="数据库部分"><a href="#数据库部分" class="headerlink" title="数据库部分"></a>数据库部分</h1><p>mysql中建一张account表<br><img src="/images/2020/20200304160612648.png" width=200></p>
<hr>
<h1 id="maven工程"><a href="#maven工程" class="headerlink" title="maven工程"></a>maven工程</h1><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><img src="/images/2020/20200304180408780.png" width=300>

<h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.coconutnut<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>day02_02_account_xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    打成jar包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    加入依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        spring--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        dbutils--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        mysql驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        jdbc连接池--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    junit测试--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h2><p>Account.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cc.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Float money;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Float <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(Float money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Account&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, money=&quot;</span> + money +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h2><p>IAccountService.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cc.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.cc.domain.Account;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的业务层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accountId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer accountId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 改</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查一个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accountId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Account <span class="title">retrieveAccountById</span><span class="params">(Integer accountId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查所有</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">retrieveAllAccounts</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>AccountServiceImpl.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cc.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.cc.dao.IAccountDao;</span><br><span class="line"><span class="keyword">import</span> com.cc.domain.Account;</span><br><span class="line"><span class="keyword">import</span> com.cc.service.IAccountService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IAccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountDao</span><span class="params">(IAccountDao accountDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountDao = accountDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        accountDao.createAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer accountId)</span> </span>&#123;</span><br><span class="line">        accountDao.deleteAccount(accountId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        accountDao.updateAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">retrieveAccountById</span><span class="params">(Integer accountId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.retrieveAccountById(accountId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">retrieveAllAccounts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.retrieveAllAccounts();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><p>IAccountDao.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cc.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.cc.domain.Account;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的持久层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer accountId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Account <span class="title">retrieveAccountById</span><span class="params">(Integer accountId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">retrieveAllAccounts</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>AccountDaoImpl.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cc.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.cc.dao.IAccountDao;</span><br><span class="line"><span class="keyword">import</span> com.cc.domain.Account;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.QueryRunner;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.BeanHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.BeanListHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的持久层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> QueryRunner runner;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRunner</span><span class="params">(QueryRunner runner)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.runner = runner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            runner.update(<span class="string">&quot;insert into account(name,money) values(?,?)&quot;</span>, account.getName(), account.getMoney());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer accountId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            runner.update(<span class="string">&quot;delete from account where id = ?&quot;</span>, accountId);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            runner.update(<span class="string">&quot;update account set name = ?, money = ? where id = ?&quot;</span>, account.getName(), account.getMoney(),account.getId());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">retrieveAccountById</span><span class="params">(Integer accountId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> runner.query(<span class="string">&quot;select * from account where id = ?&quot;</span>, <span class="keyword">new</span> BeanHandler&lt;Account&gt;(Account.class), accountId);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">retrieveAllAccounts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> runner.query(<span class="string">&quot;select * from account&quot;</span>, <span class="keyword">new</span> BeanListHandler&lt;Account&gt;(Account.class));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="beans-xml"><a href="#beans-xml" class="headerlink" title="beans.xml"></a>beans.xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    配置Service--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.cc.service.impl.AccountServiceImpl&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        注入Dao--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;accountDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;accountDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--    配置Dao--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.cc.dao.impl.AccountDaoImpl&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        注入QueryRunner--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;runner&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;runner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--    配置QueryRunner（多例）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;runner&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.commons.dbutils.QueryRunner&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        注入数据源（没有set方法，只能构造函数注入）--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;ds&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    配置数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        注入连接数据库的信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/groot?characterEncoding=utf8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;iamgroot&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h2><p>AccountServiceTest.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cc.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.cc.domain.Account;</span><br><span class="line"><span class="keyword">import</span> com.cc.service.IAccountService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用Junit测试配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.得到业务层对象</span></span><br><span class="line">        IAccountService as = ac.getBean(<span class="string">&quot;accountService&quot;</span>,IAccountService.class);</span><br><span class="line">        <span class="comment">// 3.执行方法</span></span><br><span class="line">        Account account = <span class="keyword">new</span> Account();</span><br><span class="line">        account.setName(<span class="string">&quot;ddd&quot;</span>);</span><br><span class="line">        account.setMoney(<span class="number">10f</span>);</span><br><span class="line">        as.createAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.得到业务层对象</span></span><br><span class="line">        IAccountService as = ac.getBean(<span class="string">&quot;accountService&quot;</span>,IAccountService.class);</span><br><span class="line">        <span class="comment">// 3.执行方法</span></span><br><span class="line">        as.deleteAccount(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.得到业务层对象</span></span><br><span class="line">        IAccountService as = ac.getBean(<span class="string">&quot;accountService&quot;</span>,IAccountService.class);</span><br><span class="line">        <span class="comment">// 3.执行方法</span></span><br><span class="line">        Account account = as.retrieveAccountById(<span class="number">1</span>);</span><br><span class="line">        account.setMoney(<span class="number">2000f</span>);</span><br><span class="line">        as.updateAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRetrieveOne</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.得到业务层对象</span></span><br><span class="line">        IAccountService as = ac.getBean(<span class="string">&quot;accountService&quot;</span>,IAccountService.class);</span><br><span class="line">        <span class="comment">// 3.执行方法</span></span><br><span class="line">        Account account = as.retrieveAccountById(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRetrieveAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.得到业务层对象</span></span><br><span class="line">        IAccountService as = ac.getBean(<span class="string">&quot;accountService&quot;</span>,IAccountService.class);</span><br><span class="line">        <span class="comment">// 3.执行方法</span></span><br><span class="line">        List&lt;Account&gt; accounts = as.retrieveAllAccounts();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Account account : accounts)&#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>testRetrieveAll()<br><img src="/images/2020/20200304174231997.png" width=800></p>
<p>testRetrieveOne()<br><img src="/images/2020/20200304174150392.png" width=800></p>
<p>testCreate()<br><img src="/images/2020/20200304175250925.png" width=200></p>
<p>testDelete()<br><img src="/images/2020/2020030417540352.png" width=200></p>
<p>testUpdate()<br><img src="/images/2020/20200304175530135.png" width=200></p>
<hr>
<h1 id="遇到的bug"><a href="#遇到的bug" class="headerlink" title="遇到的bug"></a>遇到的bug</h1><p>执行testRetrieveAll()时</p>
<p>==BUG01==</p>
<pre><code>警告: Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;accountService&apos; defined in class path resource [beans.xml]: Error setting property values; nested exception is org.springframework.beans.NotWritablePropertyException: Invalid property &apos;accountDao &apos; of bean class [com.cc.service.impl.AccountServiceImpl]: Bean property &apos;accountDao &apos; is not writable or has an invalid setter method. Did you mean &apos;accountDao&apos;?

org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;accountService&apos; defined in class path resource [beans.xml]: Error setting property values; nested exception is org.springframework.beans.NotWritablePropertyException: Invalid property &apos;accountDao &apos; of bean class [com.cc.service.impl.AccountServiceImpl]: Bean property &apos;accountDao &apos; is not writable or has an invalid setter method. Did you mean &apos;accountDao&apos;?

at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1650)
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1357)
...</code></pre><p>其中</p>
<pre><code>Bean property &apos;accountDao &apos; is not writable or has an invalid setter method. Did you mean &apos;accountDao&apos;?</code></pre><p>发现多打了个空格</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">beans.xml中</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;accountDao &quot;</span> <span class="attr">ref</span>=<span class="string">&quot;accountDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">改为</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;accountDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;accountDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>改过来之后</p>
<p>==BUG02==</p>
<pre><code>警告: com.mchange.v2.resourcepool.BasicResourcePool$ScatteredAcquireTask@63fd9b65 -- Acquisition Attempt Failed!!! Clearing pending acquires. While trying to acquire a needed new resource, we failed to succeed more than the maximum number of allowed acquisition attempts (30). Last acquisition attempt exception: 
java.sql.SQLException: Unknown initial character set index &apos;255&apos; received from server. Initial client character set can be forced via the &apos;characterEncoding&apos; property.
at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:1055)
...</code></pre><p>似乎是编码问题</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">beans.xml中</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/groot&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">改为</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/groot?characterEncoding=utf8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>改了之后</p>
<p>==BUG03==</p>
<pre><code>警告: com.mchange.v2.resourcepool.BasicResourcePool$ScatteredAcquireTask@4879bf70 -- Acquisition Attempt Failed!!! Clearing pending acquires. While trying to acquire a needed new resource, we failed to succeed more than the maximum number of allowed acquisition attempts (30). Last acquisition attempt exception: 
java.sql.SQLException: Unknown system variable &apos;tx_isolation&apos;
at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:1055)</code></pre><p>查一下解决方啊</p>
<blockquote>
<p><a href="https://blog.csdn.net/always_younger/article/details/80421783">https://blog.csdn.net/always_younger/article/details/80421783</a></p>
</blockquote>
<p>说是mysql-connector-java版本太低的原因</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">pom.xml中</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">改为</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>还有一点小问题</p>
<pre><code>Loading class `com.mysql.jdbc.Driver&apos;. This is deprecated. The new driver class is `com.mysql.cj.jdbc.Driver&apos;. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.</code></pre><p>把过时的类换掉</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">beans.xml中</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">改为</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>就好了！</p>
<pre><code>Account&#123;id=1, name=&apos;aaa&apos;, money=1000.0&#125;
Account&#123;id=2, name=&apos;bbb&apos;, money=1000.0&#125;
Account&#123;id=3, name=&apos;ccc&apos;, money=1000.0&#125;

Process finished with exit code 0</code></pre>]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring笔记09 事务控制的问题&amp;动态代理</title>
    <url>/2020/03/09/note-spring-09/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/av47952931">https://www.bilibili.com/video/av47952931</a><br>p46~55</p>
</blockquote>
<hr>
<h1 id="Account案例中转账方法的事务问题"><a href="#Account案例中转账方法的事务问题" class="headerlink" title="Account案例中转账方法的事务问题"></a>Account案例中转账方法的事务问题</h1><img src="/images/2020/20200309100124499.png">

<p>事务控制应该都在业务层，之前的案例中都在持久层，需要修改<br>写两个工具类</p>
<h1 id="2个工具类"><a href="#2个工具类" class="headerlink" title="2个工具类"></a>2个工具类</h1><h2 id="ConnectionUtils"><a href="#ConnectionUtils" class="headerlink" title="ConnectionUtils"></a>ConnectionUtils</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 连接的工具类，它用于从数据源中获取一个连接，并且实现和线程的绑定</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ThreadLocal&lt;Connection&gt; tl = <span class="keyword">new</span> ThreadLocal&lt;Connection&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dataSource = dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前线程上的连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">getThreadConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 1.先从ThreadLocal上获取</span></span><br><span class="line">            Connection conn = tl.get();</span><br><span class="line">            <span class="comment">// 2.判断当前线程上是否有连接</span></span><br><span class="line">            <span class="keyword">if</span> (conn == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 3.从数据源中获取一个连接，并且存入ThreadLocal中</span></span><br><span class="line">                conn = dataSource.getConnection();</span><br><span class="line">                tl.set(conn);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 4.返回当前线程上的连接</span></span><br><span class="line">            <span class="keyword">return</span> conn;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把连接和线程解绑</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">        tl.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="TransactionManager"><a href="#TransactionManager" class="headerlink" title="TransactionManager"></a>TransactionManager</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 和事务管理相关的工具类，它包含了，开启事务，提交事务，回滚事务和释放连接</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ConnectionUtils connectionUtils;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConnectionUtils</span><span class="params">(ConnectionUtils connectionUtils)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.connectionUtils = connectionUtils;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开启事务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">beginTransaction</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connectionUtils.getThreadConnection().setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提交事务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connectionUtils.getThreadConnection().commit();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 回滚事务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connectionUtils.getThreadConnection().rollback();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">release</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connectionUtils.getThreadConnection().close();<span class="comment">// 还回连接池中</span></span><br><span class="line">            connectionUtils.removeConnection();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>连接还回连接池中后，还需再把连接和线程解绑，否则下次ConnectionUtils中判断是否有连接是true，但这个连接是已经关闭的错误的连接</p>
<h2 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!-- 配置Connection的工具类 ConnectionUtils --&gt;</span><br><span class="line">   &lt;bean id=<span class="string">&quot;connectionUtils&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.itheima.utils.ConnectionUtils&quot;</span>&gt;</span><br><span class="line">       &lt;!-- 注入数据源--&gt;</span><br><span class="line">       &lt;property name=<span class="string">&quot;dataSource&quot;</span> ref=<span class="string">&quot;dataSource&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!-- 配置事务管理器--&gt;</span><br><span class="line">   &lt;bean id=<span class="string">&quot;txManager&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.itheima.utils.TransactionManager&quot;</span>&gt;</span><br><span class="line">       &lt;!-- 注入ConnectionUtils --&gt;</span><br><span class="line">       &lt;property name=<span class="string">&quot;connectionUtils&quot;</span> ref=<span class="string">&quot;connectionUtils&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br></pre></td></tr></table></figure>
<h1 id="代码改造"><a href="#代码改造" class="headerlink" title="代码改造"></a>代码改造</h1><p>修改之后不需要在beans.xml中注入dataSource了</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置Connection的工具类 ConnectionUtils --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;connectionUtils&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.utils.ConnectionUtils&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注入数据源--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在AccountDaoImpl中加一个ConnectionUtils</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> ConnectionUtils connectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConnectionUtils</span><span class="params">(ConnectionUtils connectionUtils)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.connectionUtils = connectionUtils;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>并且runner获取连接改为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">runner.query(connectionUtils.getThreadConnection(),<span class="string">&quot;select * from account&quot;</span>,<span class="keyword">new</span> BeanListHandler&lt;Account&gt;(Account.class));</span><br></pre></td></tr></table></figure>
<p>此时，AccountServiceImpl中一个完整的事务流程是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAllAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1.开启事务</span></span><br><span class="line">            txManager.beginTransaction();</span><br><span class="line">            <span class="comment">// 2.执行操作</span></span><br><span class="line">            List&lt;Account&gt; accounts = accountDao.findAllAccount();</span><br><span class="line">            <span class="comment">// 3.提交事务</span></span><br><span class="line">            txManager.commit();</span><br><span class="line">            <span class="comment">// 4.返回结果</span></span><br><span class="line">            <span class="keyword">return</span> accounts;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="comment">// 5.回滚操作</span></span><br><span class="line">            txManager.rollback();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 6.释放连接</span></span><br><span class="line">            txManager.release();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是每个方法都要这样写，很臃肿<br>而且方法的依赖很严重（如果TransactionManager中beginTransaction方法名改成beginTransaction1，AccountServiceImpl中每一处用到的都要改）<br>进一步改造：代理</p>
<p>&amp; 现在的依赖有些乱七八糟，在后面Spring的事务控制中解决</p>
<h1 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h1><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><img src="/images/2020/20200309104823423.png">

<p>特点：字节码随用随创建，随用随加载<br>作用：不修改源码的基础上对方法增强</p>
<p>分类：</p>
<ul>
<li>基于接口的动态代理</li>
<li>基于子类的动态代理</li>
</ul>
<p>用处如：<br>连接池close方法关闭时不能真正关闭，还要还回池中。可以使用动态代理对其进行增强，把它还回池里<br>解决中文乱码，request对象的方法增强，用装饰者模式可以实现，也可以用动态代理实现</p>
<h2 id="基于接口的动态代理"><a href="#基于接口的动态代理" class="headerlink" title="基于接口的动态代理"></a>基于接口的动态代理</h2><p>涉及的类：Proxy<br>提供者：JDK官方<br>如何创建代理对象：使用Proxy类中的newProxyInstance方法<br>创建代理对象的要求：被代理类最少实现一个接口，如果没有则不能使用</p>
<p>newProxyInstance方法的参数：</p>
<ul>
<li>ClassLoader：类加载器<br>它是用于加载代理对象字节码的。和被代理对象使用相同的类加载器。固定写法</li>
<li>Class[]：字节码数组<br>它是用于让代理对象和被代理对象有相同方法。固定写法</li>
<li>InvocationHandler：用于提供增强的代码<br>写如何代理。一般都是写一个该接口的实现类，通常情况下都是匿名内部类，但不是必须的。此接口的实现类都是谁用谁写</li>
</ul>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><img src="/images/2020/20200309110447314.png" width=300>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对生产厂家要求的接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IProducer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 销售</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saleProduct</span><span class="params">(<span class="keyword">float</span> money)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 售后</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterService</span><span class="params">(<span class="keyword">float</span> money)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个生产者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">IProducer</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saleProduct</span><span class="params">(<span class="keyword">float</span> money)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;销售产品，并拿到钱：&quot;</span>+money);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterService</span><span class="params">(<span class="keyword">float</span> money)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;提供售后服务，并拿到钱：&quot;</span>+money);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟一个消费者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Producer producer = <span class="keyword">new</span> Producer();</span><br><span class="line"></span><br><span class="line">        IProducer proxyProducer = (IProducer) Proxy.newProxyInstance(producer.getClass().getClassLoader(),</span><br><span class="line">                producer.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * 作用：执行被代理对象的任何接口方法都会经过该方法（即有拦截功能）</span></span><br><span class="line"><span class="comment">                     * 方法参数的含义</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> proxy   代理对象的引用</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> method  当前执行的方法</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> args    当前执行方法所需的参数</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@return</span>        和被代理对象方法有相同的返回值</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                        <span class="comment">// 接收返回值</span></span><br><span class="line">                        Object returnValue = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 1.获取方法执行的参数</span></span><br><span class="line">                        Float money = (Float)args[<span class="number">0</span>];</span><br><span class="line">                        <span class="comment">// 2.判断当前方法是不是销售</span></span><br><span class="line">                        <span class="keyword">if</span>(<span class="string">&quot;saleProduct&quot;</span>.equals(method.getName())) &#123;</span><br><span class="line">                            returnValue = method.invoke(producer, money*<span class="number">0.8f</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> returnValue;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    </span><br><span class="line">    	proxyProducer.saleProduct(<span class="number">10000f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/images/2020/20200309111349124.png" width=600>

<p>使用代理后，消费者付10000，代理提成20%，生产者拿到8000</p>
<p>并没有对生产者的代码做任何修改，但是实现了增强<br>此处即为基于接口的动态代理</p>
<p>但是有一个问题<br>如果生产者没有实现接口，就不能这样用了，会报代理异常</p>
<h2 id="基于子类的动态代理"><a href="#基于子类的动态代理" class="headerlink" title="基于子类的动态代理"></a>基于子类的动态代理</h2><p>要求有第三方jar包的支持</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1_3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>涉及的类：Enhancer<br>提供者：第三方cglib库</p>
<p>如何创建代理对象：使用Enhancer类中的create方法<br>创建代理对象的要求：被代理类不能是最终类</p>
<p>create方法的参数：</p>
<ul>
<li>Class：字节码<br>用于指定被代理对象的字节码</li>
<li>Callback：用于提供增强的代码<br>写如何代理。一般是写一个该接口的实现类，通常情况下都是匿名内部类，但不是必须的<br>此接口的实现类都是谁用谁写<br>一般写的都是该接口的子接口实现类：MethodInterceptor</li>
</ul>
<h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个生产者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 销售</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saleProduct</span><span class="params">(<span class="keyword">float</span> money)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;销售产品，并拿到钱：&quot;</span>+money);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 售后</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterService</span><span class="params">(<span class="keyword">float</span> money)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;提供售后服务，并拿到钱：&quot;</span>+money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.cglib;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟一个消费者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Producer producer = <span class="keyword">new</span> Producer();</span><br><span class="line"></span><br><span class="line">        Producer cglibProducer = (Producer)Enhancer.create(producer.getClass(), <span class="keyword">new</span> MethodInterceptor() &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 执行被代理对象的任何方法都会经过该方法</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> proxy</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> method</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">             *    以上三个参数和基于接口的动态代理中invoke方法的参数是一样的</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> methodProxy ：当前执行方法的代理对象</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">             * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object proxy, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                Object returnValue = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 1.获取方法执行的参数</span></span><br><span class="line">                Float money = (Float)args[<span class="number">0</span>];</span><br><span class="line">                <span class="comment">// 2.判断当前方法是不是销售</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="string">&quot;saleProduct&quot;</span>.equals(method.getName())) &#123;</span><br><span class="line">                    returnValue = method.invoke(producer, money*<span class="number">0.8f</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> returnValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        cglibProducer.saleProduct(<span class="number">12000f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="使用动态代理实现事务控制"><a href="#使用动态代理实现事务控制" class="headerlink" title="使用动态代理实现事务控制"></a>使用动态代理实现事务控制</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于创建Service的代理对象的工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IAccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TransactionManager txManager;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setAccountService</span><span class="params">(IAccountService accountService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountService = accountService;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTxManager</span><span class="params">(TransactionManager txManager)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.txManager = txManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Service代理对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IAccountService <span class="title">getAccountService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (IAccountService)Proxy.newProxyInstance(accountService.getClass().getClassLoader(),</span><br><span class="line">                accountService.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * 添加事务的支持</span></span><br><span class="line"><span class="comment">                     *</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> proxy</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> method</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">                     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                        <span class="keyword">if</span>(<span class="string">&quot;test&quot;</span>.equals(method.getName()))&#123;</span><br><span class="line">                            <span class="keyword">return</span> method.invoke(accountService,args);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        Object rtValue = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="comment">// 1.开启事务</span></span><br><span class="line">                            txManager.beginTransaction();</span><br><span class="line">                            <span class="comment">// 2.执行操作</span></span><br><span class="line">                            rtValue = method.invoke(accountService, args);</span><br><span class="line">                            <span class="comment">// 3.提交事务</span></span><br><span class="line">                            txManager.commit();</span><br><span class="line">                            <span class="comment">// 4.返回结果</span></span><br><span class="line">                            <span class="keyword">return</span> rtValue;</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                            <span class="comment">// 5.回滚操作</span></span><br><span class="line">                            txManager.rollback();</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">                        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                            <span class="comment">// 6.释放连接</span></span><br><span class="line">                            txManager.release();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>并对beans.xml做相应的修改<br>测试中IAccountService只用Autowird不够了，还需@Qualifier(“proxyAccountService”)</p>
<p>使用动态代理后，消除了重复代码，解除了方法的依赖<br>但是配置变得繁琐了<br>更好的方式？——&gt;AOP</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue笔记01 @vue_cli环境搭建</title>
    <url>/2020/03/06/note-vue-01/</url>
    <content><![CDATA[<img src="/images/2020/20200306115323370.png">
在经历了这么多坑之后终于build succeeded了
可喜可贺
整理下成功路径

<hr>
<p>版本：</p>
<ul>
<li>macOS Catalina 10.15.3</li>
<li>Homebrew 2.2.6</li>
<li>node v13.8.0</li>
<li>npm 6.13.7</li>
<li>@vue/cli 4.2.3</li>
</ul>
<hr>
<h2 id="1-安装node"><a href="#1-安装node" class="headerlink" title="1. 安装node"></a>1. 安装node</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure>
<p>坑：brew巨慢无比<br>解决：换清华镜像</p>
<blockquote>
<p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/">https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/</a></p>
</blockquote>
<h2 id="2-安装-vue-cli"><a href="#2-安装-vue-cli" class="headerlink" title="2. 安装@vue/cli"></a>2. 安装@vue/cli</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo npm install -g @vue/cli</span><br></pre></td></tr></table></figure>
<p>坑：没有权限<br>解决：sudo</p>
<blockquote>
<p><a href="https://www.jianshu.com/p/0207ee424422">https://www.jianshu.com/p/0207ee424422</a></p>
</blockquote>
<p>坑：新旧版本名字不一样<br>解决：@vue/cli（不是vue-cli）</p>
<blockquote>
<p><a href="https://cli.vuejs.org/zh/guide/installation.html">https://cli.vuejs.org/zh/guide/installation.html</a></p>
</blockquote>
<h2 id="3-创建项目"><a href="#3-创建项目" class="headerlink" title="3. 创建项目"></a>3. 创建项目</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vue ui</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>一些有趣的网站</title>
    <url>/2020/03/10/bookmark/</url>
    <content><![CDATA[<h1 id="配色"><a href="#配色" class="headerlink" title="配色"></a>配色</h1><h2 id=""><a href="#" class="headerlink" title=""></a><a href="http://zhongguose.com/" title="" target="">中国色</a></h2><p>中国传统颜色，每一个都有CMYK、RGB值(包括16进制字符串形式～好用！)<br><img src="/images/2020/2020-03-10.8.30.50.jpg"><br>#5dbe8a 超爱的蔻梢绿～</p>
<h2 id="-1"><a href="#-1" class="headerlink" title=""></a><a href="https://brandcolors.net/" title="" target="">brandcolors</a></h2><p>品牌配色，可以发现各种眼熟的颜色</p>
<p>这是百度<br><img src="/images/2020/2020-03-10.8.44.30.jpg"><br>这是NASA<br><img src="/images/2020/2020-03-10.8.48.06.jpg"><br>这是谷歌<br><img src="/images/2020/2020-03-10.8.46.18.jpg"><br>这是微软<br><img src="/images/2020/2020-03-10.8.47.35.jpg"><br>那么问题来了，它们是谁？<br><img src="/images/2020/2020-03-10.8.24.22.jpg"></p>
<p><a href="/images/2020/2020-03-10.8.24.21.jpg">我是答案</a></p>
<h2 id="-2"><a href="#-2" class="headerlink" title=""></a><a href="https://webgradients.com/" title="" target="">webgradients</a></h2><p>一颗一颗超仙的渐变色，也可以全屏查看，舒适<br><img src="/images/2020/2020-03-10.8.26.24.jpg"></p>
<h2 id="-3"><a href="#-3" class="headerlink" title=""></a><a href="https://uigradients.com/" title="" target="">uigradients</a></h2><p>也是美丽的渐变色<br><img src="/images/2020/2020-03-10.8.30.23.jpg"></p>
<h2 id="-4"><a href="#-4" class="headerlink" title=""></a><a href="https://www.webdesignrankings.com/resources/lolcolors/" title="" target="">LOLCOLORS</a></h2><p>水滴形的配色<br><img src="/images/2020/2020-03-10.9.13.18.jpg"></p>
<h2 id="-5"><a href="#-5" class="headerlink" title=""></a><a href="https://color.adobe.com/zh/create/color-wheel/" title="" target="">色轮</a></h2><p>adobe出品，不会用，但是很好玩<br><img src="/images/2020/2020-03-10.9.10.41.jpg"></p>
<h2 id="-6"><a href="#-6" class="headerlink" title=""></a><a href="https://color.hailpixel.com/" title="" target="">Colordot</a></h2><p>这个也很有趣！挪动光标调色，点击固定<br><img src="/images/2020/2020-03-10.9.15.21.jpg"><br><img src="/images/2020/2020-03-10.9.17.15.jpg"></p>
<h1 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h1><h2 id="-7"><a href="#-7" class="headerlink" title=""></a><a href="https://thenounproject.com/" title="" target="">thenounproject</a></h2><p>常用的图标网站</p>
<img src="/images/2020/2020-03-10.9.22.23.jpg">



<h1 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h1><h2 id="-8"><a href="#-8" class="headerlink" title=""></a><a href="https://dribbble.com/" title="" target="">dribbble</a></h2><img src="/images/2020/screencapture2020-03-18PM11.47.55.jpg">

<h2 id="-9"><a href="#-9" class="headerlink" title=""></a><a href="https://tympanus.net/codrops/" title="" target="">codrops</a></h2><p>发现酷炫的页面</p>
<img src="/images/2020/screencapture2020-03-18PM11.49.26.jpg">

]]></content>
      <categories>
        <category>Memo</category>
      </categories>
  </entry>
  <entry>
    <title>来到Hexo的第一天！</title>
    <url>/2020/03/10/hello-hexo/</url>
    <content><![CDATA[<p>从下午开始搭建，调主题，一直到晚上搬运完了正在写的笔记，心情舒畅</p>
<p>先尝试的是Jekyll，我的老天鹅啊，折腾了一整天，不是配置有问题就是资源有问题，本地好不容易成功了提交到github又崩了，build成功了css又不渲染…<br>您是Hyde吧</p>
<p>总之，现在拥有一个带侧边栏目录的小仓库了～<br><img src="/images/2020/8586786.png" width=200></p>
<p>开启探索进度条<br>[|||||·············································]10%</p>
<p>(deprecated)<a href="https://blog.csdn.net/weixin_42319408" title="" target="">老家</a></p>
]]></content>
      <categories>
        <category>Memo</category>
      </categories>
  </entry>
  <entry>
    <title>maxOS截图设置</title>
    <url>/2020/03/11/mac-screencapture/</url>
    <content><![CDATA[<p>问题：以前插入截图得先改文件名，要时间戳不含中文，而且png特别大，最好转成jpg，很麻烦</p>
<p>目标：文件名时间戳不含中文 &amp; jpg格式</p>
<hr>
<h1 id="一通操作"><a href="#一通操作" class="headerlink" title="一通操作"></a>一通操作</h1><h2 id="改格式"><a href="#改格式" class="headerlink" title="改格式"></a>改格式</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.screencapture type jpg</span><br></pre></td></tr></table></figure>

<h2 id="改名"><a href="#改名" class="headerlink" title="改名"></a>改名</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.screencapture name screencapture</span><br></pre></td></tr></table></figure>

<h2 id="改时间戳格式"><a href="#改时间戳格式" class="headerlink" title="改时间戳格式"></a>改时间戳格式</h2><p>系统偏好设置-&gt;语言与地区-&gt;高级-&gt;时间</p>
<p>正午前和中午后框中：上午/下午改成AM/PM </p>
<h2 id="完工"><a href="#完工" class="headerlink" title="完工"></a>完工</h2><p>Before:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">截屏2020-03-11上午9.50.34</span><br></pre></td></tr></table></figure>

<p>After:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">screencapture2020-03-11AM10.05.30</span><br></pre></td></tr></table></figure>



<hr>
<h1 id="命令备忘"><a href="#命令备忘" class="headerlink" title="命令备忘"></a>命令备忘</h1><h2 id="修改格式"><a href="#修改格式" class="headerlink" title="修改格式"></a>修改格式</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.screencapture type jpg</span><br></pre></td></tr></table></figure>

<h2 id="修改文件名"><a href="#修改文件名" class="headerlink" title="修改文件名"></a>修改文件名</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.screencapture name XXX</span><br></pre></td></tr></table></figure>

<h2 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h2><h3 id="移除时间戳"><a href="#移除时间戳" class="headerlink" title="移除时间戳"></a>移除时间戳</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.screencapture &quot;include-date&quot; 0</span><br></pre></td></tr></table></figure>

<h3 id="加时间戳"><a href="#加时间戳" class="headerlink" title="加时间戳"></a>加时间戳</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.screencapture &quot;include-date&quot; 1</span><br></pre></td></tr></table></figure>

<h2 id="其它帮助"><a href="#其它帮助" class="headerlink" title="其它帮助"></a>其它帮助</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">screencapture -h</span><br></pre></td></tr></table></figure>



<blockquote>
<p>ref:</p>
<p><a href="https://zhuanlan.zhihu.com/p/73725126">https://zhuanlan.zhihu.com/p/73725126</a></p>
<p><a href="https://www.maketecheasier.com/remove-time-stamp-screenshot-mac/">https://www.maketecheasier.com/remove-time-stamp-screenshot-mac/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue笔记03 Element UI使用&amp;动态路由导航栏</title>
    <url>/2020/03/11/note-vue-03/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/av85793766">https://www.bilibili.com/video/av85793766</a><br>p2~3</p>
</blockquote>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>和上次一样创建项目，在vue ui中添加Element UI插件</p>
<p>Idea中导入工程</p>
<p>如果插件在刚才UI中没有装成功，可以在命令行装</p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>Element UI的使用可以看官网手册</p>
<a href="https://element.eleme.cn/2.0/#/zh-CN" title="" target="">Elemnt UI 中文官网</a>

<p>有一些常见的布局方式</p>
<h2 id="导入实例"><a href="#导入实例" class="headerlink" title="导入实例"></a>导入实例</h2><p>直接把官网实例复制到App.vue中（html复制到div标签之间）</p>
<p>刷新网页就能看到效果</p>
<h2 id="一些标签说明"><a href="#一些标签说明" class="headerlink" title="一些标签说明"></a>一些标签说明</h2><p>el-container: 构建整个⻚面框架</p>
<p>el-menu: 左侧菜单</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// :default-openeds默认展开的菜单 :default-active默认选中的菜单</span><br><span class="line"><span class="tag">&lt;<span class="name">el-menu</span> <span class="attr">:default-openeds</span>=<span class="string">&quot;[&#x27;1&#x27;, &#x27;3&#x27;]&quot;</span> <span class="attr">:default-active</span>=<span class="string">&quot;1-2&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>视频里说这个”1-2”必须写成”[1-2]”或则”‘1-2’”才能识别</p>
<p>但是试了一下直接写也识别了</p>
<p>el-submenu: 可展开的菜单</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 菜单的下标，文本类型，不能是数值类型</span><br><span class="line"><span class="tag">&lt;<span class="name">el-submenu</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">  // template:对应 el-submenu 的菜单名 i:设置菜单图标，具体在文档找</span><br><span class="line">	<span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>导航一<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>需要的话还可以嵌套多级submenu</p>
<h2 id="通过vue-router动态构建左侧菜单"><a href="#通过vue-router动态构建左侧菜单" class="headerlink" title="通过vue router动态构建左侧菜单"></a>通过vue router动态构建左侧菜单</h2><h3 id="配置页面"><a href="#配置页面" class="headerlink" title="配置页面"></a>配置页面</h3><p>新建4个页面，在router中配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Page1 <span class="keyword">from</span> <span class="string">&#x27;../views/Page1&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Page2 <span class="keyword">from</span> <span class="string">&#x27;../views/Page2&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Page3 <span class="keyword">from</span> <span class="string">&#x27;../views/Page3&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Page4 <span class="keyword">from</span> <span class="string">&#x27;../views/Page4&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/page1&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;页面1&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: Page1</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/page2&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;页面2&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: Page2</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/page3&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;页面3&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: Page3</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/page4&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;页面4&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: Page4</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>但是这样还不会显示，要在App.vue中加上router对应的页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">        ...</span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src="/images/2020/screencapture2020-03-11AM10.59.18.jpg">

<p>此时相当于App中的内容是本来就显示的，下面的view是附加上去的</p>
<p>这样放显然是有问题的</p>
<p>把它放到main里面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">				...</span><br><span class="line">				<span class="tag">&lt;<span class="name">el-main</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-main</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src="/images/2020/screencapture2020-03-11AM11.03.53.jpg">

<p>这样就放进去了，下一步把它们连上</p>
<h3 id="遍历router"><a href="#遍历router" class="headerlink" title="遍历router"></a>遍历router</h3><p>需要修改router的层级结构</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;导航1&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:App,</span><br><span class="line">    <span class="attr">children</span>:[</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/page1&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;页面1&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: Page1</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/page2&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;页面2&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: Page2</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/navigation&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;导航2&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:App,</span><br><span class="line">    <span class="attr">children</span>:[</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/page3&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;页面3&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: Page3</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/page4&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;页面4&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: Page4</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>然后在App.vue中读取</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-aside</span> <span class="attr">width</span>=<span class="string">&quot;200px&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: rgb(238, 241, 246)&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">el-menu</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">el-submenu</span> <span class="attr">v-for</span>=<span class="string">&quot;item in $router.options.routes&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-setting&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">el-submenu</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">el-menu</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-aside</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>就显示出来了</p>
<img src="/images/2020/screencapture2020-03-11AM11.14.49.jpg">

<hr>
<p>一个小bug</p>
<p>页面一开始是空白的，发现是App没有引入，router中要加</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br></pre></td></tr></table></figure>

<hr>
<p>把内层的元素也读出来</p>
<p>现在点一个导航时，两个会一起展开、合上，因为没有加index</p>
<p>再加上index属性（通过item的下标，item在前，index在后），需要字符串属性，拼一个’’</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-aside</span> <span class="attr">width</span>=<span class="string">&quot;200px&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: rgb(238, 241, 246)&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-menu</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-submenu</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in $router.options.routes&quot;</span> <span class="attr">:index</span>=<span class="string">&quot;index+&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-setting&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>&#123;&#123;index&#125;&#125;-&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">v-for</span>=<span class="string">&quot;(item2,index2) in item.children&quot;</span> <span class="attr">:index</span>=<span class="string">&quot;index+&#x27;-&#x27;+index2&quot;</span>&gt;</span>&#123;&#123;item2.name&#125;&#125;<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-submenu</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-menu</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-aside</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>就可以定位到每一个了</p>
<img src="/images/2020/screencapture2020-03-11AM11.29.49.jpg">

<h2 id="menu与router绑定"><a href="#menu与router绑定" class="headerlink" title="menu与router绑定"></a>menu与router绑定</h2><p>把App中的内容放到Index页面中</p>
<p>1、给 el-menu 标签添加 router 属性</p>
<p>2、在⻚面中添加 router-view 标签（它是一个容器，可以动态渲染选择的router）</p>
<p>3、el-menu-item 标签的 index 值就是要跳转的 router</p>
<p>默认页面，在router中写redirect</p>
<p>并初始化选中，如果选择则加is-active状态。用route.path获取当前路径</p>
<img src="/images/2020/screencapture2020-03-11PM4.09.10.jpg">

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h2><img src="/images/2020/screencapture2020-03-11PM4.10.22.jpg" width=300>

<h2 id="App-vue"><a href="#App-vue" class="headerlink" title="App.vue"></a>App.vue</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    这个router对应的即为/，也就是Index页面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Index-vue"><a href="#Index-vue" class="headerlink" title="Index.vue"></a>Index.vue</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-container</span> <span class="attr">style</span>=<span class="string">&quot;height: 500px; border: 1px solid #eee&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-aside</span> <span class="attr">width</span>=<span class="string">&quot;200px&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: rgb(238, 241, 246)&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            这里添加router标签，el-menu-item的index就会被作为router路径--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-menu</span> <span class="attr">router</span> <span class="attr">:default-openeds</span>=<span class="string">&quot;[&#x27;0&#x27;,&#x27;1&#x27;]&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-submenu</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in $router.options.routes&quot;</span> <span class="attr">:index</span>=<span class="string">&quot;index+&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-setting&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>&#123;&#123;index&#125;&#125;-&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                    条件判断当前路径是否等于index，更改选中状态，主要是在初始化时增加默认的选中状态--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">v-for</span>=<span class="string">&quot;item2 in item.children&quot;</span> <span class="attr">:index</span>=<span class="string">&quot;item2.path&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;$route.path==item2.path ? &#x27;is-active&#x27; : &#x27;&#x27;&quot;</span>&gt;</span>&#123;&#123;item2.path&#125;&#125;-&#123;&#123;item2.name&#125;&#125;<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-submenu</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-menu</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-aside</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-main</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            上面又index确定的router被显示在这里，也就是main区域中--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-main</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;导航1&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:Index,</span><br><span class="line">    <span class="attr">redirect</span>:<span class="string">&#x27;page1&#x27;</span>,</span><br><span class="line">    <span class="attr">children</span>:[</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/page1&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;页面1&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: Page1</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/page2&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;页面2&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: Page2</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/navigation&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;导航2&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:Index,</span><br><span class="line">    <span class="attr">children</span>:[</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/page3&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;页面3&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: Page3</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/page4&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;页面4&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: Page4</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>注意区别：router/route/routes</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 10 写文件权限问题</title>
    <url>/2020/03/12/debug-android/</url>
    <content><![CDATA[<h1 id="bug描述"><a href="#bug描述" class="headerlink" title="bug描述"></a>bug描述</h1><p>换手机之后一个以前没毛病的写文件操作写不了了<br>估摸着是版本问题</p>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>AndroidManifest.xml中，application标签中加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">android:requestLegacyExternalStorage=&quot;true&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>ref:<br><a href="https://blog.csdn.net/weixin_40093242/article/details/104067573?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task">https://blog.csdn.net/weixin_40093242/article/details/104067573?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Debug</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode.337 打家劫舍</title>
    <url>/2020/03/12/exercise/</url>
    <content><![CDATA[<a href="https://leetcode-cn.com/problems/house-robber-iii/" title="" target="">题目地址</a>

<h1 id="暴力抢劫"><a href="#暴力抢劫" class="headerlink" title="暴力抢劫"></a>暴力抢劫</h1><p>写出来倒是挺快，结果发现时间爆炸</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.max(find(root,<span class="keyword">true</span>),find(root,<span class="keyword">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(TreeNode root, <span class="keyword">boolean</span> isGap)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(!isGap)&#123;</span><br><span class="line">            <span class="comment">// 本层抢，下层不能抢</span></span><br><span class="line">            ret+=root.val;</span><br><span class="line">            ret+=find(root.left,<span class="keyword">false</span>);</span><br><span class="line">            ret+=find(root.right,<span class="keyword">false</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> next1 = Math.max(find(root.left,<span class="keyword">true</span>),find(root.left,<span class="keyword">false</span>));</span><br><span class="line">            <span class="keyword">int</span> next2 = Math.max(find(root.right,<span class="keyword">true</span>),find(root.right,<span class="keyword">false</span>));</span><br><span class="line">            ret = next1 + next2;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">执行用时：2817 ms</span><br><span class="line">内存消耗：39.3 MB</span><br></pre></td></tr></table></figure>

<p>这样写每次都递归找了至少2次、甚至4次子节点</p>
<p>相当于把二叉树省下来的log又给翻倍乘回去了</p>
<h1 id="机智的劫匪"><a href="#机智的劫匪" class="headerlink" title="机智的劫匪"></a>机智的劫匪</h1><p>看了题解中一次返回2种情况，修改一下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] ans = find(root);</span><br><span class="line">        <span class="keyword">return</span> Math.max(ans[<span class="number">0</span>],ans[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] find(TreeNode root)&#123;</span><br><span class="line">        <span class="comment">// ret0-本层不抢；ret1-本层抢</span></span><br><span class="line">        <span class="keyword">int</span>[] ret = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>[] left = find(root.left);</span><br><span class="line">        <span class="keyword">int</span>[] right = find(root.right);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 下层爱抢不抢</span></span><br><span class="line">        ret[<span class="number">0</span>] = Math.max(left[<span class="number">0</span>],left[<span class="number">1</span>]) + Math.max(right[<span class="number">0</span>],right[<span class="number">1</span>]);</span><br><span class="line">        <span class="comment">// 下层不能抢</span></span><br><span class="line">        ret[<span class="number">1</span>] = root.val + left[<span class="number">0</span>] + right[<span class="number">0</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">执行用时：1 ms</span><br><span class="line">内存消耗：41.6 MB</span><br></pre></td></tr></table></figure>

<p>这样就只遍历了1次</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>递归中如果要分情况讨论，一次返回多个结果，不要多次调用递归</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring笔记10 AOP</title>
    <url>/2020/03/12/note-spring-10/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/av47952931">https://www.bilibili.com/video/av47952931</a><br>p56~65</p>
</blockquote>
<hr>
<h1 id="AOP概述"><a href="#AOP概述" class="headerlink" title="AOP概述"></a>AOP概述</h1><p>Aspect Oriented Programming 面向切面编程</p>
<ul>
<li><p>扩展功能不通过修改源代码实现</p>
</li>
<li><p>AOP采取横向抽取机制，取代了传统的纵向继承体系重复性代码</p>
</li>
<li><p>底层使用动态代理方法实现</p>
<ul>
<li>有接口时，使用jdk动态代理，创建和接口实现平级的代理对象</li>
<li>无接口时，使用cglib动态代理，创建类的子类的代理对象</li>
</ul>
</li>
</ul>
<h2 id="作用及优势"><a href="#作用及优势" class="headerlink" title="作用及优势"></a>作用及优势</h2><p>作用：</p>
<ul>
<li>在程序运行期间，不修改源码对已有方法进行增强</li>
</ul>
<p>优势：</p>
<ul>
<li>减少重复代码</li>
<li>提高开发效率</li>
<li>维护方便</li>
</ul>
<h1 id="Spring中的AOP"><a href="#Spring中的AOP" class="headerlink" title="Spring中的AOP"></a>Spring中的AOP</h1><h2 id="相关术语"><a href="#相关术语" class="headerlink" title="相关术语"></a>相关术语</h2><h3 id="Joinpoint-连接点"><a href="#Joinpoint-连接点" class="headerlink" title="Joinpoint 连接点"></a>Joinpoint 连接点</h3><p>类中可以被增强的方法</p>
<h3 id="Pointcut-切入点"><a href="#Pointcut-切入点" class="headerlink" title="Pointcut 切入点"></a>Pointcut 切入点</h3><p>类中实际增强的方法</p>
<h3 id="Advice-通知-增强"><a href="#Advice-通知-增强" class="headerlink" title="Advice 通知/增强"></a>Advice 通知/增强</h3><p>切入点上扩展的功能</p>
<ul>
<li>前置增强：在方法之前执行</li>
<li>后置增强：在方法正常执行之后执行</li>
<li>最终增强：在最后执行，无论是否有异常</li>
<li>环绕增强：在之前和之后执行</li>
<li>异常增强：方法出现异常时执行</li>
</ul>
<h3 id="Introduction-引介"><a href="#Introduction-引介" class="headerlink" title="Introduction 引介"></a>Introduction 引介</h3><p>一种特殊的增强，在不修改类代码的前提下，可以在运行期间为类动态地添加一些方法或Field</p>
<h3 id="Target-目标对象"><a href="#Target-目标对象" class="headerlink" title="Target 目标对象"></a>Target 目标对象</h3><p>要增强的类</p>
<h3 id="Weaving-织入"><a href="#Weaving-织入" class="headerlink" title="Weaving 织入"></a>Weaving 织入</h3><p>把增强应用到目标对象的过程</p>
<h3 id="Proxy-代理"><a href="#Proxy-代理" class="headerlink" title="Proxy 代理"></a>Proxy 代理</h3><p>一个类被AOP织入增强后，就产生一个结果代理类</p>
<h3 id="Aspect-切面"><a href="#Aspect-切面" class="headerlink" title="Aspect 切面"></a>Aspect 切面</h3><p>切入点 + 通知/引介</p>
<h1 id="Spring基于XML的AOP配置"><a href="#Spring基于XML的AOP配置" class="headerlink" title="Spring基于XML的AOP配置"></a>Spring基于XML的AOP配置</h1><h2 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h2><ol>
<li><p>配置增强Bean</p>
</li>
<li><p>使用aop:config标签表明开始AOP的配置</p>
</li>
<li><p>使用aop:aspect标签表明配置切面</p>
<p>id属性：是给切面提供一个唯一标识<br>ref属性：是指定通知类bean的Id</p>
</li>
<li><p>在aop:aspect标签的内部使用对应标签来配置通知的类型</p>
<p>aop:before：表示配置前置通知（实例中让printLog方法在切入点方法前执行）<br>method属性：用于指定类中哪个方法是前置通知<br>pointcut属性：用于指定切入点表达式，该表达式的含义指的是对业务层中哪些方法增强</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">切入点表达式的写法：</span><br><span class="line">	关键字：execution(表达式)</span><br><span class="line">	表达式：</span><br><span class="line">		访问修饰符  返回值  包名.包名.包名...类名.方法名(参数列表)</span><br><span class="line">		</span><br><span class="line">	标准的表达式写法：</span><br><span class="line">		public void com.itheima.service.impl.AccountServiceImpl.saveAccount()</span><br><span class="line">	访问修饰符可以省略</span><br><span class="line">		void com.itheima.service.impl.AccountServiceImpl.saveAccount()</span><br><span class="line">	返回值可以使用通配符，表示任意返回值</span><br><span class="line">		* com.itheima.service.impl.AccountServiceImpl.saveAccount()</span><br><span class="line">	包名可以使用通配符，表示任意包。但是有几级包，就需要写几个*.</span><br><span class="line">		* *.*.*.*.AccountServiceImpl.saveAccount())</span><br><span class="line">	包名可以使用..表示当前包及其子包</span><br><span class="line">		* *..AccountServiceImpl.saveAccount()</span><br><span class="line">	类名和方法名都可以使用*来实现通配</span><br><span class="line">		* *..*.*()</span><br><span class="line"></span><br><span class="line">	参数列表：</span><br><span class="line">		可以直接写数据类型：</span><br><span class="line">			基本类型直接写名称           int</span><br><span class="line">			引用类型写包名.类名的方式   java.lang.String</span><br><span class="line">			可以使用通配符表示任意类型，但是必须有参数</span><br><span class="line">			可以使用..表示有无参数均可，有参数可以是任意类型</span><br><span class="line"></span><br><span class="line">	全通配写法：</span><br><span class="line">		* *..*.*(..)</span><br><span class="line"></span><br><span class="line">	实际开发中切入点表达式的通常写法：</span><br><span class="line">		切到业务层实现类下的所有方法</span><br><span class="line">			* com.itheima.service.impl.*.*(..)</span><br></pre></td></tr></table></figure>

<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="xml配置"><a href="#xml配置" class="headerlink" title="xml配置"></a>xml配置</h3><p>在Spring Framework Documentation的Core中搜索xmlns:aop，导入约束</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置srping的Ioc,把service对象配置进来--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.AccountServiceImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">     <span class="comment">&lt;!-- 配置Logger类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;logger&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.utils.Logger&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置AOP--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置切面 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">&quot;logAdvice&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;logger&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置通知的类型，并且建立通知方法和切入点方法的关联--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;printLog&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(* com.itheima.service.impl.*.*(..))&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的业务层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟保存账户 无返回值无参</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟更新账户 无返回值有参</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除账户 有返回值无参</span></span><br><span class="line">   <span class="function"><span class="keyword">int</span>  <span class="title">deleteAccount</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了保存&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了更新&quot;</span>+i);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了删除&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于记录日志的工具类，它里面提供了公共的代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于打印日志：计划让其在切入点方法执行之前执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">printLog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Logger类中的pringLog方法开始记录日志了。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试AOP的配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AOPTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//2.获取对象</span></span><br><span class="line">        IAccountService as = (IAccountService)ac.getBean(<span class="string">&quot;accountService&quot;</span>);</span><br><span class="line">        <span class="comment">//3.执行方法</span></span><br><span class="line">        as.saveAccount();</span><br><span class="line">        as.updateAccount(<span class="number">1</span>);</span><br><span class="line">        as.deleteAccount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/images/2020/screencapture2020-03-12AM9.48.57.jpg">

<h2 id="配置切入点表达式"><a href="#配置切入点表达式" class="headerlink" title="配置切入点表达式"></a>配置切入点表达式</h2><p>id属性用于指定表达式的唯一标识</p>
<p>expression属性用于指定表达式内容</p>
<p>该标签写在aop:aspect标签内部只能当前切面使用</p>
<p>还可以写在aop:aspect外面，此时就变成了所有切面可用</p>
<p>注意：必须放在切面之前，否则会报错（还不提醒怎么错的）</p>
<h2 id="4种常用通知类型"><a href="#4种常用通知类型" class="headerlink" title="4种常用通知类型"></a>4种常用通知类型</h2><p>继续在刚才的实例上加其它通知类型</p>
<p>使用切入点表达式简化配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置AOP--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置切入点表达式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pt1&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.itheima.service.impl.*.*(..))&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:pointcut</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置切面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">&quot;logAdvice&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;logger&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置前置通知：在切入点方法执行之前执行--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;beforePrintLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pt1&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置后置通知：在切入点方法正常执行之后值。它和异常通知永远只能执行一个--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;afterReturningPrintLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pt1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-returning</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置异常通知：在切入点方法执行产生异常之后执行。它和后置通知永远只能执行一个--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">&quot;afterThrowingPrintLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pt1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-throwing</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置最终通知：无论切入点方法是否正常执行它都会在其后面执行--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;afterPrintLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pt1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>切入点方法无异常时输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">前置通知Logger类中的beforePrintLog方法开始记录日志了...</span><br><span class="line">执行了保存</span><br><span class="line">后置通知Logger类中的afterReturningPrintLog方法开始记录日志了...</span><br><span class="line">最终通知Logger类中的afterPrintLog方法开始记录日志了...</span><br></pre></td></tr></table></figure>

<p>切入点方法有异常时输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">前置通知Logger类中的beforePrintLog方法开始记录日志了...</span><br><span class="line">执行了保存</span><br><span class="line">异常通知Logger类中的afterThrowingPrintLog方法开始记录日志了...</span><br><span class="line">最终通知Logger类中的afterPrintLog方法开始记录日志了...</span><br><span class="line">Exception in thread &quot;main&quot; java.lang.ArithmeticException: / by zero</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>后置和异常只会执行其中一个</p>
<h2 id="环绕通知"><a href="#环绕通知" class="headerlink" title="环绕通知"></a>环绕通知</h2><p>下面这样配置环绕通知是不行的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">aroundPringLog</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;Logger类中的afterThrowingPrintLog方法开始记录日志了...&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>这样配置后，切入点方法不执行了，只执行通知方法</p>
<p>分析：对比动态代理中，发现其中的环绕通知有明确的切入点调用，而这样没有</p>
<p>解决：使用Spring的ProceedingJoinPoint接口。该接口有一个proceed()方法，在程序执行时，Spring会提供该接口的实现类供我们使用</p>
<p>这样可以控制增强方法何时执行，前置、后置、异常、最终都可以实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">	 <span class="function"><span class="keyword">public</span> Object <span class="title">aroundPringLog</span><span class="params">(ProceedingJoinPoint pjp)</span></span>&#123;</span><br><span class="line">        Object rtValue = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Object[] args = pjp.getArgs();<span class="comment">// 得到方法执行所需的参数</span></span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;Logger类中的aroundPringLog方法开始记录日志了...前置&quot;</span>);</span><br><span class="line">            rtValue = pjp.proceed(args);<span class="comment">// 明确调用业务层方法（切入点方法）</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Logger类中的aroundPringLog方法开始记录日志了...后置&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> rtValue;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Throwable t)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Logger类中的aroundPringLog方法开始记录日志了...异常&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(t);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Logger类中的aroundPringLog方法开始记录日志了...最终&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置环绕通知--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">&quot;aroundPringLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pt1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:around</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Spring基于注解的AOP配置"><a href="#Spring基于注解的AOP配置" class="headerlink" title="Spring基于注解的AOP配置"></a>Spring基于注解的AOP配置</h1><h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h2><h3 id="xml配置-1"><a href="#xml配置-1" class="headerlink" title="xml配置"></a>xml配置</h3><p>约束比基于xml的多了context</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置spring创建容器时要扫描的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itheima&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置spring开启注解AOP的支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Logger配置（4种常用类型）！-建议别用，有bug"><a href="#Logger配置（4种常用类型）！-建议别用，有bug" class="headerlink" title="Logger配置（4种常用类型）！[建议别用，有bug]"></a>Logger配置（4种常用类型）！[建议别用，有bug]</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;logger&quot;)</span></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">// 表示当前类是一个切面类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置切入点表达式</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.itheima.service.impl.*.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pt1</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注意要加()</span></span><br><span class="line">    <span class="meta">@Before(&quot;pt1()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">beforePrintLog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置通知Logger类中的beforePrintLog方法开始记录日志了...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(&quot;pt1()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">afterReturningPrintLog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;后置通知Logger类中的afterReturningPrintLog方法开始记录日志了...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(&quot;pt1()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">afterThrowingPrintLog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;异常通知Logger类中的afterThrowingPrintLog方法开始记录日志了...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;pt1()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">afterPrintLog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;最终通知Logger类中的afterPrintLog方法开始记录日志了...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行输出：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">前置通知Logger类中的beforePrintLog方法开始记录日志了...</span><br><span class="line">执行了保存</span><br><span class="line">最终通知Logger类中的afterPrintLog方法开始记录日志了...</span><br><span class="line">后置通知Logger类中的afterReturningPrintLog方法开始记录日志了...</span><br></pre></td></tr></table></figure>

<p>发现最终在后置之前执行了（异常也一样）</p>
<p>没有办法，因为Spring基于注解的AOP中，调用顺序确实有问题，实际开发中应该慎重</p>
<h3 id="Logger配置（环绕通知）"><a href="#Logger配置（环绕通知）" class="headerlink" title="Logger配置（环绕通知）"></a>Logger配置（环绕通知）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;logger&quot;)</span></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">// 表示当前类是一个切面类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置切入点表达式</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.itheima.service.impl.*.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pt1</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;pt1()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">aroundPringLog</span><span class="params">(ProceedingJoinPoint pjp)</span></span>&#123;</span><br><span class="line">        Object rtValue = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Object[] args = pjp.getArgs();<span class="comment">// 得到方法执行所需的参数</span></span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;Logger类中的aroundPringLog方法开始记录日志了...前置&quot;</span>);</span><br><span class="line"></span><br><span class="line">            rtValue = pjp.proceed(args);<span class="comment">// 明确调用业务层方法（切入点方法）</span></span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;Logger类中的aroundPringLog方法开始记录日志了...后置&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> rtValue;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Throwable t)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Logger类中的aroundPringLog方法开始记录日志了...异常&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(t);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Logger类中的aroundPringLog方法开始记录日志了...最终&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时就没有顺序问题了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Logger类中的aroundPringLog方法开始记录日志了...前置</span><br><span class="line">执行了保存</span><br><span class="line">Logger类中的aroundPringLog方法开始记录日志了...后置</span><br><span class="line">Logger类中的aroundPringLog方法开始记录日志了...最终</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>各种各样的动态规划小结</title>
    <url>/2020/03/14/dynamic-programming/</url>
    <content><![CDATA[<h1 id="填充dp数组的方式"><a href="#填充dp数组的方式" class="headerlink" title="填充dp数组的方式"></a>填充dp数组的方式</h1><p>目前碰到的题目中，一般填充dp要么是按照顺序一个一个填，要么是先全初始化为-1，缺哪个补哪个</p>
<p>以<a href="#point">最长上升子序列</a>为例</p>
<h2 id="按顺序扫描"><a href="#按顺序扫描" class="headerlink" title="按顺序扫描"></a>按顺序扫描</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            dp[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;i;k++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(nums[i]&gt;nums[k])&#123;</span><br><span class="line">                        dp[i] = Math.max(dp[i],dp[k]+<span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            max = Math.max(max,dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="按需要计算"><a href="#按需要计算" class="headerlink" title="按需要计算"></a>按需要计算</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer[] dp;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] nums;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.nums = nums;</span><br><span class="line">        dp = <span class="keyword">new</span> Integer[nums.length];</span><br><span class="line">        Arrays.fill(dp,-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            max = Math.max(max,getDp(i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDp</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(dp[i]==-<span class="number">1</span>)&#123;</span><br><span class="line">            dp[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;i;k++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(nums[i]&gt;nums[k])&#123;</span><br><span class="line">                        dp[i] = Math.max(dp[i],getDp(k)+<span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="一些想法"><a href="#一些想法" class="headerlink" title="一些想法"></a>一些想法</h3><p>在这个例子中，由于dp的每个元素都需要填充（然后找最大值），而且可以方便的按照顺序遍历，所以方法一显得简单一些</p>
<p>但是有的题目中顺序不是很好找，比如有的二维dp数组中，要填充的是三角形区域，有的是从左往右扫，有的是从上往下扫，其它一些奇怪的dp几乎找不到顺序</p>
<p>而且很多题目中并不需要把整个dp都填满，只需要得到特定一个元素即为答案，其实没必要按顺序把所有的元素都算出来</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// getDp真是非常套路</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDp</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(dp[i]==-<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="comment">// 没算过就算</span></span><br><span class="line">    <span class="comment">// 算的过程中继续getDp(k)</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 算过了直接返回</span></span><br><span class="line">  <span class="keyword">return</span> dp[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以感觉，很容易找到顺序、或者必须填满的可以用方法一，其它的直接getDp()省脑细胞</p>
<h1 id="一维"><a href="#一维" class="headerlink" title="一维 "></a>一维 <h1 id="point"></h1></h1><h2 id="例1-最长上升子序列-LeetCode-300"><a href="#例1-最长上升子序列-LeetCode-300" class="headerlink" title="例1 最长上升子序列 (LeetCode 300)"></a>例1 最长上升子序列 (LeetCode 300)</h2><a href="https://leetcode-cn.com/problems/longest-increasing-subsequence/" title="" target="">link</a>

<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>给定一个无序的整数数组，找到其中最长上升子序列的长度</p>
<h3 id="状态表示"><a href="#状态表示" class="headerlink" title="状态表示"></a>状态表示</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dp[i] 表示第i个元素（包含i）之前最大上升子序列的长度</span><br></pre></td></tr></table></figure>

<h3 id="状态转移方程"><a href="#状态转移方程" class="headerlink" title="状态转移方程"></a>状态转移方程</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dp[i] = max&#123; dp[k] + 1&#125;</span><br><span class="line">其中 0&lt;=k&lt;i 且 nums[i]&gt;nums[k]</span><br></pre></td></tr></table></figure>

<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>见：<a href="#填充dp数组的方式">填充dp数组的方式</a></p>
<h1 id="二维"><a href="#二维" class="headerlink" title="二维"></a>二维</h1><h2 id="例1-最长公共子序列问题（算法设计技巧与分析-沙特版-p130）"><a href="#例1-最长公共子序列问题（算法设计技巧与分析-沙特版-p130）" class="headerlink" title="例1 最长公共子序列问题（算法设计技巧与分析 沙特版 p130）"></a>例1 最长公共子序列问题（算法设计技巧与分析 沙特版 p130）</h2><h3 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h3><p>找两个字符串的最长公共子序列长度</p>
<p>如A=zxyxyz B=xyyzx 则最长公共子序列为xyyz</p>
<h3 id="状态表示-1"><a href="#状态表示-1" class="headerlink" title="状态表示"></a>状态表示</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">令 A = a1a2…an，B = b1b2…bn</span><br><span class="line">L[i , j] 表示 a1a2…ai 和 b1b2…bj 的最长公共子序列的长度</span><br></pre></td></tr></table></figure>

<h3 id="状态转移方程-1"><a href="#状态转移方程-1" class="headerlink" title="状态转移方程"></a>状态转移方程</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">当 A[i] == B[i]，L[i , j] = L[i-1 , j-1] + 1</span><br><span class="line">当 A[i] != B[i]，L[i , j] = max&#123; L[i-1 , j] , L[i , j-1] &#125;</span><br></pre></td></tr></table></figure>

<p>eg:<br>A = horse，B = ros<br>i为2，j为2时，o == o，L[ ho , ro ] = L[ h , r ] + 1<br>i为3，j为3时，r != s，L[ hor , ros ] = max{ L[ ho , ros ] , L[ hor , ro ] }</p>
<h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">LCS</span><span class="params">(String word1, String word2)</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">  <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[word1.length()+<span class="number">1</span>][word2.length()+<span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;word1.length()+<span class="number">1</span>;i++) &#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;word2.length()+<span class="number">1</span>;j++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(word1.charAt(i-<span class="number">1</span>)==word2.charAt(j-<span class="number">1</span>)) &#123;</span><br><span class="line">				dp[i][j] = dp[i-<span class="number">1</span>][j-<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">			&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">				dp[i][j] = Math.max(dp[i-<span class="number">1</span>][j], dp[i][j-<span class="number">1</span>]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">  </span><br><span class="line">	<span class="keyword">return</span> dp[word1.length()][word2.length()];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="例2-编辑距离-LeetCode-72"><a href="#例2-编辑距离-LeetCode-72" class="headerlink" title="例2 编辑距离 (LeetCode 72)"></a>例2 编辑距离 (LeetCode 72)</h2><a href="https://leetcode-cn.com/problems/edit-distance/" title="" target="">link</a>

<h3 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h3><p>给定两个单词 word1 和 word2，计算将 word1 转换成 word2 所使用的最少操作数</p>
<p>操作包括：</p>
<ul>
<li>插入一个字符</li>
<li>删除一个字符</li>
<li>替换一个字符</li>
</ul>
<h3 id="状态表示-2"><a href="#状态表示-2" class="headerlink" title="状态表示"></a>状态表示</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">令 A = a1a2…an，B = b1b2…bn</span><br><span class="line">L[i , j] 表示 a1a2…ai 和 b1b2…bj 的最短编辑距离</span><br></pre></td></tr></table></figure>

<p>和公共子序列一样</p>
<h3 id="状态转移方程-2"><a href="#状态转移方程-2" class="headerlink" title="状态转移方程"></a>状态转移方程</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">当 A[i] == B[i]，L[i , j] = L[i-1 , j-1]</span><br><span class="line">当 A[i] != B[i]，L[i , j] = min&#123; L[i-1 , j-1] , L[i-1 , j] , L[i , j-1] &#125; + 1</span><br><span class="line">其中，L[i-1 , j-1]代表替换操作，L[i-1 , j]代表删除操作，L[i , j-1]代表插入操作</span><br></pre></td></tr></table></figure>

<p>eg:<br>A = horse，B = ros<br>i为2，j为2时，o == o，L[ ho , ro ] = L[ h , r ]，无需继续编辑<br>i为3，j为3时，r != s，L[ hor , ros ] = min{ L[ ho , ro ] , L[ ho , ros ] , L[ hor , ro ] } + 1<br>L[ ho , ro ] + 1 代表，在ho已经编辑成ro之后，将r替换成s<br>L[ ho , ros ] + 1 代表，在ho已经编辑成ros之后，将r删除<br>L[ hor , ro ] + 1 代表，在hor已经编辑成ro之后，插入s</p>
<h3 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">minDistance</span><span class="params">(String word1, String word2)</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[word1.length()+<span class="number">1</span>][word2.length()+<span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;word1.length()+<span class="number">1</span>;i++) &#123;</span><br><span class="line">    	    dp[i][<span class="number">0</span>] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;word2.length()+<span class="number">1</span>;i++) &#123;</span><br><span class="line">    	    dp[<span class="number">0</span>][i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;word1.length()+<span class="number">1</span>;i++) &#123;</span><br><span class="line">	    	<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;word2.length()+<span class="number">1</span>;j++) &#123;</span><br><span class="line">		    	<span class="keyword">if</span>(word1.charAt(i-<span class="number">1</span>)==word2.charAt(j-<span class="number">1</span>)) &#123;</span><br><span class="line">			    	dp[i][j] = dp[i-<span class="number">1</span>][j-<span class="number">1</span>];</span><br><span class="line">    			&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">	    			<span class="keyword">int</span> min = Math.min(dp[i-<span class="number">1</span>][j], dp[i][j-<span class="number">1</span>]);</span><br><span class="line">		    		min = Math.min(min, dp[i-<span class="number">1</span>][j-<span class="number">1</span>]);</span><br><span class="line">			    	dp[i][j] = min+<span class="number">1</span>;</span><br><span class="line">			    &#125;</span><br><span class="line">    		&#125;</span><br><span class="line">	    &#125;	</span><br><span class="line">	</span><br><span class="line">	    <span class="keyword">return</span> dp[word1.length()][word2.length()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>这题dp第0行和第0列初始化为0,1,2,3…</p>
<h2 id="例3-回文子串-LeetCode-647"><a href="#例3-回文子串-LeetCode-647" class="headerlink" title="例3 回文子串 (LeetCode 647)"></a>例3 回文子串 (LeetCode 647)</h2><a href="https://leetcode-cn.com/problems/palindromic-substrings/" title="" target="">link</a>

<h3 id="描述-3"><a href="#描述-3" class="headerlink" title="描述"></a>描述</h3><p>统计给定字符串中回文子串的个数</p>
<p>如”aaa”中有”a”, “a”, “a”, “aa”, “aa”, “aaa”共6个</p>
<h3 id="状态表示-3"><a href="#状态表示-3" class="headerlink" title="状态表示"></a>状态表示</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dp[i][j] 表示字符串的第i到j位(含)是否为回文串</span><br></pre></td></tr></table></figure>

<h3 id="状态转移方程-3"><a href="#状态转移方程-3" class="headerlink" title="状态转移方程"></a>状态转移方程</h3><p>见注释</p>
<h3 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    Integer[][] dp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countSubstrings</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.length()==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        dp = <span class="keyword">new</span> Integer[s.length()][s.length()];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            Arrays.fill(dp[i],-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;s.length();j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(getDp(i,j,s)==<span class="number">1</span>)&#123;</span><br><span class="line">                    cnt++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDp</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j,String s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(dp[i][j]==-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==j)&#123;</span><br><span class="line">                <span class="comment">// &quot;a&quot;是</span></span><br><span class="line">                dp[i][j] = <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s.charAt(i)!=s.charAt(j))&#123;</span><br><span class="line">                <span class="comment">// &quot;ab&quot;、&quot;a***b&quot;不是</span></span><br><span class="line">                dp[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(j-i==<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="comment">// &quot;aa&quot;是</span></span><br><span class="line">                    dp[i][j] = <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">// &quot;a****a&quot;</span></span><br><span class="line">                    <span class="keyword">if</span>(getDp(i+<span class="number">1</span>,j-<span class="number">1</span>,s)==<span class="number">1</span>)&#123;</span><br><span class="line">                        <span class="comment">// 中间是则是</span></span><br><span class="line">                        dp[i][j] = <span class="number">1</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        dp[i][j] = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="三维"><a href="#三维" class="headerlink" title="三维"></a>三维</h1><h2 id="例1-二指输入的的最小距离-LeetCode-1320"><a href="#例1-二指输入的的最小距离-LeetCode-1320" class="headerlink" title="例1 二指输入的的最小距离 (LeetCode 1320)"></a>例1 二指输入的的最小距离 (LeetCode 1320)</h2><a href="https://leetcode-cn.com/problems/minimum-distance-to-type-a-word-using-two-fingers/" title="" target="">link</a>

<h3 id="描述-4"><a href="#描述-4" class="headerlink" title="描述"></a>描述</h3><img src="/images/2020/screencapture2020-03-14PM4.50.56.jpg" width=400>

<p>二指输入法键盘上，每个字母可用坐标表示，如P(2,3)</p>
<p>给定一个待输入字符串，计算仅用两根手指，输入该字符串的最小移动距离（起始位置任意，代价位0）</p>
<p>距离按 |x1-x2| + |y1-y2| 计算</p>
<h3 id="状态表示-4"><a href="#状态表示-4" class="headerlink" title="状态表示"></a>状态表示</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dp[i][l][r] 表示输入完第i个字母后，左手位置为l，右手位置为r</span><br><span class="line">l、r对应字母编号，如A-0,B-1</span><br></pre></td></tr></table></figure>

<h3 id="状态转移方程-4"><a href="#状态转移方程-4" class="headerlink" title="状态转移方程"></a>状态转移方程</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">记第i个字母位cur，第i-1个字母为pre</span><br><span class="line"></span><br><span class="line">1.左手移动到cur处</span><br><span class="line">	- 移动前左手在pre处，则左手必然从pre移到cur，右手可以在任意位置m</span><br><span class="line">	   dp[i][cur][m] = dp[i-1][pre][m] + dis(pre,cur);</span><br><span class="line">	- 移动前右手在pre处(即m==pre)，则左手可以从任意位置n移到cur</span><br><span class="line">	   dp[i][cur][m] = dp[i-1][n][m] + dis(n,cur);</span><br><span class="line"></span><br><span class="line">故 dp[i][cur][m] = min&#123; dp[i-1][pre][m] , dp[i-1][n][pre] &#125;</span><br><span class="line">其中m取值0~26，n取值0~26</span><br><span class="line"></span><br><span class="line">2.右手移动到cur处</span><br><span class="line">	- 移动前右手在pre处，则右手必然从pre移到cur，左手可以在任意位置m</span><br><span class="line">	   dp[i][m][cur] = dp[i-1][m][pre] + dis(pre,cur);</span><br><span class="line">	- 移动前左手在pre处(即m==pre)，则右手可以从任意位置n移到cur</span><br><span class="line">	   dp[i][m][cur] = dp[i-1][m][n] + dis(n,cur);</span><br><span class="line"></span><br><span class="line">同上，dp[i][cur][m] = min&#123; dp[i-1][pre][m] , dp[i-1][n][pre] &#125;</span><br></pre></td></tr></table></figure>

<h3 id="实现-4"><a href="#实现-4" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minimumDistance</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] words = <span class="keyword">new</span> <span class="keyword">int</span>[word.length()];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;word.length();i++)&#123;</span><br><span class="line">            words[i] = word.charAt(i) - <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[][][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[words.length][<span class="number">26</span>][<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">            <span class="comment">// 左手开始</span></span><br><span class="line">            dp[<span class="number">0</span>][words[<span class="number">0</span>]][i] = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 右手开始</span></span><br><span class="line">            dp[<span class="number">0</span>][i][words[<span class="number">0</span>]] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;words.length;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> cur = words[i];</span><br><span class="line">            <span class="keyword">int</span> pre = words[i-<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span> dis = calDis(cur,pre);</span><br><span class="line">            <span class="comment">// 至少有一只手在cur，另一只手可以在任意位置</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> m=<span class="number">0</span>;m&lt;<span class="number">26</span>;m++)&#123;</span><br><span class="line">                <span class="comment">// 右手不动，左手从pre移到cur（上一个字符是左手按的）</span></span><br><span class="line">                dp[i][cur][m] = dp[i-<span class="number">1</span>][pre][m] + dis;</span><br><span class="line">                <span class="comment">// 左手不动，右手从pre移到cur（上一个字符是右手按的）</span></span><br><span class="line">                dp[i][m][cur] = dp[i-<span class="number">1</span>][m][pre] + dis;</span><br><span class="line">                <span class="keyword">if</span>(m==pre)&#123;</span><br><span class="line">                    <span class="comment">// 移动前另一只手刚好在pre处</span></span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">0</span>;n&lt;<span class="number">26</span>;n++)&#123;</span><br><span class="line">                        <span class="keyword">int</span> dis2 = calDis(n,cur);</span><br><span class="line">                        <span class="comment">// 右手不动，左手从任意位置移到cur（上一个字符是右手按的）</span></span><br><span class="line">                        dp[i][cur][m] = Math.min(dp[i][cur][m],dp[i-<span class="number">1</span>][n][m]+dis2);</span><br><span class="line">                        <span class="comment">// 左手不动，右手从任意位置移到cur（上一个字符是左手按的）</span></span><br><span class="line">                        dp[i][m][cur] = Math.min(dp[i][m][cur],dp[i-<span class="number">1</span>][m][n]+dis2);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> min = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">int</span> last = words[words.length-<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> m=<span class="number">0</span>;m&lt;<span class="number">26</span>;m++)&#123;</span><br><span class="line">            min = Math.min(min,dp[words.length-<span class="number">1</span>][last][m]);</span><br><span class="line">            min = Math.min(min,dp[words.length-<span class="number">1</span>][m][last]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calDis</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x1 = a / <span class="number">6</span>, y1 = a % <span class="number">6</span>;</span><br><span class="line">        <span class="keyword">int</span> x2 = b / <span class="number">6</span>, y2 = b % <span class="number">6</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)(Math.abs(x1 - x2)) + (<span class="keyword">int</span>)(Math.abs(y1 - y2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="优化为二维"><a href="#优化为二维" class="headerlink" title="优化为二维"></a>优化为二维</h3><p>由于两只手是完全对称的，不需要知道具体哪只手在cur处，只要有一只在就行了</p>
<h4 id="状态表示-5"><a href="#状态表示-5" class="headerlink" title="状态表示"></a>状态表示</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dp[i][rest] 表示一只手在cur，另一只手在rest处时的最小移动距离</span><br></pre></td></tr></table></figure>

<h4 id="状态转移方程-5"><a href="#状态转移方程-5" class="headerlink" title="状态转移方程"></a>状态转移方程</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一只手从pre移动到cur，另一只手随便在哪</span><br><span class="line">dp[i][anywhere] = dp[i-1][anywhere] + dis(pre,cur)</span><br><span class="line"></span><br><span class="line">若另一只手恰好在pre处，这只手可以从任何地方移动到cur</span><br><span class="line">dp[i][pre] = dp[i-1][anywhere] + dis(anywhere,cur)</span><br></pre></td></tr></table></figure>

<h4 id="实现-5"><a href="#实现-5" class="headerlink" title="实现"></a>实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minimumDistance</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] words = <span class="keyword">new</span> <span class="keyword">int</span>[word.length()];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;word.length();i++)&#123;</span><br><span class="line">            words[i] = word.charAt(i) - <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[words.length][<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;words.length;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> cur = words[i];</span><br><span class="line">            <span class="keyword">int</span> pre = words[i-<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span> dis = calDis(cur,pre);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> m=<span class="number">0</span>;m&lt;<span class="number">26</span>;m++)&#123;</span><br><span class="line">                <span class="comment">// 一只手从pre移动到cur，另一只手随便在哪</span></span><br><span class="line">                dp[i][m] = dp[i-<span class="number">1</span>][m] + dis;</span><br><span class="line">                <span class="keyword">if</span>(m==pre)&#123;</span><br><span class="line">                    <span class="comment">// 另一只手恰好在pre处，这只手可以从任何地方移动到cur</span></span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">0</span>;n&lt;<span class="number">26</span>;n++)&#123;</span><br><span class="line">                        dp[i][m] = Math.min(dp[i][m],dp[i-<span class="number">1</span>][n]+calDis(n,cur));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> min = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> m=<span class="number">0</span>;m&lt;<span class="number">26</span>;m++)&#123;</span><br><span class="line">            min = Math.min(min,dp[words.length-<span class="number">1</span>][m]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calDis</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x1 = a / <span class="number">6</span>, y1 = a % <span class="number">6</span>;</span><br><span class="line">        <span class="keyword">int</span> x2 = b / <span class="number">6</span>, y2 = b % <span class="number">6</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)(Math.abs(x1 - x2)) + (<span class="keyword">int</span>)(Math.abs(y1 - y2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>优化前 执行用时：<strong>19 ms</strong> 内存消耗：<strong>42.6 MB</strong></p>
<p>优化后 执行用时：<strong>7 ms</strong> 内存消耗：<strong>38.1 MB</strong></p>
<p>也不多的样子…但是思路简单多了</p>
<h1 id="状态压缩"><a href="#状态压缩" class="headerlink" title="状态压缩"></a>状态压缩</h1><p>将状态用二进制串表示，二进制串以int形式作为下标</p>
<h2 id="例1-参加考试的最大学生数-LeetCode-1349"><a href="#例1-参加考试的最大学生数-LeetCode-1349" class="headerlink" title="例1 参加考试的最大学生数 (LeetCode 1349)"></a>例1 参加考试的最大学生数 (LeetCode 1349)</h2><a href="https://leetcode-cn.com/problems/maximum-students-taking-exam/" title="" target="">link</a>

<h3 id="描述-5"><a href="#描述-5" class="headerlink" title="描述"></a>描述</h3><img src="/images/2020/screencapture2020-03-13PM5.17.37.jpg">

<ul>
<li>教室里有的座位是坏的</li>
<li>学生可以看到左、右、左上、右上方向的试卷</li>
</ul>
<p>计算该考场可以容纳的一起参加考试且无法作弊的最大学生人数</p>
<h3 id="状态压缩-1"><a href="#状态压缩-1" class="headerlink" title="状态压缩"></a>状态压缩</h3><p>用一个二进制串表示一行中每个位置有没有人坐</p>
<p>如 0011 表示 无无有有，记为3</p>
<h3 id="状态表示-6"><a href="#状态表示-6" class="headerlink" title="状态表示"></a>状态表示</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dp[row][pre] 表示当row-1行的坐法为pre时，第row行及后面所有行最多坐多少人</span><br></pre></td></tr></table></figure>

<p>其中，pre初始化的大小为 1 &lt;&lt; 列数</p>
<p>如 有6列，最多 2 ^ 6 种坐法，即 1 &lt;&lt; 6</p>
<h3 id="状态转移方程-6"><a href="#状态转移方程-6" class="headerlink" title="状态转移方程"></a>状态转移方程</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dp[row][pre] = max&#123; dp[row+1][cur] + Integer.bitCount(cur) &#125;</span><br><span class="line">其中cur是row行所有可行状态</span><br></pre></td></tr></table></figure>

<p>每次需先判断坐法为 cur 是否可行</p>
<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dp[0][0] 即为 第-1行没人坐时，第1行及后面所有行最多坐的人数</span><br></pre></td></tr></table></figure>

<h3 id="实现-6"><a href="#实现-6" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">char</span>[][] seats;</span><br><span class="line">    <span class="keyword">private</span> Integer[][] dp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxStudents</span><span class="params">(<span class="keyword">char</span>[][] seats)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seats = seats;</span><br><span class="line">        dp = <span class="keyword">new</span> Integer[seats.length][<span class="number">1</span> &lt;&lt; seats[<span class="number">0</span>].length];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ret = getDp(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDp</span><span class="params">(<span class="keyword">int</span> row,<span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(row == seats.length)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(dp[row][pre] == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 遍历row行所有坐法</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;dp[<span class="number">0</span>].length;i++)&#123;</span><br><span class="line">                <span class="comment">// 检查是否符合要求</span></span><br><span class="line">                <span class="keyword">if</span>(isValid(row,pre,i))&#123;</span><br><span class="line">                    <span class="keyword">int</span> backNum = getDp(row+<span class="number">1</span>,i);     <span class="comment">// 后排能坐多少</span></span><br><span class="line">                    <span class="keyword">int</span> curNum = Integer.bitCount(i); <span class="comment">// 本排能坐多少</span></span><br><span class="line">                    res = Math.max(res,backNum+curNum);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            dp[row][pre] = res;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[row][pre];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  	<span class="comment">// 判断当第row-1行坐法为pre时，row行坐法为cur是否可行</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> pre, <span class="keyword">int</span> cur)</span> </span>&#123; <span class="comment">//... &#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue笔记04 分页</title>
    <url>/2020/03/16/note-vue-04/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/av85793766?p=4">https://www.bilibili.com/video/av85793766?p=4</a></p>
</blockquote>
<h1 id="表格与分页"><a href="#表格与分页" class="headerlink" title="表格与分页"></a>表格与分页</h1><p>在上一次的基础上添加表格和分页，在官网拷过来，放在Page1</p>
<p>注意不能直接并列放在template下，由于只能有一个根节点，外面要套一个div</p>
<h2 id="表格数据加载"><a href="#表格数据加载" class="headerlink" title="表格数据加载"></a>表格数据加载</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">    <span class="attr">fixed</span></span></span><br><span class="line"><span class="tag">    <span class="attr">prop</span>=<span class="string">&quot;id&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">label</span>=<span class="string">&quot;编号&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">width</span>=<span class="string">&quot;150&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">tableData: [&#123;</span><br><span class="line">     <span class="attr">id</span>: <span class="string">&#x27;01&#x27;</span>,</span><br><span class="line">     <span class="attr">name</span>: <span class="string">&#x27;书籍1&#x27;</span>,</span><br><span class="line">     <span class="attr">author</span>: <span class="string">&#x27;作者1&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据prop的值和数据对应</p>
<h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-pagination</span></span></span><br><span class="line"><span class="tag">     <span class="attr">background</span></span></span><br><span class="line"><span class="tag">     <span class="attr">layout</span>=<span class="string">&quot;prev, pager, next&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">:total</span>=<span class="string">&quot;1000&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>total是总记录数，默认每页10条，此时就有1000/10=100页</p>
<h2 id="绑定点击事件"><a href="#绑定点击事件" class="headerlink" title="绑定点击事件"></a>绑定点击事件</h2><p>用@current-change=”page”</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-pagination</span></span></span><br><span class="line"><span class="tag">               <span class="attr">background</span></span></span><br><span class="line"><span class="tag">               <span class="attr">layout</span>=<span class="string">&quot;prev, pager, next&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">:total</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">               @<span class="attr">current-change</span>=<span class="string">&quot;clickPage&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Script中加</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        <span class="attr">methods</span>: &#123;</span><br><span class="line">            <span class="function"><span class="title">clickPage</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                alert(<span class="number">1</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>即可看到效果</p>
<h2 id="点击翻页"><a href="#点击翻页" class="headerlink" title="点击翻页"></a>点击翻页</h2><p>把传过来的对象打印看看，发现就是页面的index</p>
<p>绑测试的数据试试，后面在连后台</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">clickPage</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">switch</span>(index)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      <span class="built_in">this</span>.tableData = [&#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&#x27;01&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;书籍1&#x27;</span>,</span><br><span class="line">        <span class="attr">author</span>: <span class="string">&#x27;作者1&#x27;</span>,</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&#x27;02&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;书籍2&#x27;</span>,</span><br><span class="line">        <span class="attr">author</span>: <span class="string">&#x27;作者2&#x27;</span>,</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&#x27;03&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;书籍3&#x27;</span>,</span><br><span class="line">        <span class="attr">author</span>: <span class="string">&#x27;作者3&#x27;</span>,</span><br><span class="line">      &#125;]</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      <span class="built_in">this</span>.tableData = [&#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&#x27;04&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;书籍4&#x27;</span>,</span><br><span class="line">        <span class="attr">author</span>: <span class="string">&#x27;作者4&#x27;</span>,</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&#x27;05&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;书籍5&#x27;</span>,</span><br><span class="line">        <span class="attr">author</span>: <span class="string">&#x27;作者5&#x27;</span>,</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&#x27;06&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;书籍6&#x27;</span>,</span><br><span class="line">        <span class="attr">author</span>: <span class="string">&#x27;作者6&#x27;</span>,</span><br><span class="line">      &#125;]</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>可以正常切换</p>
<h1 id="后端添加分页操作"><a href="#后端添加分页操作" class="headerlink" title="后端添加分页操作"></a>后端添加分页操作</h1><p>Spring Boot的Repository把分页也解决了</p>
<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookstoreServerApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    BookRepository repository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        PageRequest pageRequest = PageRequest.of(<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line">        Page&lt;Book&gt; page = repository.findAll(pageRequest);</span><br><span class="line">        System.out.println(page);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/images/2020/screencapture2020-03-16AM11.08.48.jpg">

<p>需要的东西都取出来了</p>
<p>直接调方法实现接口就可以了</p>
<p>在controller中，接收参数，调findAll，返回Page</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/findAll/&#123;page&#125;/&#123;size&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Page&lt;Book&gt; <span class="title">findAll</span><span class="params">(<span class="meta">@PathVariable(&quot;page&quot;)</span> Integer page,<span class="meta">@PathVariable(&quot;size&quot;)</span> Integer size)</span></span>&#123;</span><br><span class="line">        PageRequest pageRequest = PageRequest.of(page,size);</span><br><span class="line">        <span class="keyword">return</span> bookRepository.findAll(pageRequest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/images/2020/screencapture2020-03-16AM11.15.19.jpg">

<h1 id="对接"><a href="#对接" class="headerlink" title="对接"></a>对接</h1><p>装插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vue add axios</span><br></pre></td></tr></table></figure>

<p>axio.get().then()</p>
<p>get里是请求，then里是回调函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">created</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	axios.get(<span class="string">&#x27;http://localhost:8181/book/findAll/0/6&#x27;</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">resp</span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(resp)</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/images/2020/screencapture2020-03-16AM11.22.45.jpg">

<p>看到数据得到了</p>
<p>Page中data.content部分就是书籍数据，赋值即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">pageSize</span>:<span class="string">&#x27;6&#x27;</span>,</span><br><span class="line">    <span class="attr">total</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">tableData</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">created</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> _this = <span class="built_in">this</span></span><br><span class="line">  axios.get(<span class="string">&#x27;http://localhost:8181/book/findAll/0/6&#x27;</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">resp</span>)</span>&#123;</span><br><span class="line">    _this.tableData = resp.data.content</span><br><span class="line">    _this.pageSize = resp.data.size</span><br><span class="line">    _this.total = resp.data.totalElements</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-pagination</span></span></span><br><span class="line"><span class="tag">               <span class="attr">background</span></span></span><br><span class="line"><span class="tag">               <span class="attr">layout</span>=<span class="string">&quot;prev, pager, next&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">:page-size</span>=<span class="string">&quot;pageSize&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">:total</span>=<span class="string">&quot;total&quot;</span></span></span><br><span class="line"><span class="tag">               @<span class="attr">current-change</span>=<span class="string">&quot;clickPage&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>并且修改点击事件绑定的函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">clickPage</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> _this = <span class="built_in">this</span></span><br><span class="line">  axios.get(<span class="string">&#x27;http://localhost:8181/book/findAll/&#x27;</span>+(index-<span class="number">1</span>)+<span class="string">&#x27;/6&#x27;</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">resp</span>)</span>&#123;</span><br><span class="line">    _this.tableData = resp.data.content</span><br><span class="line">    _this.pageSize = resp.data.size</span><br><span class="line">    _this.total = resp.data.totalElements</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>就可以点击翻页了</p>
<img src="/images/2020/screencapture2020-03-16AM11.35.54.jpg">

<img src="/images/2020/screencapture2020-03-16AM11.35.57.jpg">

]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue笔记05 表单</title>
    <url>/2020/03/16/note-vue-05/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/av85793766?p=5">https://www.bilibili.com/video/av85793766?p=5</a></p>
</blockquote>
<h1 id="新增书籍页面"><a href="#新增书籍页面" class="headerlink" title="新增书籍页面"></a>新增书籍页面</h1><p>继续实现对图书完整的增删改查</p>
<p>官网找一个form表单</p>
<p>数据是双向绑定的，:model和v-model用来绑定对象</p>
<p>可以添加校验规则，通过rules绑定。校验规则中，触发事件blur指失去焦点时触发校验</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">&quot;ruleForm&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;ruleForm&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;100px&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo-ruleForm&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;书名&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;ruleForm.name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;作者&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;author&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;ruleForm.author&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;submitForm(&#x27;ruleForm&#x27;)&quot;</span>&gt;</span>立即创建<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;resetForm(&#x27;ruleForm&#x27;)&quot;</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="attr">ruleForm</span>: &#123;</span><br><span class="line">                    <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                    <span class="attr">author</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">rules</span>: &#123;</span><br><span class="line">                    <span class="attr">name</span>: [</span><br><span class="line">                        &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请输入书名&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;,</span><br><span class="line">                    ],</span><br><span class="line">                    <span class="attr">author</span>: [</span><br><span class="line">                        &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请输入作者&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;,</span><br><span class="line">                    ],</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">methods</span>: &#123;</span><br><span class="line">            <span class="function"><span class="title">submitForm</span>(<span class="params">formName</span>)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.$refs[formName].validate(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">                        alert(<span class="string">&#x27;submit!&#x27;</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">&#x27;error submit!!&#x27;</span>);</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function"><span class="title">resetForm</span>(<span class="params">formName</span>)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.$refs[formName].resetFields();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h1><p>Book的id要加自增注解，否则会出问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span>  <span class="comment">// id自增</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>controller中加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/save&quot;)</span></span><br><span class="line"><span class="comment">// @RequestBody把json格式转成java对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span></span>&#123;</span><br><span class="line">  Book result = bookRepository.save(book);</span><br><span class="line">  <span class="keyword">if</span>(result != <span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;sucess&quot;</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="对接"><a href="#对接" class="headerlink" title="对接"></a>对接</h1><p>传Book对象，直接追加就行了，不需要拼接</p>
<p>提示信息可以再去官网找一个合适的拿来用</p>
<p>添加成功后跳转到查询页面，用router.push</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">submitForm</span>(<span class="params">formName</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> _this = <span class="built_in">this</span></span><br><span class="line">  <span class="built_in">this</span>.$refs[formName].validate(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">      axios.post(<span class="string">&#x27;http://localhost:8181/book/save&#x27;</span>,<span class="built_in">this</span>.ruleForm).then(<span class="function"><span class="keyword">function</span>(<span class="params">resp</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(resp.data == <span class="string">&#x27;success&#x27;</span>)&#123;</span><br><span class="line">          _this.$message(&#123;</span><br><span class="line">            <span class="attr">message</span>: <span class="string">&#x27;《&#x27;</span>+_this.ruleForm.name+<span class="string">&#x27;》&#x27;</span>+<span class="string">&#x27;添加成功&#x27;</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span></span><br><span class="line">          &#125;)</span><br><span class="line">          _this.$router.push(<span class="string">&#x27;/book-manage&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>发现一个小问题</p>
<p>这样弹出顶部提示之后直接切换页面，左侧的选中状态有问题，原页面和新页面都选中了</p>
<p>但是用需要点击确定的提示框之后切回去，选中状态就没有问题</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">_this.$alert(<span class="string">&#x27;添加成功&#x27;</span>,<span class="string">&#x27;MSG&#x27;</span>,&#123;</span><br><span class="line">  <span class="attr">confirmButtonTest</span>: <span class="string">&#x27;OK&#x27;</span>,</span><br><span class="line">  <span class="attr">callback</span>: <span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.$message(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;info&#x27;</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">`action: <span class="subst">$&#123;action&#125;</span>`</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">_this.$router.push(<span class="string">&#x27;/book-manage&#x27;</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue笔记06 修改和删除</title>
    <url>/2020/03/17/note-vue-06/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/av85793766?p=6">https://www.bilibili.com/video/av85793766?p=6</a></p>
</blockquote>
<h1 id="跳转到修改页面"><a href="#跳转到修改页面" class="headerlink" title="跳转到修改页面"></a>跳转到修改页面</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;template slot-scope=<span class="string">&quot;scope&quot;</span>&gt;</span><br><span class="line">  &lt;el-button <span class="meta">@click</span>=<span class="string">&quot;edit(scope.row)&quot;</span> type=<span class="string">&quot;text&quot;</span> size=<span class="string">&quot;small&quot;</span>&gt;修改&lt;/el-button&gt;</span><br><span class="line">  &lt;el-button type=<span class="string">&quot;text&quot;</span> size=<span class="string">&quot;small&quot;</span>&gt;删除&lt;/el-button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>@click中绑定点击事件</p>
<p>这里跳转用this而不需要_this，因为不在回调函数中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">edit(row) &#123;</span><br><span class="line">	this.$router.push(&#x27;/book-update&#x27;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>DEBUG</strong></p>
<p>这里跳转过去之后，整页都是修改页面，左侧菜单没有了</p>
<p>和源码对比，发现左侧菜单的代码放在App.vue而不是Index.vue 我失忆了？</p>
<p>不过也就可以解释了，加载管理、新增和修改替换的是main里的Index部分，不管怎么替换菜单都还在</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+------------------------------------+ </span><br><span class="line">| App                                |  </span><br><span class="line">| +------+-------------------------+ | </span><br><span class="line">| | menu | main                    | |  </span><br><span class="line">| |      | +---------------------+ | |  </span><br><span class="line">| |      | | Index               | | | </span><br><span class="line">| |      | +---------------------+ | |  </span><br><span class="line">| +------+-------------------------+ | </span><br><span class="line">+------------------------------------+ </span><br></pre></td></tr></table></figure>

<p>而我的把menu写在Index里面，管理和新增替换的是Index里的main区域，menu还在，而修改直接把Index换掉了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+------------------------------------+ </span><br><span class="line">| App                                |  </span><br><span class="line">| +--------------------------------+ | </span><br><span class="line">| | Index                          | |  </span><br><span class="line">| | +------+---------------------+ | |  </span><br><span class="line">| | | menu | main                | | | </span><br><span class="line">| | +------+---------------------+ | |  </span><br><span class="line">| +--------------------------------+ | </span><br><span class="line">+------------------------------------+ </span><br></pre></td></tr></table></figure>

<p>改过来之后页面就正常了</p>
<hr>
<h1 id="修改页面"><a href="#修改页面" class="headerlink" title="修改页面"></a>修改页面</h1><p>先把新增界面表单复制过去</p>
<p>在created方法中调后台数据，显示到页面</p>
<p>首先需要获取当前的id，BookManage页面在router中带参数穿过去</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">edit</span>(<span class="params">row</span>)</span> &#123;</span><br><span class="line">  <span class="comment">// this.$router.push(&#x27;/book-update&#x27;)</span></span><br><span class="line">  <span class="built_in">this</span>.$router.push(&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/book-update&#x27;</span>,</span><br><span class="line">    <span class="attr">query</span>: &#123;</span><br><span class="line">    	<span class="attr">id</span>: row.id</span><br><span class="line">  	&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>BookUpdate页面中接收</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  <span class="function"><span class="title">submitForm</span>(<span class="params">formName</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;,</span><br><span class="line">    <span class="function"><span class="title">resetForm</span>(<span class="params">formName</span>)</span> &#123;</span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">created</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 是route不是router!</span></span><br><span class="line">    alert(<span class="built_in">this</span>.$route.query.id)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里created()在methods外面</p>
<h1 id="获取待修改修改图书信息"><a href="#获取待修改修改图书信息" class="headerlink" title="获取待修改修改图书信息"></a>获取待修改修改图书信息</h1><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><p>Repository的findById()返回的是Option类，相当于把Book又包了一层，再用get()得到Book对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">findById</span><span class="params">()</span></span>&#123;</span><br><span class="line">  Book book = repository.findById(<span class="number">1</span>).get();</span><br><span class="line">  System.out.println(book);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先测试一下，接口没有问题，再写对外提供的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/findById/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Book <span class="title">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> bookRepository.findById(id).get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="对接"><a href="#对接" class="headerlink" title="对接"></a>对接</h2><p>获取数据并绑定到表单上</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">created</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> _this = <span class="built_in">this</span></span><br><span class="line">  axios.get(<span class="string">&#x27;http://localhost:8181/book/findById/&#x27;</span>+<span class="built_in">this</span>.$route.query.id).then(<span class="function"><span class="keyword">function</span>(<span class="params">resp</span>)</span>&#123;</span><br><span class="line">    _this.ruleForm = resp.data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>表单加一个id属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;编号&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;ruleForm.id&quot;</span> <span class="attr">readonly</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>不可修改，加readonly，不需要校验，删prop=”id”</p>
<p>下面ruleForm也要加对应的id</p>
<h1 id="修改图书"><a href="#修改图书" class="headerlink" title="修改图书"></a>修改图书</h1><p>后端写一个修改方法</p>
<p>repository没有update方法，save可以用于修改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PutMapping(&quot;/update&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span></span>&#123;</span><br><span class="line">  Book result = bookRepository.save(book);</span><br><span class="line">  <span class="keyword">if</span>(result != <span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>内容和save是一样的，但是为了符合RESTful风格，新写一个PutMapping的</p>
<p>前端submitForm里面稍微修改一下，post改成put，url改一下，message改成修改成功</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.put(<span class="string">&#x27;http://localhost:8181/book/update&#x27;</span>,<span class="built_in">this</span>.ruleForm).then(<span class="function"><span class="keyword">function</span>(<span class="params">resp</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(resp.data == <span class="string">&#x27;success&#x27;</span>)&#123;</span><br><span class="line">    _this.$message(&#123;</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;《&#x27;</span>+_this.ruleForm.name+<span class="string">&#x27;》&#x27;</span>+<span class="string">&#x27;修改成功&#x27;</span>,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    _this.$router.push(<span class="string">&#x27;/book-manage&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="删除图书"><a href="#删除图书" class="headerlink" title="删除图书"></a>删除图书</h1><p>后端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping(&quot;/deleteById/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">  bookRepository.deleteById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>button绑一个事件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;deleteBook(scope.row)&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>不能叫delete，和关键字冲突</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">deleteBook</span>(<span class="params">row</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> _this = <span class="built_in">this</span></span><br><span class="line">  axios.delete(<span class="string">&#x27;http://localhost:8181/book/deleteById/&#x27;</span>+row.id).then(<span class="function"><span class="keyword">function</span>(<span class="params">resp</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 这里没有管返回信息，也可以判断状态，200就是成功</span></span><br><span class="line">    _this.$alert(<span class="string">&#x27;《&#x27;</span>+row.name+<span class="string">&#x27;》删除成功！&#x27;</span>, <span class="string">&#x27;消息&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">confirmButtonText</span>: <span class="string">&#x27;确定&#x27;</span>,</span><br><span class="line">      <span class="attr">callback</span>: <span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 刷新</span></span><br><span class="line">        <span class="built_in">window</span>.location.reload()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>完整的增删改查就实现了～</p>
<h1 id="修改菜单"><a href="#修改菜单" class="headerlink" title="修改菜单"></a>修改菜单</h1><p>由于加了一个路由，而菜单是根据路由动态加载的，会把配置的路由全部遍历出来，于是菜单左侧就多了一个</p>
<p>可以添加一个属性来判断，show是true就遍历，false就不遍历</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;图书管理&#x27;</span>,</span><br><span class="line">    <span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">component</span>:Index,</span><br><span class="line">    <span class="attr">redirect</span>:<span class="string">&#x27;book-manage&#x27;</span>,</span><br><span class="line">    <span class="attr">children</span>:[</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/book-manage&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;查询图书&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: BookManage</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/add-book&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;添加图书&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: AddBook</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/book-update&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;修改&#x27;</span>,</span><br><span class="line">    <span class="attr">show</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">component</span>: BookUpdate</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>App.vue中通过v-if=”item.show”判断</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-container</span> <span class="attr">style</span>=<span class="string">&quot;height: 500px; border: 1px solid #eee&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-aside</span> <span class="attr">width</span>=<span class="string">&quot;200px&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: rgb(238, 241, 246)&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            这里添加router标签，el-menu-item的index就会被作为router路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-menu</span> <span class="attr">router</span> <span class="attr">:default-openeds</span>=<span class="string">&quot;[&#x27;0&#x27;,&#x27;1&#x27;]&quot;</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--          show属性为true则遍历--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-submenu</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in $router.options.routes&quot;</span> <span class="attr">:index</span>=<span class="string">&quot;index+&#x27;&#x27;&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;item.show&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-setting&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--                    条件判断当前路径是否等于index，更改选中状态，主要是在初始化时增加默认的选中状态--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">v-for</span>=<span class="string">&quot;item2 in item.children&quot;</span> <span class="attr">:index</span>=<span class="string">&quot;item2.path&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;$route.path==item2.path ? &#x27;is-active&#x27; : &#x27;&#x27;&quot;</span>&gt;</span>&#123;&#123;item2.name&#125;&#125;<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-submenu</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-menu</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-aside</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-main</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            上面又index确定的router被显示在这里，也就是main区域中--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-main</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>完工！</p>
<img src="/images/2020/screencapture2020-03-17PM5.05.48.jpg">]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue笔记07 总结</title>
    <url>/2020/03/17/note-vue-07/</url>
    <content><![CDATA[<p>这个教程6p学完了～总结一下这个图书增删改查的demo</p>
<blockquote>
<p><a href="https://www.bilibili.com/video/av85793766">https://www.bilibili.com/video/av85793766</a></p>
</blockquote>
<hr>
<p><a href="/2020/03/06/note-vue-02/">工程创建</a>略<br>数据库部分略</p>
<h1 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h1><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><img src="/images/2020/screencapture2020-03-17PM5.44.27.jpg" width=400>

<ul>
<li>Book 实体类</li>
<li>BookRepository 继承JpaRepository，提供数据库增删改查接口</li>
<li>BookHandler 相应请求</li>
<li>BookRepositoryTest 测试BookRepository的方法</li>
</ul>
<h2 id="Book"><a href="#Book" class="headerlink" title="Book"></a>Book</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coconutnut.bookstore_server.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.Entity;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GenerationType;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span> <span class="comment">// 根据类名和表名对应绑定</span></span><br><span class="line"><span class="meta">@Data</span>   <span class="comment">// 自动生成get/set</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span> <span class="comment">// 主键</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span> <span class="comment">// id自增</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="BookRepository"><a href="#BookRepository" class="headerlink" title="BookRepository"></a>BookRepository</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coconutnut.bookstore_server.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.coconutnut.bookstore_server.entity.Book;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;&gt;中第一个是实体类，第二个是主键类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Book</span>,<span class="title">Integer</span>&gt; </span>&#123; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>JpaRepository中有常用的增删改查方法，可以直接调用</p>
<p>&amp; 通常流程：先在Test中测试方法，没问题在Controller中写对外接口，浏览器看一下返回值对不对，最后写前端</p>
<p>Spring工程自带一个测试类BookstoreServerApplicationTests<br>自己创建可在接口名上右键-&gt;Go To-&gt;Test-&gt;Create New Test<br>生成的测试类加@SpringBootTest，要测试的类@Autowired自动注入，写的方法加@Test即可</p>
<h2 id="BookHandler"><a href="#BookHandler" class="headerlink" title="BookHandler"></a>BookHandler</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coconutnut.bookstore_server.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.coconutnut.bookstore_server.entity.Book;</span><br><span class="line"><span class="keyword">import</span> com.coconutnut.bookstore_server.repository.BookRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Page;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.PageRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/book&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookRepository bookRepository;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查所有书</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/findAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查一页</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/findAll/&#123;page&#125;/&#123;size&#125;&quot;)</span></span><br><span class="line">    <span class="comment">// @PathVariable获取参数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Page&lt;Book&gt; <span class="title">findAll</span><span class="params">(<span class="meta">@PathVariable(&quot;page&quot;)</span> Integer page,<span class="meta">@PathVariable(&quot;size&quot;)</span> Integer size)</span></span>&#123;</span><br><span class="line">        PageRequest pageRequest = PageRequest.of(page,size);</span><br><span class="line">        <span class="keyword">return</span> bookRepository.findAll(pageRequest);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新增</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="comment">// @RequestBody把json格式转成java对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span></span>&#123;</span><br><span class="line">        Book result = bookRepository.save(book);</span><br><span class="line">        <span class="keyword">if</span>(result != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查一个</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/findById/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Book <span class="title">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookRepository.findById(id).get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/update&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span></span>&#123;</span><br><span class="line">        Book result = bookRepository.save(book);</span><br><span class="line">        <span class="keyword">if</span>(result != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/deleteById/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">        bookRepository.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h1><h2 id="项目结构-1"><a href="#项目结构-1" class="headerlink" title="项目结构"></a>项目结构</h2><img src="/images/2020/screencapture2020-03-17PM5.46.22.jpg"  width=400>

<ul>
<li>Index.js 配路由</li>
<li>App.vue 常驻的页面</li>
<li>其它vue 嵌入的页面</li>
</ul>
<h2 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h2><p>配置页面的从属关系与路径</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Index <span class="keyword">from</span> <span class="string">&quot;../views/Index&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> BookManage <span class="keyword">from</span> <span class="string">&#x27;../views/BookManage&#x27;</span></span><br><span class="line"><span class="keyword">import</span> AddBook <span class="keyword">from</span> <span class="string">&#x27;../views/AddBook&#x27;</span></span><br><span class="line"><span class="keyword">import</span> BookUpdate <span class="keyword">from</span> <span class="string">&#x27;../views/BookUpdate&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;图书管理&#x27;</span>,</span><br><span class="line">    <span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">component</span>:Index,</span><br><span class="line">    <span class="attr">redirect</span>:<span class="string">&#x27;book-manage&#x27;</span>,</span><br><span class="line">    <span class="attr">children</span>:[</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/book-manage&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;查询图书&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: BookManage</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/add-book&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;添加图书&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: AddBook</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/book-update&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;修改&#x27;</span>,</span><br><span class="line">    <span class="attr">show</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">component</span>: BookUpdate</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">  <span class="attr">base</span>: process.env.BASE_URL,</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>

<h2 id="页面嵌套与跳转"><a href="#页面嵌套与跳转" class="headerlink" title="页面嵌套与跳转"></a>页面嵌套与跳转</h2><p>App.vue中template结构</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-container</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-aside</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-menu</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-menu</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-aside</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-main</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-main</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+------------------------------------+ </span><br><span class="line">| App                                |  </span><br><span class="line">| +------+-------------------------+ | </span><br><span class="line">| | menu | main                    | |  </span><br><span class="line">| |      | +---------------------+ | |  </span><br><span class="line">| |      | | router-view         | | | </span><br><span class="line">| |      | +---------------------+ | |  </span><br><span class="line">| +------+-------------------------+ | </span><br><span class="line">+------------------------------------+</span><br></pre></td></tr></table></figure>

<p>左侧aside区域中放menu，右侧main中由router动态加载</p>
<p>Index.vue中template结构</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Index.vue中其它都是默认的</p>
<p>根据index.js中的配置，’/‘就加载Index.vue到App.vue的router-view区域，再’/book-manage’加载Index.vue的router-view区域。而Index重定向到book-manage，于是’http:localhost:4000/‘默认就显示了book-manage</p>
<p>而’/book-update’加载Update.vue到App.vue的router-view区域</p>
<p>故显示所有子页面的时候都可以看到菜单</p>
<h2 id="根据routes配置动态加载菜单栏-gt-App-vue"><a href="#根据routes配置动态加载菜单栏-gt-App-vue" class="headerlink" title="根据routes配置动态加载菜单栏 -&gt; App.vue"></a>根据routes配置动态加载菜单栏 -&gt; App.vue</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-container</span> <span class="attr">style</span>=<span class="string">&quot;height: 500px; border: 1px solid #eee&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-aside</span> <span class="attr">width</span>=<span class="string">&quot;200px&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: rgb(238, 241, 246)&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            这里添加router标签，el-menu-item的index就会被作为router路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-menu</span> <span class="attr">router</span> <span class="attr">:default-openeds</span>=<span class="string">&quot;[&#x27;0&#x27;,&#x27;1&#x27;]&quot;</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--          show属性为true则遍历--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-submenu</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in $router.options.routes&quot;</span> <span class="attr">:index</span>=<span class="string">&quot;index+&#x27;&#x27;&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;item.show&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-setting&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--                    条件判断当前路径是否等于index，更改选中状态，主要是在初始化时增加默认的选中状态--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">v-for</span>=<span class="string">&quot;item2 in item.children&quot;</span> <span class="attr">:index</span>=<span class="string">&quot;item2.path&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;$route.path==item2.path ? &#x27;is-active&#x27; : &#x27;&#x27;&quot;</span>&gt;</span>&#123;&#123;item2.name&#125;&#125;<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-submenu</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-menu</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-aside</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-main</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            上面又index确定的router被显示在这里，也就是main区域中--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-main</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">name</span>: <span class="string">&#x27;app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-id">#app</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">font-family</span>: <span class="string">&#x27;Avenir&#x27;</span>, Helvetica, Arial, sans-serif;</span></span><br><span class="line"><span class="css">  -webkit-<span class="attribute">font-smoothing</span>: antialiased;</span></span><br><span class="line"><span class="css">  -moz-osx-<span class="attribute">font-smoothing</span>: grayscale;</span></span><br><span class="line"><span class="css">  <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">  <span class="attribute">color</span>: <span class="number">#2c3e50</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">margin-top</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="表单显示所有书籍、翻页、删除-gt-BookManage-vue"><a href="#表单显示所有书籍、翻页、删除-gt-BookManage-vue" class="headerlink" title="表单显示所有书籍、翻页、删除 -&gt; BookManage.vue"></a>表单显示所有书籍、翻页、删除 -&gt; BookManage.vue</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:data</span>=<span class="string">&quot;tableData&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">border</span></span></span><br><span class="line"><span class="tag">            <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">                <span class="attr">fixed</span></span></span><br><span class="line"><span class="tag">                <span class="attr">prop</span>=<span class="string">&quot;id&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">label</span>=<span class="string">&quot;编号&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">width</span>=<span class="string">&quot;150&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">                <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">label</span>=<span class="string">&quot;书名&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">width</span>=<span class="string">&quot;150&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">                <span class="attr">prop</span>=<span class="string">&quot;author&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">label</span>=<span class="string">&quot;作者&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">width</span>=<span class="string">&quot;150&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                fixed=&quot;right&quot;--&gt;</span></span><br><span class="line">                label=&quot;操作&quot;</span><br><span class="line">                width=&quot;100&quot;&gt;</span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;edit(scope.row)&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;deleteBook(scope.row)&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-pagination</span></span></span><br><span class="line"><span class="tag">            <span class="attr">background</span></span></span><br><span class="line"><span class="tag">            <span class="attr">layout</span>=<span class="string">&quot;prev, pager, next&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:page-size</span>=<span class="string">&quot;pageSize&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:total</span>=<span class="string">&quot;total&quot;</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">current-change</span>=<span class="string">&quot;clickPage&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 删除</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">deleteBook</span>(<span class="params">row</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">const</span> _this = <span class="built_in">this</span></span></span><br><span class="line"><span class="javascript">                axios.delete(<span class="string">&#x27;http://localhost:8181/book/deleteById/&#x27;</span>+row.id).then(<span class="function"><span class="keyword">function</span>(<span class="params">resp</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 这里没有管返回信息，也可以判断状态，200就是成功</span></span></span><br><span class="line"><span class="javascript">                    _this.$alert(<span class="string">&#x27;《&#x27;</span>+row.name+<span class="string">&#x27;》删除成功！&#x27;</span>, <span class="string">&#x27;消息&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">confirmButtonText</span>: <span class="string">&#x27;确定&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">callback</span>: <span class="function"><span class="params">action</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="comment">// 刷新</span></span></span><br><span class="line"><span class="javascript">                            <span class="built_in">window</span>.location.reload()</span></span><br><span class="line"><span class="javascript">                        &#125;</span></span><br><span class="line"><span class="javascript">                    &#125;)</span></span><br><span class="line"><span class="javascript">                &#125;)</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 跳转到编辑</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">edit</span>(<span class="params">row</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// this.$router.push(&#x27;/book-update&#x27;)</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$router.push(&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">path</span>: <span class="string">&#x27;/book-update&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">query</span>: &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">id</span>: row.id</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;)</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 翻页</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">clickPage</span>(<span class="params">index</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">const</span> _this = <span class="built_in">this</span></span></span><br><span class="line"><span class="javascript">                axios.get(<span class="string">&#x27;http://localhost:8181/book/findAll/&#x27;</span>+(index-<span class="number">1</span>)+<span class="string">&#x27;/6&#x27;</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">resp</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    _this.tableData = resp.data.content</span></span><br><span class="line"><span class="javascript">                    _this.pageSize = resp.data.size</span></span><br><span class="line"><span class="javascript">                    _this.total = resp.data.totalElements</span></span><br><span class="line"><span class="javascript">                &#125;)</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">pageSize</span>:<span class="string">&#x27;6&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">total</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">tableData</span>:<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 加载书籍信息到表单</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">created</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> _this = <span class="built_in">this</span></span></span><br><span class="line"><span class="javascript">            axios.get(<span class="string">&#x27;http://localhost:8181/book/findAll/0/6&#x27;</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">resp</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                _this.tableData = resp.data.content</span></span><br><span class="line"><span class="javascript">                _this.pageSize = resp.data.size</span></span><br><span class="line"><span class="javascript">                _this.total = resp.data.totalElements</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="新增-gt-AddBook-vue"><a href="#新增-gt-AddBook-vue" class="headerlink" title="新增 -&gt; AddBook.vue"></a>新增 -&gt; AddBook.vue</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    model设置数据绑定，rules设置校验规则，ref是名字，在提交时使用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-form</span> <span class="attr">style</span>=<span class="string">&quot;width: 60%&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;ruleForm&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;ruleForm&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;100px&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo-ruleForm&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;书名&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;ruleForm.name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;作者&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;author&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;ruleForm.author&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;submitForm(&#x27;ruleForm&#x27;)&quot;</span>&gt;</span>立即创建<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;resetForm(&#x27;ruleForm&#x27;)&quot;</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">ruleForm</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">author</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="attr">rules</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">name</span>: [</span></span><br><span class="line"><span class="javascript">                        &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请输入书名&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;,</span></span><br><span class="line"><span class="javascript">                    ],</span></span><br><span class="line"><span class="javascript">                    <span class="attr">author</span>: [</span></span><br><span class="line"><span class="javascript">                        &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请输入作者&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;,</span></span><br><span class="line"><span class="javascript">                    ],</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 提交表单</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">submitForm</span>(<span class="params">formName</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">const</span> _this = <span class="built_in">this</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$refs[formName].validate(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (valid) &#123;</span></span><br><span class="line"><span class="javascript">                        axios.post(<span class="string">&#x27;http://localhost:8181/book/save&#x27;</span>,<span class="built_in">this</span>.ruleForm).then(<span class="function"><span class="keyword">function</span>(<span class="params">resp</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">if</span>(resp.data == <span class="string">&#x27;success&#x27;</span>)&#123;</span></span><br><span class="line"><span class="javascript">                                _this.$message(&#123;</span></span><br><span class="line"><span class="javascript">                                    <span class="attr">message</span>: <span class="string">&#x27;《&#x27;</span>+_this.ruleForm.name+<span class="string">&#x27;》&#x27;</span>+<span class="string">&#x27;添加成功&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                                    <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span></span></span><br><span class="line"><span class="javascript">                                &#125;)</span></span><br><span class="line"><span class="javascript">                                _this.$router.push(<span class="string">&#x27;/book-manage&#x27;</span>)</span></span><br><span class="line"><span class="javascript">                            &#125;</span></span><br><span class="line"><span class="javascript">                        &#125;)</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;);</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 重置表单</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">resetForm</span>(<span class="params">formName</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$refs[formName].resetFields();</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="修改-gt-BookUpdate-vue"><a href="#修改-gt-BookUpdate-vue" class="headerlink" title="修改 -&gt;  BookUpdate.vue"></a>修改 -&gt;  BookUpdate.vue</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    model设置数据绑定，rules设置校验规则，ref是名字，在提交时使用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">style</span>=<span class="string">&quot;width: 60%&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;ruleForm&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;ruleForm&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;100px&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo-ruleForm&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;编号&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;ruleForm.id&quot;</span> <span class="attr">readonly</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;书名&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;ruleForm.name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;作者&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;author&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;ruleForm.author&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;submitForm(&#x27;ruleForm&#x27;)&quot;</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;submitForm(&#x27;ruleForm&#x27;)&quot;</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">ruleForm</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">id</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">author</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="attr">rules</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">name</span>: [</span></span><br><span class="line"><span class="javascript">                        &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请输入书名&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;,</span></span><br><span class="line"><span class="javascript">                    ],</span></span><br><span class="line"><span class="javascript">                    <span class="attr">author</span>: [</span></span><br><span class="line"><span class="javascript">                        &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请输入作者&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;,</span></span><br><span class="line"><span class="javascript">                    ],</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 提交表单</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">submitForm</span>(<span class="params">formName</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">const</span> _this = <span class="built_in">this</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$refs[formName].validate(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (valid) &#123;</span></span><br><span class="line"><span class="javascript">                        axios.put(<span class="string">&#x27;http://localhost:8181/book/update&#x27;</span>,<span class="built_in">this</span>.ruleForm).then(<span class="function"><span class="keyword">function</span>(<span class="params">resp</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">if</span>(resp.data == <span class="string">&#x27;success&#x27;</span>)&#123;</span></span><br><span class="line"><span class="javascript">                                _this.$message(&#123;</span></span><br><span class="line"><span class="javascript">                                    <span class="attr">message</span>: <span class="string">&#x27;《&#x27;</span>+_this.ruleForm.name+<span class="string">&#x27;》&#x27;</span>+<span class="string">&#x27;修改成功&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                                    <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span></span></span><br><span class="line"><span class="javascript">                                &#125;)</span></span><br><span class="line"><span class="javascript">                                _this.$router.push(<span class="string">&#x27;/book-manage&#x27;</span>)</span></span><br><span class="line"><span class="javascript">                            &#125;</span></span><br><span class="line"><span class="javascript">                        &#125;)</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;);</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">resetForm</span>(<span class="params">formName</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$refs[formName].resetFields();</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 填入初始信息</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">created</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 是route不是router!</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// alert(this.$route.query.id)</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> _this = <span class="built_in">this</span></span></span><br><span class="line"><span class="javascript">            axios.get(<span class="string">&#x27;http://localhost:8181/book/findById/&#x27;</span>+<span class="built_in">this</span>.$route.query.id).then(<span class="function"><span class="keyword">function</span>(<span class="params">resp</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                _this.ruleForm = resp.data</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="一点想法"><a href="#一点想法" class="headerlink" title="一点想法"></a>一点想法</h1><p>Spring Boot + Vue 真是好方便</p>
<p>后端基本不用写什么，要用的方法都有</p>
<p>前端要什么模版直接在element ui里找来用</p>
<p>跟着敲这个demo的时候碰到的坑基本都是和路由有关的，router转来转去有点晕</p>
<p>但是 总之</p>
<p>我真的从来没有在哪个教程听见这么多“就行了”、“自动”、“不用管了”…极度舒适！有架子不用徒手爬墙真好</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>记录几个让我心动的设计</title>
    <url>/2020/03/18/aha/</url>
    <content><![CDATA[<h1 id="Trello的列表完成最后一个时会扭动～还有不同的摇摆方式！"><a href="#Trello的列表完成最后一个时会扭动～还有不同的摇摆方式！" class="headerlink" title="Trello的列表完成最后一个时会扭动～还有不同的摇摆方式！"></a>Trello的列表完成最后一个时会扭动～还有不同的摇摆方式！</h1><img src="/images/2020/Mar-18-2020 22-56-56.gif" width=400>
<img src="/images/2020/Mar-18-2020 22-56-19.gif" width=400>
<img src="/images/2020/Mar-18-2020 22-57-26.gif" width=400>
啊Trello我的❤️！

<h1 id="企鹅岛里的企鹅会把花田里的花叼出来种～"><a href="#企鹅岛里的企鹅会把花田里的花叼出来种～" class="headerlink" title="企鹅岛里的企鹅会把花田里的花叼出来种～"></a>企鹅岛里的企鹅会把花田里的花叼出来种～</h1><img src="/images/2020/20200318_233535.gif" width=300>
天呐我需要一个高清的录屏app -MARK-]]></content>
      <categories>
        <category>Memo</category>
      </categories>
  </entry>
  <entry>
    <title>Spring笔记11 Spring中的JdbcTemplate</title>
    <url>/2020/03/19/note-spring-11/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/av47952931">https://www.bilibili.com/video/av47952931</a></p>
<p>p67~71</p>
</blockquote>
<p>持久层总图</p>
<img src="/images/2020/20200319.jpg">

<p>Spring中的JdbcTemplate</p>
<p>作用：和数据库交互，实现对表的CRUD操作</p>
<h1 id="JdbcTemplate与DbUtils"><a href="#JdbcTemplate与DbUtils" class="headerlink" title="JdbcTemplate与DbUtils"></a>JdbcTemplate与DbUtils</h1><p>DbUtils是Apache提供的一个对JDBC进行简单封装的开源工具类库，主要有</p>
<ul>
<li>org.apache.commons.dbutils.QueryRunner — 核心类，执行SQL查询以处理结果集（线程安全）</li>
<li>org.apache.commons.dbutils.ResultSetHandler — 结果集封装器</li>
<li>org.apache.commons.dbutils.DbUtils — 提供如加载驱动、关闭连接、事务提交、回滚等常规工作的工具类</li>
</ul>
<p>JdbcTemplate是Spring提供的一个对象，是对原始Jdbc API对象的简单封装，基本方法：</p>
<ul>
<li>execute方法</li>
<li>update与batchUpdate方法</li>
<li>query与queryXXX方法</li>
<li>call方法</li>
</ul>
<p>DbUtils导的依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        dbutils--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        mysql驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        jdbc连接池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>JdbcTemplate导的依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        JdbcTemplate--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        和事务相关--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        mysql驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="表的实体类"><a href="#表的实体类" class="headerlink" title="表的实体类"></a>表的实体类</h1><p>实现Serializable接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Float money;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get set toString</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="JdbcTemplate的最基本用法"><a href="#JdbcTemplate的最基本用法" class="headerlink" title="JdbcTemplate的最基本用法"></a>JdbcTemplate的最基本用法</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateDemo1</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 准备数据源：spring的内置数据源</span></span><br><span class="line">        DriverManagerDataSource ds = <span class="keyword">new</span> DriverManagerDataSource();</span><br><span class="line">        ds.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        ds.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/groot?characterEncoding=utf8&quot;</span>);</span><br><span class="line">        ds.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        ds.setPassword(<span class="string">&quot;iamgroot&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.创建JdbcTemplate对象</span></span><br><span class="line">        JdbcTemplate jt = <span class="keyword">new</span> JdbcTemplate();</span><br><span class="line">        <span class="comment">// 给jt设置数据源</span></span><br><span class="line">        jt.setDataSource(ds);</span><br><span class="line">        <span class="comment">// 2.执行操作</span></span><br><span class="line">        jt.execute(<span class="string">&quot;insert into account(name,money) values(&#x27;ccc&#x27;,1000)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行，没有问题</p>
<img src="/images/2020/screencapture2020-03-19PM3.57.43.jpg" width=200>

<p>但是这样写数据库的配置都写死了，而且用了很多set、new</p>
<p>都可以通过IoC配置</p>
<h2 id="IoC配置"><a href="#IoC配置" class="headerlink" title="IoC配置"></a>IoC配置</h2><p>这里dataSource暂时先用Spring内置的（id=”dataSource”）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateDemo2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取容器</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.获取对象</span></span><br><span class="line">        JdbcTemplate jt = ac.getBean(<span class="string">&quot;jdbcTemplate&quot;</span>,JdbcTemplate.class);</span><br><span class="line">        <span class="comment">// 3.执行操作</span></span><br><span class="line">        jt.execute(<span class="string">&quot;insert into account(name,money)values(&#x27;ddd&#x27;,2222)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也没问题</p>
<img src="/images/2020/screencapture2020-03-19PM4.04.17.jpg" width=200>

<h1 id="使用JdbcTemplate实现基本的CRUD"><a href="#使用JdbcTemplate实现基本的CRUD" class="headerlink" title="使用JdbcTemplate实现基本的CRUD"></a>使用JdbcTemplate实现基本的CRUD</h1><p>增删改都是update方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 保存</span></span><br><span class="line">jt.update(<span class="string">&quot;insert into account(name,money)values(?,?)&quot;</span>,<span class="string">&quot;eee&quot;</span>,<span class="number">3333f</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新</span></span><br><span class="line">jt.update(<span class="string">&quot;update account set name=?,money=? where id=?&quot;</span>,<span class="string">&quot;test&quot;</span>,<span class="number">4567</span>,<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line">jt.update(<span class="string">&quot;delete from account where id=?&quot;</span>,<span class="number">8</span>);</span><br></pre></td></tr></table></figure>

<p>查询是query</p>
<p>query有很多很多很多重载的方法，找的时候关注两个点：我们有什么（参数）、我们要什么（返回值）</p>
<p>比如有sql语句、参数，要返回一个List，筛选出来基本就剩2个了，它们一个要传Object[] args，一个是Object… args，是针对不同版本的（前者所有版本可用，后者jdk5之后支持可变参数可用）</p>
<p>第一个方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询所有</span></span><br><span class="line">List&lt;Account&gt; accounts = jt.query(<span class="string">&quot;select * from account where money &gt; ?&quot;</span>,<span class="keyword">new</span> AccountRowMapper(),<span class="number">1000f</span>);</span><br></pre></td></tr></table></figure>

<p>需要写一个AccountRowMapper类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义Account的封装策略</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AccountRowMapper</span> <span class="keyword">implements</span> <span class="title">RowMapper</span>&lt;<span class="title">Account</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把结果集中的数据封装到Account中，然后由spring把每个Account加到集合中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rs</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rowNum</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">mapRow</span><span class="params">(ResultSet rs, <span class="keyword">int</span> rowNum)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account();</span><br><span class="line">        account.setId(rs.getInt(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">        account.setName(rs.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">        account.setMoney(rs.getFloat(<span class="string">&quot;money&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> account;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时问题来了，对比dbutils中的QueryRunner</p>
<img src="/images/2020/2020031902.png">

<p>不同的只有ResultSetHandler和AccountRowMapper，从封装的角度作用是一样的</p>
<p>以前是用的dbutils提供的beanListHandler实现的</p>
<p>难道机智的Spring没有这个实现吗还要自己写？</p>
<p>显然必须有 -&gt; BeanPropertyRowMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询所有</span></span><br><span class="line"><span class="comment">// List&lt;Account&gt; accounts = jt.query(&quot;select * from account where money &gt; ?&quot;,new AccountRowMapper(),1000f);</span></span><br><span class="line">List&lt;Account&gt; accounts = jt.query(<span class="string">&quot;select * from account where money &gt; ?&quot;</span>,<span class="keyword">new</span> BeanPropertyRowMapper&lt;Account&gt;(Account.class),<span class="number">1000f</span>);</span><br><span class="line"><span class="keyword">for</span>(Account account : accounts)&#123;</span><br><span class="line">  System.out.println(account);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>能查所有了，查一个也差不多（实际使用BeanPropertyRowMapper比较多）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询一个</span></span><br><span class="line">List&lt;Account&gt; accounts = jt.query(<span class="string">&quot;select * from account where id = ?&quot;</span>,<span class="keyword">new</span> BeanPropertyRowMapper&lt;Account&gt;(Account.class),<span class="number">3</span>);</span><br><span class="line">System.out.println(accounts.isEmpty()? <span class="string">&quot;没有内容&quot;</span> :accounts.get(<span class="number">0</span>));</span><br></pre></td></tr></table></figure>

<p>还有聚合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询返回一行一列（使用聚合函数，但不加group by子句）</span></span><br><span class="line">Long count = jt.queryForObject(<span class="string">&quot;select count(*) from account where money &gt; ?&quot;</span>,Long.class,<span class="number">1000f</span>);</span><br><span class="line">System.out.println(count);</span><br></pre></td></tr></table></figure>

<p>第二个参数用来指定返回类型（前提是能转，为防溢出一般用Long接收）</p>
<h1 id="JdbcTemplate在Dao中的使用"><a href="#JdbcTemplate在Dao中的使用" class="headerlink" title="JdbcTemplate在Dao中的使用"></a>JdbcTemplate在Dao中的使用</h1><p>写一个IAccountDao接口，实现类中用上面的方法完成功能即可</p>
<h2 id="JdbcDaoSupport的使用"><a href="#JdbcDaoSupport的使用" class="headerlink" title="JdbcDaoSupport的使用"></a>JdbcDaoSupport的使用</h2><p>有一个问题是，如果实际开发中有多个Dao，每个实现类中都要获取JdbcTemplate</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJdbcTemplate</span><span class="params">(JdbcTemplate jdbcTemplate)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.jdbcTemplate = jdbcTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码会重复很多次</p>
<p>可以写一个JdbcDaoSupport类用于抽取这段重复代码</p>
<p>其它DaoImp继承这个类，get其中的jdbcTemplate，dataSource也在其中设置好</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 此类用于抽取dao中的重复代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcDaoSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJdbcTemplate</span><span class="params">(JdbcTemplate jdbcTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jdbcTemplate = jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">getJdbcTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(jdbcTemplate == <span class="keyword">null</span>)&#123;</span><br><span class="line">            jdbcTemplate = createJdbcTemplate(dataSource);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> JdbcTemplate <span class="title">createJdbcTemplate</span><span class="params">(DataSource dataSource)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>显然，setDataSource的时候JdbcTemplate也有了</p>
<p>于是配置的时候就不用配JdbcTemplate了</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置账户的持久层--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.AccountDaoImpl&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--        &lt;property name=&quot;jdbcTemplate&quot; ref=&quot;jdbcTemplate&quot;&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置JdbcTemplate--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/bean&gt;--&gt;</span></span><br></pre></td></tr></table></figure>

<p>那么问题又来了</p>
<p>自己都能写出来的东西Spring显然必须有</p>
<p>把这个自己写的JdbcDaoSupport注释掉，还能跑，为啥呢</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.support.JdbcDaoSupport;</span><br></pre></td></tr></table></figure>

<p>自动导入了Spring的JdbcDaoSupport</p>
<p>打开这个类看一下，就有JdbcTemplate，有setDataSource方法，有上面一堆</p>
<p>所以不需要自己写，继承就完事</p>
<p>继承它的目的就是在有多个Dao时去除重复代码</p>
<p>但是由于源码不能动，就不好通过注解配置了，自己写和直接继承的区别就在于这里，需要权衡</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring笔记12 基于XML和注解的事务控制</title>
    <url>/2020/03/19/note-spring-12/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/av47952931">https://www.bilibili.com/video/av47952931</a><br>p72-74</p>
</blockquote>
<h1 id="基于XML的事务控制"><a href="#基于XML的事务控制" class="headerlink" title="基于XML的事务控制"></a>基于XML的事务控制</h1><p>2个工具类：ConnectionUtils 和 TransactionManager</p>
<p>见 <a href="/2020/03/09/note-spring-09/">Spring笔记09 事务控制的问题&amp;动态代理</a></p>
<p>主要配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置Connection的工具类 ConnectionUtils --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;connectionUtils&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.utils.ConnectionUtils&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 注入数据源--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;txManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.utils.TransactionManager&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 注入ConnectionUtils --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;connectionUtils&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;connectionUtils&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置aop--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--配置通用切入点表达式--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pt1&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.itheima.service.impl.*.*(..))&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:pointcut</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;txManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置前置通知：开启事务--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;beginTransaction&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pt1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置后置通知：提交事务--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;commit&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pt1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-returning</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置异常通知：回滚事务--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">&quot;rollback&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pt1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-throwing</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置最终通知：释放连接--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;release&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pt1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="基于注解的AOP配置"><a href="#基于注解的AOP配置" class="headerlink" title="基于注解的AOP配置"></a>基于注解的AOP配置</h1><p>xml中要开启对注解的支持</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;accountService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IAccountDao accountDao;</span><br><span class="line">  </span><br><span class="line">  	<span class="comment">// ...</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository(&quot;accountDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> QueryRunner runner;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ConnectionUtils connectionUtils;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;connectionUtils&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;txManager&quot;)</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ConnectionUtils connectionUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.itheima.service.impl.*.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pt1</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">  </span><br><span class="line">  	<span class="meta">@Around(&quot;pt1()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">aroundAdvice</span><span class="params">(ProceedingJoinPoint pjp)</span></span>&#123;</span><br><span class="line">        Object rtValue = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1.获取参数</span></span><br><span class="line">            Object[] args = pjp.getArgs();</span><br><span class="line">            <span class="comment">// 2.开启事务</span></span><br><span class="line">            <span class="keyword">this</span>.beginTransaction();</span><br><span class="line">            <span class="comment">// 3.执行方法</span></span><br><span class="line">            rtValue = pjp.proceed(args);</span><br><span class="line">            <span class="comment">// 4.提交事务</span></span><br><span class="line">            <span class="keyword">this</span>.commit();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 返回结果</span></span><br><span class="line">            <span class="keyword">return</span>  rtValue;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Throwable e)&#123;</span><br><span class="line">            <span class="comment">// 5.回滚事务</span></span><br><span class="line">            <span class="keyword">this</span>.rollback();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 6.释放资源</span></span><br><span class="line">            <span class="keyword">this</span>.release();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果分别在开启事务、提交事务、回滚事务、释放连接的函数上分别加@Before(“pt1()”)、@AfterReturning(“pt1()”)、@AfterThrowing(“pt1()”)、@After(“pt1()”)</p>
<p>理论上没毛病。但是！Spring实际的执行顺序是有问题的（同 见笔记9）</p>
<p>最终通知在后置通知之前执行了，于是根本没有提交就释放了，连接已经变成了新的连接</p>
<p>所以不要分别用。用一个环绕通知，里面try-catch，自己控制顺序</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring笔记13 Spring中的事务控制</title>
    <url>/2020/03/19/note-spring-13/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/av47952931">https://www.bilibili.com/video/av47952931</a><br>p75-78</p>
</blockquote>
<p>几个点：</p>
<ul>
<li>JavaEE体系进行分层开发，事务处理位于业务层</li>
<li>Spring提供事务控制的接口，在spring-tx-5.0.2.RELEASE.jar中</li>
<li>Spring的事务控制基于AOP。它既可以用配置方式实现，也可以用编程方式实现（重点是配置实现）</li>
</ul>
<h1 id="Spring中事务控制的API"><a href="#Spring中事务控制的API" class="headerlink" title="Spring中事务控制的API"></a>Spring中事务控制的API</h1><h2 id="PlatformTransactionManager"><a href="#PlatformTransactionManager" class="headerlink" title="PlatformTransactionManager"></a>PlatformTransactionManager</h2><p>该接口提供事务操作的方法：</p>
<ul>
<li>获取状态 getTransaction()</li>
<li>提交 commit()</li>
<li>回滚 rollback()</li>
</ul>
<p>常用实现类：</p>
<ul>
<li>org.springframework.jdbc.datasource.DataSourceTransactionManager </li>
<li>org.springframework.orm.hibernate5.HibernateTransactionManager </li>
</ul>
<h2 id="TransactionDefinition"><a href="#TransactionDefinition" class="headerlink" title="TransactionDefinition"></a>TransactionDefinition</h2><p>该接口是事务的定义信息对象，可以获取事务对象名称、隔离级别、传播行为、超时时间、是否只读</p>
<p>Spring默认使用数据库的隔离级别</p>
<p>传播行为指什么情况下必须有事务、什么情况可有可无</p>
<h2 id="TransactionStatus"><a href="#TransactionStatus" class="headerlink" title="TransactionStatus"></a>TransactionStatus</h2><p>该接口提供事务的运行状态，可以刷新事务、获取是否存在存储点（可以理解为按步提交，回滚可以回滚到当前点，不用全部回滚）、是否完成、是否为新的事务、是否回滚、设置回滚</p>
<h1 id="Spring的事务控制"><a href="#Spring的事务控制" class="headerlink" title="Spring的事务控制"></a>Spring的事务控制</h1><h2 id="代码准备"><a href="#代码准备" class="headerlink" title="代码准备"></a>代码准备</h2><p>pom.xml中需要导入aspectj的依赖，因为事务控制基于AOP</p>
<p>准备数据库表和实体类（还是账户）</p>
<p>实现三个方法：根据Id查询账户、根据名称查询账户、转账</p>
<p>编写Dao层和业务层接口和实现类</p>
<h2 id="基于XML的声明式事务控制"><a href="#基于XML的声明式事务控制" class="headerlink" title="基于XML的声明式事务控制"></a>基于XML的声明式事务控制</h2><p>配置步骤</p>
<p>1、配置事务管理器</p>
<p>2、配置事务的通知</p>
<p>此时需要导入事务的约束（文档首页点Data Access，搜xmlns:tx，同时也会导入AOP的约束）</p>
<p>使用tx:advice标签配置事务通知<br>属性：id：事务通知的唯一标识   transaction-manager：给事务通知提供一个事务管理器引用</p>
<p>3、配置AOP中的通用切入点表达式</p>
<p>4、建立事务通知和切入点表达式的对应关系</p>
<p>5、配置事务的属性（在事务的通知tx:advice标签的内部）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置事务的通知--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置事务的属性</span></span><br><span class="line"><span class="comment">                isolation：用于指定事务的隔离级别。默认值是DEFAULT，表示使用数据库的默认隔离级别。</span></span><br><span class="line"><span class="comment">                propagation：用于指定事务的传播行为。默认值是REQUIRED，表示一定会有事务，增删改的选择。查询方法可以选择SUPPORTS。</span></span><br><span class="line"><span class="comment">                read-only：用于指定事务是否只读。只有查询方法才能设置为true。默认值是false，表示读写。</span></span><br><span class="line"><span class="comment">                timeout：用于指定事务的超时时间，默认值是-1，表示永不超时。如果指定了数值，以秒为单位。</span></span><br><span class="line"><span class="comment">                rollback-for：用于指定一个异常，当产生该异常时，事务回滚，产生其他异常时，事务不回滚。没有默认值。表示任何异常都回滚。</span></span><br><span class="line"><span class="comment">                no-rollback-for：用于指定一个异常，当产生该异常时，事务不回滚，产生其他异常时事务回滚。没有默认值。表示任何异常都回滚。</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 后面写查询方法都以find开头 这样两行配置就够了--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;find*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;SUPPORTS&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:method</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置aop--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置切入点表达式--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pt1&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.itheima.service.impl.*.*(..))&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:pointcut</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--建立切入点表达式和事务通知的对应关系 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pt1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样service.impl下的实现类就都配置好事务控制了</p>
<h2 id="基于注解的声明式事务控制"><a href="#基于注解的声明式事务控制" class="headerlink" title="基于注解的声明式事务控制"></a>基于注解的声明式事务控制</h2><p>导名称空间时要多一个context，以及对应的约束</p>
<p>业务层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;accountService&quot;)</span></span><br><span class="line"><span class="meta">@Transactional(propagation= Propagation.SUPPORTS,readOnly=true)</span> <span class="comment">// 只读型事务的配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IAccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer accountId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAccountById(accountId);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 需要的是读写型事务配置</span></span><br><span class="line">    <span class="meta">@Transactional(propagation= Propagation.REQUIRED,readOnly=false)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String sourceName, String targetName, Float money)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 2.1根据名称查询转出账户</span></span><br><span class="line">            Account source = accountDao.findAccountByName(sourceName);</span><br><span class="line">            <span class="comment">// 2.2根据名称查询转入账户</span></span><br><span class="line">            Account target = accountDao.findAccountByName(targetName);</span><br><span class="line">            <span class="comment">// 2.3转出账户减钱</span></span><br><span class="line">            source.setMoney(source.getMoney()-money);</span><br><span class="line">            <span class="comment">// 2.4转入账户加钱</span></span><br><span class="line">            target.setMoney(target.getMoney()+money);</span><br><span class="line">            <span class="comment">// 2.5更新转出账户</span></span><br><span class="line">            accountDao.updateAccount(source);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> i=<span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2.6更新转入账户</span></span><br><span class="line">            accountDao.updateAccount(target);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Dao层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository(&quot;accountDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时不能再继承JdbcDaoSupport了（因为没法给jdbcTemplate加注解），必须自己定义一个jdbcTemplate，并在xml中配置（并注入dataSource，还要配置Spring在创建容器时需要扫描的包）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置spring创建容器时要扫描的包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itheima&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置JdbcTemplate--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置数据源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/eesy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1234&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- spring中基于注解 的声明式事务控制配置步骤</span></span><br><span class="line"><span class="comment">            1、配置事务管理器</span></span><br><span class="line"><span class="comment">            2、开启spring对注解事务的支持</span></span><br><span class="line"><span class="comment">            3、在需要事务支持的地方使用@Transactional注解</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 开启spring对注解事务的支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>属性在@Transactional中配置</p>
<p>一个问题是，如果有十个事务，一半只读一半读写，就都得单独配置属性</p>
<p>而用xml配置时一次就解决了</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>学习Spring的一点感想</title>
    <url>/2020/03/19/note-spring/</url>
    <content><![CDATA[<p>Spring学到这里，记录一点点感想</p>
<hr>
<p>这个教程一个经常的操作就是</p>
<p>噼里啪啦噼里啪啦写了一大堆，然后灵魂质问：<strong>你都能写出来的东西Spring会没有吗？</strong></p>
<p>🥶🥶🥶</p>
<p>fine</p>
<p>不过这种过程解释了这些设计的用意，也难怪评论很多都说这个教程是看过最好的</p>
<p>然鹅，用Spring Boot的时候现在的这一堆也不用写啊！</p>
<p>最初接触java web这一大趴的时候特别迷惑，Tomcat、Spring、Spring MVC、Spring Boot…一😳脸😳懵😳逼</p>
<p>看到大多的建议是从Spring开始，不然Spring Boot能用但是不懂为什么</p>
<p>于是学了一些Spring（估计是一个四小时版本），用的时候为了方便还是直接上了Spring Boot</p>
<p>现在重新学一遍，没之前那么😳😳😳了，教程里说到Spring可以简化手撕代码的时候，也知道Spring Boot还能再简化一些</p>
<p>对它们的理解也慢慢清晰了一点点，感觉就是一个不断封装、约定&gt;配置的简化过程，和计算机中许许多多的进化过程一样，都是一层一层的抽(tou)象(lan)</p>
<hr>
<img src="/images/2020/1949370-200.png" width=100>


<p>说起来，春天到了呢</p>
<p>今天湖北已经0新增了，希望能赶快开门…</p>
<p>🦢</p>
]]></content>
      <categories>
        <category>Memo</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring笔记14 Spring5的新特性</title>
    <url>/2020/03/20/note-spring-14/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/av47952931?p=82">https://www.bilibili.com/video/av47952931?p=82</a></p>
</blockquote>
<p>基于jdk1.8，tomcat版本要求8.5以上</p>
<h1 id="利用jdk8版本更新的内容"><a href="#利用jdk8版本更新的内容" class="headerlink" title="利用jdk8版本更新的内容"></a>利用jdk8版本更新的内容</h1><h2 id="基于jdk8的反射增强"><a href="#基于jdk8的反射增强" class="headerlink" title="基于jdk8的反射增强"></a>基于jdk8的反射增强</h2><p> <strong>一个测试</strong></p>
<p>三种操作：</p>
<p>1.创建新对象并赋值</p>
<p>2.创建一个对象赋值多次</p>
<p>3.通过反射创建对象并赋值</p>
<p>分别执行10亿次，比较用时(ms)</p>
<p>jdk8：8、31、2417</p>
<p>jdk7：6212、3025、290400</p>
<h2 id="NonNull-和-Nullable-的使用"><a href="#NonNull-和-Nullable-的使用" class="headerlink" title="@NonNull 和@Nullable 的使用"></a>@NonNull 和@Nullable 的使用</h2><p>用 @Nullable 和 @NotNull 注解来表明可为空的参数和以及返回值</p>
<p>这样就够在编译的时候处理空值而不是在运行时抛出 NullPointerExceptions</p>
<h2 id="日志记录方面"><a href="#日志记录方面" class="headerlink" title="日志记录方面"></a>日志记录方面</h2><p>封装 Commons Logging 桥接模块（叫做 spring-jcl）</p>
<h1 id="核心容器的更新"><a href="#核心容器的更新" class="headerlink" title="核心容器的更新"></a>核心容器的更新</h1><p>支持候选组件索引作为类路径扫描的替代方案</p>
<p>从索引读取实体而不是扫描类路径对于小于 200 个类的小型项目没有明显差异</p>
<p>对于大型项目，应用程序的启动时间将被大大缩减</p>
<h1 id="JetBrains-Kotlin-语言支持"><a href="#JetBrains-Kotlin-语言支持" class="headerlink" title="JetBrains Kotlin 语言支持"></a>JetBrains Kotlin 语言支持</h1><h1 id="响应式编程风格"><a href="#响应式编程风格" class="headerlink" title="响应式编程风格"></a>响应式编程风格</h1><p>响应式堆栈 WEB 框架</p>
<p>这个堆栈完全的响应式且非阻塞，适合于事件循环风格的处理，可以进行少量线程的扩展</p>
<p>（有一个响应式编程实战示例，建议学完Spring Boot之后搭建  -MARK- ）</p>
<h1 id="Junit5-支持"><a href="#Junit5-支持" class="headerlink" title="Junit5 支持"></a>Junit5 支持</h1>]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring笔记15 总结</title>
    <url>/2020/03/20/note-spring-15/</url>
    <content><![CDATA[<img src="/images/2020/spring.png">]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>mindmap</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis笔记01 入门</title>
    <url>/2020/03/26/note-mybatis-01/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/av47952553">https://www.bilibili.com/video/av47952553</a><br>p1~10</p>
</blockquote>
<h1 id="框架概述"><a href="#框架概述" class="headerlink" title="框架概述"></a>框架概述</h1><p>什么是框架：整个或部分系统的可重用设计，表现为一组抽象构件及构件实例间交互的方法</p>
<p>目的：封装细节，提高开发效率 -&gt; 关注功能实现</p>
<p>不同的框架各司其职，解决某一层或某一类问题</p>
<img src="/images/2020/screencapture2020-03-26PM10.20.30.jpg">

<p>持久层技术有jdbc、Spring的JdbcTemplate、Apache的DBUtils</p>
<p>但是它们都不是框架，jdbc是规范，JdbcTemplate和DButils是工具类（只有简单的封装而没有完整的解决方案）</p>
<h2 id="MyBatis框架概述"><a href="#MyBatis框架概述" class="headerlink" title="MyBatis框架概述"></a>MyBatis框架概述</h2><p>基于 java 的持久层框架</p>
<p>内部封装了 jdbc操作的细节，使开发者只需要关注 sql 语句本身，而无需关注注册驱动、创建连接等繁杂过程</p>
<p>使用ORM（Object Relational Mapping）思想实现结果集的封装</p>
<p>通过xml或注解的方式配置statement</p>
<h1 id="环境搭建-amp-入门案例"><a href="#环境搭建-amp-入门案例" class="headerlink" title="环境搭建&amp;入门案例"></a>环境搭建&amp;入门案例</h1><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><img src="/images/2020/screencapture2020-03-26PM10.44.35.jpg" width=400>

<p>Idea中创建目录和包是不一样的</p>
<p>创建包时com.itheima.dao是三级结构</p>
<p>创建目录时com.itheima.dao是一级目录</p>
<p>resource中创建directory要一级一级的创建，因为MyBatis的映射配置文件位置必须和dao接口的包结构相同</p>
<p>再进行相应的配置，就无须再写dao的实现类了，剩下的由MyBatis实现</p>
<p>（MyBatis支持自己写实现类，但是没什么意义）</p>
<h2 id="1-准备数据库"><a href="#1-准备数据库" class="headerlink" title="1.准备数据库"></a>1.准备数据库</h2><p>User表</p>
<h2 id="2-Idea创建Maven工程，导坐标"><a href="#2-Idea创建Maven工程，导坐标" class="headerlink" title="2.Idea创建Maven工程，导坐标"></a>2.Idea创建Maven工程，导坐标</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-实体类和Dao接口"><a href="#3-实体类和Dao接口" class="headerlink" title="3. 实体类和Dao接口"></a>3. 实体类和Dao接口</h2><p>实体类User，属性和数据库表中字段一一对应，实现Serializable，生成get、set方法</p>
<p>用户的持久层接口IUserDao，一个方法：List<User> findAll();</p>
<h2 id="4-配置文件"><a href="#4-配置文件" class="headerlink" title="4. 配置文件"></a>4. 配置文件</h2><h3 id="主配置文件-SqlMapConfig-xml"><a href="#主配置文件-SqlMapConfig-xml" class="headerlink" title="主配置文件 SqlMapConfig.xml"></a>主配置文件 SqlMapConfig.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mybatis的主配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置环境 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置mysql的环境--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置事务的类型--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置数据源（连接池） --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 配置连接数据库的4个基本信息 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/eesy_mybatis&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1234&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 指定映射配置文件的位置，映射配置文件指的是每个dao独立的配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/itheima/dao/IUserDao.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line">&lt;/configuration</span><br></pre></td></tr></table></figure>

<h3 id="映射配置文件-IUserDao-xml"><a href="#映射配置文件-IUserDao-xml" class="headerlink" title="映射配置文件 IUserDao.xml"></a>映射配置文件 IUserDao.xml</h3><p>MyBatis中持久层的操作接口名和映射文件也叫Mapper</p>
<p>命名IUserDao或者IUserMapper都可以</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itheima.dao.IUserDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置查询所有--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>namespace必须是dao接口的权限定类名</p>
<p>id要写dao接口的方法名</p>
<p>resultType写返回类型（封装成什么对象）</p>
<p>sql语句写不写分号均可</p>
<h2 id="5-测试"><a href="#5-测试" class="headerlink" title="5.测试"></a>5.测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.读取配置文件</span></span><br><span class="line">InputStream in = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line"><span class="comment">// 2.创建SqlSessionFactory工厂</span></span><br><span class="line">SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">SqlSessionFactory factory = builder.build(in);</span><br><span class="line"><span class="comment">// 3.使用工厂生产SqlSession对象</span></span><br><span class="line">SqlSession session = factory.openSession();</span><br><span class="line"><span class="comment">// 4.使用SqlSession创建Dao接口的代理对象</span></span><br><span class="line">IUserDao userDao = session.getMapper(IUserDao.class);</span><br><span class="line"><span class="comment">// 5.使用代理对象执行方法</span></span><br><span class="line">List&lt;User&gt; users = userDao.findAll();</span><br><span class="line"><span class="keyword">for</span>(User user : users)&#123;</span><br><span class="line">  System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 6.释放资源</span></span><br><span class="line">session.close();</span><br><span class="line">in.close();</span><br></pre></td></tr></table></figure>

<p>涉及构建者模式&amp;工厂模式&amp;动态代理</p>
<img src="/images/2020/screencapture2020-03-26PM11.27.06.jpg">

<h1 id="注解方式"><a href="#注解方式" class="headerlink" title="注解方式"></a>注解方式</h1><p>主配置文件还要有，修改一下mapper即可，映射配置文件可以不要了</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定映射配置文件的位置，映射配置文件指的是每个dao独立的配置文件</span></span><br><span class="line"><span class="comment">        如果是用注解来配置的话，此处应该使用class属性指定被注解的dao全限定类名</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.IUserDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>IUserDao加@Select</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis笔记02 实现CRUD</title>
    <url>/2020/03/27/note-mybatis-02/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/av47952553">https://www.bilibili.com/video/av47952553</a><br>p21～27, 44</p>
</blockquote>
<h1 id="用户的持久层接口"><a href="#用户的持久层接口" class="headerlink" title="用户的持久层接口"></a>用户的持久层接口</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 增</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 改</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">User <span class="title">findById</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findByName</span><span class="params">(String username)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findTotal</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="配置与测试（以查所有为例）"><a href="#配置与测试（以查所有为例）" class="headerlink" title="配置与测试（以查所有为例）"></a>配置与测试（以查所有为例）</h1><h2 id="查询操作的映射"><a href="#查询操作的映射" class="headerlink" title="查询操作的映射"></a>查询操作的映射</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 查询所有 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>&gt;</span></span><br><span class="line">  select * from user;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> InputStream in;</span><br><span class="line">    <span class="keyword">private</span> SqlSession sqlSession;</span><br><span class="line">    <span class="keyword">private</span> IUserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span> <span class="comment">// 用于在测试方法执行之前执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 1.读取配置文件，生成字节输入流</span></span><br><span class="line">        in = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.获取SqlSessionFactory</span></span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        <span class="comment">// 3.获取SqlSession对象</span></span><br><span class="line">        sqlSession = factory.openSession();</span><br><span class="line">        <span class="comment">// 4.获取dao的代理对象</span></span><br><span class="line">        userDao = sqlSession.getMapper(IUserDao.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span> <span class="comment">// 用于在测试方法执行之后执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 5.提交事务</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        <span class="comment">// 6.释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试查询所有</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userDao.findAll();</span><br><span class="line">        <span class="keyword">for</span>(User user : users)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h1><h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 保存用户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;saveUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置插入操作后，获取插入数据的id --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">&quot;userId&quot;</span> <span class="attr">keyColumn</span>=<span class="string">&quot;id&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">order</span>=<span class="string">&quot;AFTER&quot;</span>&gt;</span></span><br><span class="line">    select last_insert_id();</span><br><span class="line">  <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">  insert into user(username,address,sex,birthday)values(#&#123;userName&#125;,#&#123;userAddress&#125;,#&#123;userSex&#125;,#&#123;userBirthday&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setUserName(<span class="string">&quot;AAA&quot;</span>);</span><br><span class="line">user.setUserAddress(<span class="string">&quot;北京市顺义区&quot;</span>);</span><br><span class="line">user.setUserSex(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">user.setUserBirthday(<span class="keyword">new</span> Date());</span><br><span class="line">userDao.saveUser(user);</span><br></pre></td></tr></table></figure>

<p>可以在新增用户后获取id</p>
<p>在saveUser前后打印user，可以发现id从null变为值</p>
<h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 删除用户--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.lang.Integer&quot;</span>&gt;</span></span><br><span class="line">  delete from user where id = #&#123;uid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里uid，传基本类型或基本类型包装类时，占位符可以随便写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">userDao.deleteUser(<span class="number">48</span>);</span><br></pre></td></tr></table></figure>

<h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 更新用户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>&gt;</span></span><br><span class="line">  update user set username=#&#123;userName&#125;,address=#&#123;userAddress&#125;,sex=#&#123;userAex&#125;,birthday=#&#123;userBirthday&#125; where id=#&#123;userId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setUserId(<span class="number">50</span>);</span><br><span class="line">user.setUserName(<span class="string">&quot;BBB&quot;</span>);</span><br><span class="line">user.setUserAddress(<span class="string">&quot;北京市顺义区&quot;</span>);</span><br><span class="line">user.setUserSex(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">user.setUserBirthday(<span class="keyword">new</span> Date());</span><br><span class="line">userDao.updateUser(user);</span><br></pre></td></tr></table></figure>

<h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据id查询用户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>&gt;</span></span><br><span class="line">  select * from user where id = #&#123;uid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 根据名称模糊查询 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByName&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;string&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>&gt;</span></span><br><span class="line">  select * from user where username like #&#123;name&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 获取用户的总记录条数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findTotal&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">  select count(id) from user;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindOne</span><span class="params">()</span></span>&#123;</span><br><span class="line">  User  user = userDao.findById(<span class="number">50</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByName</span><span class="params">()</span></span>&#123;</span><br><span class="line">  List&lt;User&gt; users = userDao.findByName(<span class="string">&quot;%王%&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindTotal</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> count = userDao.findTotal();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据名称查询时，可以有两种方式</p>
<ol>
<li><p>select * from user where username like #{name}</p>
</li>
<li><p>select * from user where username like ‘%${value}%’</p>
</li>
</ol>
<p>前者用的是PrepareStatement的参数占位符（更好），而后者用的是字符串拼接</p>
<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>MyBatis通过sqlsession对象的commit和rollback方法实现事务的提交和回滚</p>
<p>最终用到的都是connection.commit()和connection.rollback()</p>
<p><strong>自动提交</strong></p>
<p>创建SqlSession时可以设置自动提交</p>
<img src="/images/2020/screencapture2020-03-30AM10.53.57.jpg">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sqlSession = factory.openSession(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure>

<p>这样后面就不用手动提交了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// sqlSession.commit();</span></span><br></pre></td></tr></table></figure>

<p>但是实际上能这样用不多</p>
<p>如转账操作，还是需要手动控制提交时间</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis笔记03 参数与结果封装</title>
    <url>/2020/03/27/note-mybatis-03/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/av47952553">https://www.bilibili.com/video/av47952553</a><br>p28～29</p>
</blockquote>
<h1 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h1><p>输入类型可以是：</p>
<ul>
<li><p>简单类型</p>
</li>
<li><p>pojo对象</p>
<p>使用OGNL表达式解析对象字段的值，#{}或${}括号中的值为pojo属性名称</p>
</li>
<li><p>pojo包装对象</p>
<p>把实体类包装起来，进行条件查询</p>
</li>
</ul>
<h2 id="OGNL表达式"><a href="#OGNL表达式" class="headerlink" title="OGNL表达式"></a>OGNL表达式</h2><p>Object Graphic Navigation Language</p>
<p>通过对象的取值方法来获取数据，省略get</p>
<p>如获取用户名，类中的写法：user.getUsername()</p>
<p>OGNL表达式写法：user.username</p>
<p>MyBatis中，由于parameterType中已经提供了属性所属的类，可以直接写username，不需要写对象名</p>
<h2 id="条件查询例"><a href="#条件查询例" class="headerlink" title="条件查询例"></a>条件查询例</h2><p>通过QueryVo设置查询条件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryVo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>此时用username就需要加对象名</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据queryVo的条件查询用户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserByVo&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.itheima.domain.QueryVo&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line">  select * from user where username like #&#123;user.username&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByVo</span><span class="params">()</span></span>&#123;</span><br><span class="line">  QueryVo vo = <span class="keyword">new</span> QueryVo();</span><br><span class="line">  User user = <span class="keyword">new</span> User();</span><br><span class="line">  user.setUserName(<span class="string">&quot;%王%&quot;</span>);</span><br><span class="line">  vo.setUser(user);</span><br><span class="line">  List&lt;User&gt; users = userDao.findUserByVo(vo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="结果封装"><a href="#结果封装" class="headerlink" title="结果封装"></a>结果封装</h1><p>resultType可以是：</p>
<ul>
<li>简单类型</li>
<li>pojo对象</li>
<li>pojo列表</li>
</ul>
<h1 id="名称对应"><a href="#名称对应" class="headerlink" title="名称对应"></a>名称对应</h1><p>如果本来属性名全是小写，数据库中也全是小写，可以正常执行</p>
<p>把属性名从全小写改成山峰，如userid改成userId，username改成userName，运行查所有</p>
<p>可能只有userName的值查出来了</p>
<p>因为windows系统下mysql不区分大小写</p>
<p>但是linux系统下区分</p>
<p><strong>解决方法</strong></p>
<ol>
<li>取别名</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">select id as userId,username as userName,address as userAddress,sex as userSex,birthday as userBirthday from user</span><br></pre></td></tr></table></figure>

<p>在sql语句层面解决问题，执行效率高</p>
<ol start="2">
<li>MyBatis配置</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置 查询结果的列名和实体类的属性名的对应关系 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;uSeR&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 主键字段的对应 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;userId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--非主键字段的对应--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;userAddress&quot;</span> <span class="attr">column</span>=<span class="string">&quot;address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;userSex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;userBirthday&quot;</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>此时resultType要改成resultMap，说明使用userMap解析结果封装</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--select id as userId,username as userName,address as userAddress,sex as userSex,birthday as userBirthday from user;--&gt;</span></span><br><span class="line">  select * from user;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>开发效率高些</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis笔记04 配置文件</title>
    <url>/2020/03/27/note-mybatis-04/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/av47952553">https://www.bilibili.com/video/av47952553</a><br>p37~38</p>
</blockquote>
<h1 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h1><p>可以在标签内部配置连接数据库的信息，也可以通过属性引用外部配置文件信息</p>
<h2 id="内部配置"><a href="#内部配置" class="headerlink" title="内部配置"></a>内部配置</h2><p>直接写在主配置文件中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/eesy_mybatis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1234&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="外部文件"><a href="#外部文件" class="headerlink" title="外部文件"></a>外部文件</h2><p>引用外部文件</p>
<p>classpath 下定义 db.properties 文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/eesy</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=1234</span><br></pre></td></tr></table></figure>

<p>要求按url的写法写地址</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">url</span>=<span class="string">&quot;file:///D:/IdeaProjects/day02_eesy_01mybatisCRUD/src/main/resources/jdbcConfig.properties&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="使用typeAliases配置类型别名"><a href="#使用typeAliases配置类型别名" class="headerlink" title="使用typeAliases配置类型别名"></a>使用typeAliases配置类型别名</h1><p>只能配置domain中类的别名</p>
<p>type：指定的是实体类全限定类名</p>
<p>alias：属性指定别名</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 单个别名定义 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;user&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">typeAlias</span>&gt;</span>--&gt;</span><br><span class="line">  <span class="comment">&lt;!-- 用于指定要配置别名的包，当指定之后，该包下的实体类都会注册别名，并且类名就是别名，不再区分大小写--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.itheima.domain&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>指定了别名就不再区分大小写，user、USER、uSeR都可以</p>
<h1 id="mappers"><a href="#mappers" class="headerlink" title="mappers"></a>mappers</h1><p>resource用于指定相对于类路径的资源位置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/itheima/dao/IUserDao.xml&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>class指定接口类路径</p>
<p>要求 mapper 接口名称和 mapper 映射文件名称相同，且放在同一个目录中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.UserDao&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>更简单的方式是使用package</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--&lt;mapper resource=&quot;com/itheima/dao/IUserDao.xml&quot;&gt;&lt;/mapper&gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- package标签是用于指定dao接口所在的包,当指定了之后就不需要再写mapper以及resource或者class了 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.itheima.dao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis笔记05 连接池</title>
    <url>/2020/03/30/note-mybatis-05/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/av47952553">https://www.bilibili.com/video/av47952553</a><br>p39~43</p>
</blockquote>
<h1 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h1><p>是一个存储连接的容器</p>
<p>用于降低获取连接的开销</p>
<p>必须线程安全</p>
<p>先进先出</p>
<h1 id="MyBatis中的连接池"><a href="#MyBatis中的连接池" class="headerlink" title="MyBatis中的连接池"></a>MyBatis中的连接池</h1><p>MyBatis连接池提供3种方式的配置</p>
<p>配置的位置：主配置文件SqlMapConfig.xml中dataSource标签，type属性表示采用何种连接池</p>
<p>type属性的取值：</p>
<ul>
<li><p>POOLED - 采用传统的javax.sql.DataSource规范中的连接池</p>
</li>
<li><p>UNPOOLED - 采用传统的获取连接的方式，虽然也实现了javax.sql.DataSource接口，但没有使用池的思想（没有容器，每次用都重新获取一个连接）</p>
</li>
<li><p>JNDI - 采用服务器提供的JNDI技术实现，来获取DataSource对象，不同的服务器能拿到的DataSource不同（如果不是web或maven的war工程，不能使用）</p>
<p>tomcat服务器采用dbcp连接池</p>
</li>
</ul>
<h2 id="POOLED和UNPOOLED对比"><a href="#POOLED和UNPOOLED对比" class="headerlink" title="POOLED和UNPOOLED对比"></a>POOLED和UNPOOLED对比</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置连接池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src="/images/2020/screencapture2020-03-30AM10.00.05.jpg">

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置连接池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;UNPOOLED&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src="/images/2020/screencapture2020-03-30AM10.00.10.jpg">

<h2 id="UNPOOLED源码分析"><a href="#UNPOOLED源码分析" class="headerlink" title="UNPOOLED源码分析"></a>UNPOOLED源码分析</h2><p>Command + O 搜索 PooledDataSource 和 UnpooledDataSource，可以发现都实现了DataSource接口</p>
<img src="/images/2020/screencapture2020-03-30AM10.11.24.jpg">

<p>而这个DataSource实现javax.sql，即为jdbc规范中的连接池定义</p>
<p>其中一定会有getConnection()</p>
<img src="/images/2020/screencapture2020-03-30AM10.14.24.jpg">

<p>找一下UnpooledDataSource中的getConnection()</p>
<img src="/images/2020/screencapture2020-03-30AM10.17.28.jpg">

<p>调了doGetConnection()</p>
<img src="/images/2020/screencapture2020-03-30AM10.18.42.jpg">

<p>最后获取连接的语句就是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Connection connection = DriverManager.getConnection(url, properties);</span><br></pre></td></tr></table></figure>

<p>而initializeDriver()中就是反射注册驱动</p>
<img src="/images/2020/screencapture2020-03-30AM10.20.30.jpg">

<p>所以，UNPOOLED使用时，会注册驱动、获取连接、返回连接</p>
<h2 id="POOLED源码分析"><a href="#POOLED源码分析" class="headerlink" title="POOLED源码分析"></a>POOLED源码分析</h2><p>也找到getConnection()</p>
<img src="/images/2020/screencapture2020-03-30AM10.22.59.jpg">

<p>调了popConnection()</p>
<img src="/images/2020/screencapture2020-03-30AM10.26.37.jpg">

<p>如果没有连接，在synchronized块中进行后续操作</p>
<p>锁的是这个state</p>
<img src="/images/2020/screencapture2020-03-30AM10.27.15.jpg">

<p>继续，如果idleConnections非空</p>
<img src="/images/2020/screencapture2020-03-30AM10.30.59.jpg">

<p>而idleConnections就是一个ArrayList</p>
<img src="/images/2020/screencapture2020-03-30AM10.32.21.jpg">

<p>即，当它非空，取出第一个</p>
<p>如果为空，连接数量小于最大值，创建连接</p>
<img src="/images/2020/screencapture2020-03-30AM10.34.52.jpg">

<p>如果已经到最大值了，取出一个最老的连接，尝试处理之后继续用</p>
<p>总的流程：</p>
<img src="/images/2020/screencapture2020-03-30AM10.40.26.jpg">

<p>POOLED是MyBatis自己实现的一套连接池，根据javax.sql.DataSource规范</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis笔记06 动态sql语句</title>
    <url>/2020/03/30/note-mybatis-06/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/av47952553">https://www.bilibili.com/video/av47952553</a><br>p45~47</p>
</blockquote>
<h1 id="if标签"><a href="#if标签" class="headerlink" title="if标签"></a>if标签</h1><p>根据传入参数条件查询</p>
<p>条件可能是用户名、性别、地址，或者都有、都没有</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// IUserDao.java</span></span><br><span class="line"></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findUserByCondition</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure>

<p>与要用and，不能用&amp;&amp;</p>
<p>sql语句上的内容无关大小写</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserByCondition&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userMap&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">  select * from user where 1=1</span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userName != null&quot;</span>&gt;</span></span><br><span class="line">    and username = #&#123;userName&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userSex != null&quot;</span>&gt;</span></span><br><span class="line">    and sex = #&#123;userSex&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByCondition</span><span class="params">()</span></span>&#123;</span><br><span class="line">  User u = <span class="keyword">new</span> User();</span><br><span class="line">  u.setUserName(<span class="string">&quot;老王&quot;</span>);</span><br><span class="line">  u.setUserSex(<span class="string">&quot;女&quot;</span>);</span><br><span class="line"></span><br><span class="line">  List&lt;User&gt; users = userDao.findUserByCondition(u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不写 where 1=1 ？</p>
<p>改进 -&gt; where标签</p>
<h1 id="where标签"><a href="#where标签" class="headerlink" title="where标签"></a>where标签</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserByCondition&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userMap&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">  select * from user</span><br><span class="line">  <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userName != null&quot;</span>&gt;</span></span><br><span class="line">      and username = #&#123;userName&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userSex != null&quot;</span>&gt;</span></span><br><span class="line">      and sex = #&#123;userSex&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="foreach标签"><a href="#foreach标签" class="headerlink" title="foreach标签"></a>foreach标签</h1><p>根据queryvo中的Id集合实现查询用户列表</p>
<p><strong>QueryVo.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryVo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; ids;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get set ...</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>IUserDao.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">List&lt;User&gt; <span class="title">findUserInIds</span><span class="params">(QueryVo vo)</span></span>;</span><br></pre></td></tr></table></figure>

<p><strong>IUserDao.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserInIds&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userMap&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;queryvo&quot;</span>&gt;</span></span><br><span class="line">  select * from user</span><br><span class="line">  <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;ids != null and ids.size()&gt;0&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">open</span>=<span class="string">&quot;and id in (&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">item</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        #&#123;uid&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>#{uid}是由上面item=”uid”决定的</p>
<p><strong>测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindInIds</span><span class="params">()</span></span>&#123;</span><br><span class="line">  QueryVo vo = <span class="keyword">new</span> QueryVo();</span><br><span class="line">  List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">  list.add(<span class="number">41</span>);</span><br><span class="line">  list.add(<span class="number">42</span>);</span><br><span class="line">  list.add(<span class="number">46</span>);</span><br><span class="line">  vo.setIds(list);</span><br><span class="line"></span><br><span class="line">  List&lt;User&gt; users = userDao.findUserInIds(vo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="sql标签"><a href="#sql标签" class="headerlink" title="sql标签"></a>sql标签</h1><p>抽取重复的sql语句</p>
<p>（本来写不写;都可以，但是抽取sql语句时，为了防止后续的拼接出问题，最好不要写;）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;defaultUser&quot;</span>&gt;</span></span><br><span class="line">  select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>就可以把</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line">  select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>改成</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;defaultUser&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis笔记07 多表查询</title>
    <url>/2020/03/31/note-mybatis-07/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/av47952553">https://www.bilibili.com/video/av47952553</a><br>p48~56</p>
</blockquote>
<p>表之间的几种关系：一对一、一对多、多对一、多对多</p>
<p>MyBatis把多对一看成一对一</p>
<h1 id="示例：用户和账户"><a href="#示例：用户和账户" class="headerlink" title="示例：用户和账户"></a>示例：用户和账户</h1><p>一个用户可以有多个账户</p>
<p>一个账户只能属于一个用户</p>
<p>步骤：</p>
<ol>
<li><p>两张表（账户表 外键）</p>
</li>
<li><p>两个实体类（体现一对多的关系）</p>
</li>
<li><p>两个配置文件</p>
</li>
<li><p>实现配置</p>
<p>查用户的所有账户</p>
<p>查账户的用户信息</p>
</li>
</ol>
<h1 id="两张表"><a href="#两张表" class="headerlink" title="两张表"></a>两张表</h1><p>user表</p>
<table>
<thead>
<tr>
<th>id</th>
<th>username</th>
<th>address</th>
<th>sex</th>
<th>birthday</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>account表</p>
<table>
<thead>
<tr>
<th>id</th>
<th>uid</th>
<th>money</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>46</td>
<td>1000</td>
</tr>
<tr>
<td>2</td>
<td>45</td>
<td>1000</td>
</tr>
<tr>
<td>3</td>
<td>46</td>
<td>2000</td>
</tr>
</tbody></table>
<p>外键uid，引用user表的id</p>
<h1 id="两个实体类"><a href="#两个实体类" class="headerlink" title="两个实体类"></a>两个实体类</h1><h2 id="User"><a href="#User" class="headerlink" title="User"></a>User</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一对多关系映射：主表实体应该包含从表实体的集合引用</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Account&gt; accounts;</span><br><span class="line">  </span><br><span class="line">  	<span class="comment">// get set ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  	<span class="comment">// 查询所有用户，同时获取到用户下所有账户的信息</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">  </span><br><span class="line">  	<span class="comment">// 根据id查询用户信息</span></span><br><span class="line">    <span class="function">User <span class="title">findById</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Account"><a href="#Account" class="headerlink" title="Account"></a>Account</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从表实体应该包含一个主表实体的对象引用</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">		</span><br><span class="line">  	<span class="comment">// get set ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  	<span class="comment">// 查询所有账户，同时还要获取到当前账户的所属用户信息</span></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">  </span><br><span class="line">  	<span class="comment">// 查询所有账户，并且带有用户名称和地址信息</span></span><br><span class="line">    <span class="function">List&lt;AccountUser&gt; <span class="title">findAllAccount</span><span class="params">()</span></span>;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="一对一查询"><a href="#一对一查询" class="headerlink" title="一对一查询"></a>一对一查询</h1><p>查询所有账户，和账户对应的用户信息</p>
<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>新建一个AccountUser类，保存用户信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountUser</span> <span class="keyword">extends</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">  	<span class="comment">// get set ...</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>IAccountDao.xml中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAllAccount&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;accountuser&quot;</span>&gt;</span></span><br><span class="line">  select a.*,u.username,u.address from account a , user u where u.id = a.uid;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这种写一个子类的方式实际用得不多</p>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>更常用 -&gt; Account中User对象引用</p>
<p>配置IAccountDao.xml时使用association标签</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义封装account和user的resultMap --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;accountUserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;account&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;aid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;money&quot;</span> <span class="attr">column</span>=<span class="string">&quot;money&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 一对一的关系映射：配置封装user的内容--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;user&quot;</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;address&quot;</span> <span class="attr">property</span>=<span class="string">&quot;address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">property</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 查询所有 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;accountUserMap&quot;</span>&gt;</span></span><br><span class="line">  select u.*,a.id as aid,a.uid,a.money from account a , user u where u.id = a.uid;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="一对多查询"><a href="#一对多查询" class="headerlink" title="一对多查询"></a>一对多查询</h1><p>查询所有用户，和用户下所有账户的信息</p>
<p>IUserDao.xml中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义User的resultMap--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userAccountMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;address&quot;</span> <span class="attr">column</span>=<span class="string">&quot;address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置user对象中accounts集合的映射 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;accounts&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;account&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;aid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;uid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;money&quot;</span> <span class="attr">property</span>=<span class="string">&quot;money&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 查询所有 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userAccountMap&quot;</span>&gt;</span></span><br><span class="line">  select * from user u left outer join account a on u.id = a.uid</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>不能再用inner join（,），改成left outer join</p>
<h1 id="多对多查询（用户-角色）"><a href="#多对多查询（用户-角色）" class="headerlink" title="多对多查询（用户-角色）"></a>多对多查询（用户-角色）</h1><p>步骤：</p>
<ol>
<li><p>三张表（用户表 角色表 还需使用中间表）</p>
</li>
<li><p>两个实体类（体现多对多的关系）</p>
</li>
<li><p>两个配置文件</p>
</li>
<li><p>实现配置</p>
<p>查询用户&amp;用户的角色信息</p>
<p>查询角色&amp;角色的用户信息</p>
</li>
</ol>
<h1 id="三张表"><a href="#三张表" class="headerlink" title="三张表"></a>三张表</h1><p>用户表</p>
<table>
<thead>
<tr>
<th>id</th>
<th>username</th>
<th>address</th>
<th>sex</th>
<th>birthday</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>角色表</p>
<table>
<thead>
<tr>
<th>id</th>
<th>role_name</th>
<th>role_desc</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>院长</td>
<td>管理整个学院</td>
</tr>
<tr>
<td>2</td>
<td>总裁</td>
<td>管理整个公司</td>
</tr>
<tr>
<td>3</td>
<td>校长</td>
<td>管理整个学校</td>
</tr>
</tbody></table>
<p>中间表</p>
<table>
<thead>
<tr>
<th>uid</th>
<th>rid</th>
</tr>
</thead>
<tbody><tr>
<td>41</td>
<td>1</td>
</tr>
<tr>
<td>45</td>
<td>1</td>
</tr>
<tr>
<td>41</td>
<td>2</td>
</tr>
</tbody></table>
<h1 id="两个实体类-1"><a href="#两个实体类-1" class="headerlink" title="两个实体类"></a>两个实体类</h1><h2 id="User-1"><a href="#User-1" class="headerlink" title="User"></a>User</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//多对多的关系映射：一个用户可以具备多个角色</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Role&gt; roles;</span><br><span class="line">  </span><br><span class="line">  	<span class="comment">// get set ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询所有用户，同时获取到用户下所有账户的信息</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">		<span class="comment">// 根据id查询用户信息</span></span><br><span class="line">    <span class="function">User <span class="title">findById</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Role"><a href="#Role" class="headerlink" title="Role"></a>Role</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer roleId;</span><br><span class="line">    <span class="keyword">private</span> String roleName;</span><br><span class="line">    <span class="keyword">private</span> String roleDesc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//多对多的关系映射：一个角色可以赋予多个用户</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; users;</span><br><span class="line"></span><br><span class="line">  	<span class="comment">// get set ...</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IRoleDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询所有角色</span></span><br><span class="line">    <span class="function">List&lt;Role&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="两个配置文件"><a href="#两个配置文件" class="headerlink" title="两个配置文件"></a>两个配置文件</h2><h2 id="User-2"><a href="#User-2" class="headerlink" title="User"></a>User</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义User的resultMap--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;address&quot;</span> <span class="attr">column</span>=<span class="string">&quot;address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置角色集合的映射 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;roles&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;role&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;roleId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;rid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;roleName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;role_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;roleDesc&quot;</span> <span class="attr">column</span>=<span class="string">&quot;role_desc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 查询所有 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line">  select u.*,r.id as rid,r.role_name,r.role_desc from user u</span><br><span class="line">  left outer join user_role ur  on u.id = ur.uid</span><br><span class="line">  left outer join role r on r.id = ur.rid</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 根据id查询用户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;INT&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">  select * from user where id = #&#123;uid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Role-1"><a href="#Role-1" class="headerlink" title="Role"></a>Role</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--定义role表的ResultMap--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;roleMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;role&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;roleId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;rid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;roleName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;role_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;roleDesc&quot;</span> <span class="attr">column</span>=<span class="string">&quot;role_desc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;users&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;address&quot;</span> <span class="attr">property</span>=<span class="string">&quot;address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">property</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--查询所有--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;roleMap&quot;</span>&gt;</span></span><br><span class="line">  select u.*,r.id as rid,r.role_name,r.role_desc from role r</span><br><span class="line">  left outer join user_role ur  on r.id = ur.rid</span><br><span class="line">  left outer join user u on u.id = ur.uid</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>长语句换行的时候注意加空格，防止r left变成rleft</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis笔记08 延迟加载与缓存</title>
    <url>/2020/04/02/note-mybatis-08/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/BV1Db411s7F5">https://www.bilibili.com/video/BV1Db411s7F5</a></p>
<p>P60~67</p>
</blockquote>
<h1 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h1><p>延迟加载：在真正使用数据时才发起查询，不用的时候不查询，按需加载（懒加载）</p>
<p>立即加载：不管用不用，只要一调用方法，马上发起查询</p>
<p>一般一对多、多对多采用延迟加载；多对一、一对一采用立即加载</p>
<p>查官网文档</p>
<p>找到延迟加载的全局开关</p>
<p>在全局配置文件中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置参数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--开启Mybatis支持延迟加载--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;aggressiveLazyLoading&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">setting</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="一对一实现延迟加载"><a href="#一对一实现延迟加载" class="headerlink" title="一对一实现延迟加载"></a>一对一实现延迟加载</h2><p>仍然是IAccountDao的findAll方法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义封装account和user的resultMap --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;accountUserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;account&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;money&quot;</span> <span class="attr">column</span>=<span class="string">&quot;money&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 一对一的关系映射：配置封装user的内容</span></span><br><span class="line"><span class="comment">        select属性指定的内容：查询用户的唯一标识：</span></span><br><span class="line"><span class="comment">        column属性指定的内容：用户根据id查询时，所需要的参数的值</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;user&quot;</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;user&quot;</span> <span class="attr">select</span>=<span class="string">&quot;com.itheima.dao.IUserDao.findById&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 查询所有 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;accountUserMap&quot;</span>&gt;</span></span><br><span class="line">  select * from account</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>IUserDao.xml中需要配</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据id查询用户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;INT&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">  select * from user where id = #&#123;uid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试时</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">  List&lt;Account&gt; accounts = accountDao.findAll();</span><br><span class="line">  <span class="comment">//        for(Account account : accounts)&#123;</span></span><br><span class="line">  <span class="comment">//            System.out.println(&quot;--------每个account的信息------------&quot;);</span></span><br><span class="line">  <span class="comment">//            System.out.println(account);</span></span><br><span class="line">  <span class="comment">//            System.out.println(account.getUser());</span></span><br><span class="line">  <span class="comment">//        &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当把打印用户信息注释掉，调用只findAll()时不会加载每个用户信息</p>
<p>只有实际用到User的时候才会执行查询用户的操作</p>
<h2 id="一对多实现延迟加载"><a href="#一对多实现延迟加载" class="headerlink" title="一对多实现延迟加载"></a>一对多实现延迟加载</h2><p>IUserDao.xml中</p>
<p>不再使用left outer join</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义User的resultMap--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userAccountMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;address&quot;</span> <span class="attr">column</span>=<span class="string">&quot;address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置user对象中accounts集合的映射 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;accounts&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;account&quot;</span> <span class="attr">select</span>=<span class="string">&quot;com.itheima.dao.IAccountDao.findAccountByUid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 查询所有 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userAccountMap&quot;</span>&gt;</span></span><br><span class="line">  select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>IAccountDao.xml中需要</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据用户id查询账户列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAccountByUid&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;account&quot;</span>&gt;</span></span><br><span class="line">  select * from account where uid = #&#123;uid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>实际上都是在要用的时候才去调另一个类中具体的查询方法</p>
<h1 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h1><p>适用于缓存的数据：经常查询且不常修改、数据的正确与否对最终结果影响不大</p>
<h2 id="MyBatis中的一级缓存"><a href="#MyBatis中的一级缓存" class="headerlink" title="MyBatis中的一级缓存"></a>MyBatis中的一级缓存</h2><p>指的是MyBatis中的SqlSession对象的缓存</p>
<p>执行查询后，查询结果会同时存入SqlSession提供的一块区域中，改区域的结构是一个Map</p>
<p>再次查询同样的数据时，MyBatis会先去SqlSession中查询是否有结果，有的话直接拿出来用</p>
<p>当SqlSession对象消失时，一级缓存也消失</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFirstLevelCache</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">// 根据id查询用户</span></span><br><span class="line">  User user1 = userDao.findById(<span class="number">41</span>);</span><br><span class="line">  System.out.println(user1);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 再次查询同一用户</span></span><br><span class="line">  User user2 = userDao.findById(<span class="number">41</span>);</span><br><span class="line">  System.out.println(user2);</span><br><span class="line"></span><br><span class="line">  System.out.println(user1 == user2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>打印发现user1和user2是同一个，且日志信息中只记录了一次查询</p>
<p>说明user2是直接从缓存中取的</p>
<p>如果在两次查询中关闭SqlSession</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFirstLevelCache</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">// 根据id查询用户</span></span><br><span class="line">  User user1 = userDao.findById(<span class="number">41</span>);</span><br><span class="line">  System.out.println(user1);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 关闭并重新获取Session</span></span><br><span class="line">  sqlSession.close();</span><br><span class="line">  sqlSession = factory.openSession();</span><br><span class="line">  userDao = sqlSession.getMapper(IUserDao.class);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 再次查询同一用户</span></span><br><span class="line">  User user2 = userDao.findById(<span class="number">41</span>);</span><br><span class="line">  System.out.println(user2);</span><br><span class="line"></span><br><span class="line">  System.out.println(user1 == user2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这次两个对象不同了</p>
<p>sqlSession.clearCache() 可以清缓存，两个对象也不同</p>
<h2 id="触发清空一级缓存的情况"><a href="#触发清空一级缓存的情况" class="headerlink" title="触发清空一级缓存的情况"></a>触发清空一级缓存的情况</h2><p>调用SqlSession的修改、添加、删除、提交、关闭等方法时，会清空一级缓存</p>
<p>如在两次查询中更新用户</p>
<p>配置文件中加更新方法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 更新用户信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">  update user set username=#&#123;username&#125;,address=#&#123;address&#125; where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试时</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testClearlCache</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">// 1.根据id查询用户</span></span><br><span class="line">  User user1 = userDao.findById(<span class="number">41</span>);</span><br><span class="line">  System.out.println(user1);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.更新用户信息</span></span><br><span class="line">  user1.setUsername(<span class="string">&quot;update user clear cache&quot;</span>);</span><br><span class="line">  user1.setAddress(<span class="string">&quot;北京市海淀区&quot;</span>);</span><br><span class="line">  userDao.updateUser(user1);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3.再次查询id为41的用户</span></span><br><span class="line">  User user2 = userDao.findById(<span class="number">41</span>);</span><br><span class="line">  System.out.println(user2);</span><br><span class="line"></span><br><span class="line">  System.out.println(user1 == user2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>更新之后再查询，会发起一次新的查询</p>
<h2 id="MyBatis中的二级缓存"><a href="#MyBatis中的二级缓存" class="headerlink" title="MyBatis中的二级缓存"></a>MyBatis中的二级缓存</h2><p>指的是MyBatis中SqlSessionFactory对象的缓存，由同一个SqlSessionFactory对象创建的SqlSession共享其缓存</p>
<img src="/images/2020/screencapture2020-04-02PM5.34.35.jpg">

<p>使用步骤：</p>
<ol>
<li><p>让MyBatis框架支持二级缓存（在SqlMapConfig.xml中配置）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（不配也行，默认是true）</p>
</li>
<li><p>让当前的映射文件支持二级缓存（在IUserDao.xml中配置）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启user支持二级缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>让当前的操作支持二级缓存（在select标签中配置）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 根据id查询用户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;INT&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span> <span class="attr">useCache</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">  select * from user where id = #&#123;uid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SqlSession sqlSession1 = factory.openSession();</span><br><span class="line">IUserDao dao1 = sqlSession1.getMapper(IUserDao.class);</span><br><span class="line">User user1 = dao1.findById(<span class="number">41</span>);</span><br><span class="line">System.out.println(user1);</span><br><span class="line">sqlSession1.close();</span><br><span class="line"></span><br><span class="line">SqlSession sqlSession2 = factory.openSession();</span><br><span class="line">IUserDao dao2 = sqlSession2.getMapper(IUserDao.class);</span><br><span class="line">User user2 = dao2.findById(<span class="number">41</span>);</span><br><span class="line">System.out.println(user2);</span><br><span class="line">sqlSession2.close();</span><br><span class="line"></span><br><span class="line">System.out.println(user1 == user2);</span><br></pre></td></tr></table></figure>

<p>发现第二次并没有查询，直接从缓存中获取</p>
<p>但是打印结果为false</p>
<p>因为二级缓存中存放的是数据，而不是对象</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis笔记09 注解开发</title>
    <url>/2020/04/02/note-mybatis-09/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/BV1Db411s7F5">https://www.bilibili.com/video/BV1Db411s7F5</a></p>
<p>P68~75</p>
</blockquote>
<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h2 id="导坐标"><a href="#导坐标" class="headerlink" title="导坐标"></a>导坐标</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="准备实体类和接口"><a href="#准备实体类和接口" class="headerlink" title="准备实体类和接口"></a>准备实体类和接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">  </span><br><span class="line">  	<span class="comment">// get set ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>映射配置文件可以不要了，但主配置文件不能省略</p>
<p>（如果使用注解开发，但相应路径下存在对应的xml，不管用不用都会报错）</p>
<p>SqlMapConfig.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入外部配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbcConfig.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.itheima.domain&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定带有注解的dao接口所在位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.itheima.dao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>jdbcConfig.properties中配置数据库连接信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/eesy_mybatis</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=1234</span><br></pre></td></tr></table></figure>

<h1 id="单表CRUD"><a href="#单表CRUD" class="headerlink" title="单表CRUD"></a>单表CRUD</h1><p>在mybatis中针对CRUD共有四个注解：@Select @Insert @Update @Delete</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  	<span class="comment">// 增</span></span><br><span class="line">  	<span class="meta">@Insert(&quot;insert into user(username,address,sex,birthday)values(#&#123;username&#125;,#&#123;address&#125;,#&#123;sex&#125;,#&#123;birthday&#125;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">  </span><br><span class="line">  	<span class="comment">// 删</span></span><br><span class="line">  	<span class="meta">@Delete(&quot;delete from user where id=#&#123;id&#125; &quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line">  </span><br><span class="line">  	<span class="comment">// 改</span></span><br><span class="line">  	<span class="meta">@Update(&quot;update user set username=#&#123;username&#125;,sex=#&#123;sex&#125;,birthday=#&#123;birthday&#125;,address=#&#123;address&#125; where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 查</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">  </span><br><span class="line">  	<span class="meta">@Select(&quot;select * from user  where id=#&#123;id&#125; &quot;)</span></span><br><span class="line">    <span class="function">User <span class="title">findById</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line">  </span><br><span class="line">  	<span class="comment">// 方法一：这里#&#123;username&#125;没有%，查询时要传入如“%王%”</span></span><br><span class="line">  	<span class="meta">@Select(&quot;select * from user where username like #&#123;username&#125; &quot;)</span></span><br><span class="line">  	<span class="comment">// 方法二：$&#123;&#125;中固定写value，传参时不用写%</span></span><br><span class="line">  	<span class="meta">@Select(&quot;select * from user where username like &#x27;%$&#123;value&#125;%&#x27; &quot;)</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findUserByName</span><span class="params">(String username)</span></span>;</span><br><span class="line">  	<span class="comment">// 区别和之前一样，一个是字符串拼接，一个是参数占位符</span></span><br><span class="line">  </span><br><span class="line">  	<span class="meta">@Select(&quot;select count(*) from user &quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findTotalUser</span><span class="params">()</span></span>;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationCRUDTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> InputStream in;</span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory factory;</span><br><span class="line">    <span class="keyword">private</span> SqlSession session;</span><br><span class="line">    <span class="keyword">private</span> IUserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取字节输入流</span></span><br><span class="line">        in = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.根据字节输入流构建SqlSessionFactory</span></span><br><span class="line">        factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        <span class="comment">// 3.根据SqlSessionFactory生产一个SqlSession</span></span><br><span class="line">        session = factory.openSession();</span><br><span class="line">        <span class="comment">// 4.使用SqlSession获取Dao的代理对象</span></span><br><span class="line">        userDao = session.getMapper(IUserDao.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span><span class="keyword">throws</span>  Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 提交</span></span><br><span class="line">        session.commit();</span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(<span class="string">&quot;mybatis annotation&quot;</span>);</span><br><span class="line">        user.setAddress(<span class="string">&quot;北京市昌平区&quot;</span>);</span><br><span class="line"></span><br><span class="line">        userDao.saveUser(user);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  	<span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实体类属性和数据库不对应问题"><a href="#实体类属性和数据库不对应问题" class="headerlink" title="实体类属性和数据库不对应问题"></a>实体类属性和数据库不对应问题</h2><p>实体类中名称和表中对不上时（userName &amp; username）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String userAddress;</span><br><span class="line">    <span class="keyword">private</span> String userSex;</span><br><span class="line">    <span class="keyword">private</span> Date userBirthday;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以使用别名，但是所有位置都要使用别名，比较麻烦</p>
<p>可以使用@Results注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    <span class="meta">@Results(id=&quot;userMap&quot;,value=&#123;</span></span><br><span class="line"><span class="meta">            @Result(id=true,column = &quot;id&quot;,property = &quot;userId&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;username&quot;,property = &quot;userName&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;address&quot;,property = &quot;userAddress&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;sex&quot;,property = &quot;userSex&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;birthday&quot;,property = &quot;userBirthday&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">  </span><br><span class="line">  	<span class="meta">@Select(&quot;select * from user  where id=#&#123;id&#125; &quot;)</span></span><br><span class="line">    <span class="meta">@ResultMap(&quot;userMap&quot;)</span></span><br><span class="line">    <span class="function">User <span class="title">findById</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主键：id=true</p>
<p>其它位置用@ResultMap引用</p>
<p>标准写法@ResultMap(value={“userMap”})</p>
<p>由于只有一个属性，value可以省略；数组中只有一个元素，{}可以省略</p>
<p>于是可以直接写@ResultMap(“userMap”)</p>
<h1 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h1><h2 id="实体类和接口"><a href="#实体类和接口" class="headerlink" title="实体类和接口"></a>实体类和接口</h2><p>再建一个账户</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line">  </span><br><span class="line">  	<span class="comment">//多对一（mybatis中称为一对一）的映射：一个账户只能属于一个用户</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">  </span><br><span class="line">  	<span class="comment">// get set ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改用户实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String userAddress;</span><br><span class="line">    <span class="keyword">private</span> String userSex;</span><br><span class="line">    <span class="keyword">private</span> Date userBirthday;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一对多关系映射：一个用户对应多个账户</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Account&gt; accounts;</span><br><span class="line">  </span><br><span class="line">  	<span class="comment">// get set ...</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="一对一查询"><a href="#一对一查询" class="headerlink" title="一对一查询"></a>一对一查询</h2><p>查账户以及所属的用户</p>
<p>IAccountDao中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> 	<span class="meta">@Select(&quot;select * from account&quot;)</span></span><br><span class="line">	<span class="meta">@Results(id=&quot;accountMap&quot;,value = &#123;</span></span><br><span class="line"><span class="meta">  @Result(id=true,column = &quot;id&quot;,property = &quot;id&quot;),</span></span><br><span class="line"><span class="meta">  @Result(column = &quot;uid&quot;,property = &quot;uid&quot;),</span></span><br><span class="line"><span class="meta">  @Result(column = &quot;money&quot;,property = &quot;money&quot;),</span></span><br><span class="line"><span class="meta">  @Result(property = &quot;user&quot;,column = &quot;uid&quot;,one=@One(select=&quot;com.itheima.dao.IUserDao.findById&quot;,fetchType= FetchType.EAGER))</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="function">List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>这里不使用left outer join，使用@One</p>
<p>select要找到能实现功能的方法，即IUserDao中findById，来查询账户所属的用户</p>
<p>FetchType可以配置延迟加载（LAZY），或立即加载（EAGER）</p>
<p>实际开发时对一一般选择立即加载，对多一般选择延迟加载</p>
<h2 id="一对多查询"><a href="#一对多查询" class="headerlink" title="一对多查询"></a>一对多查询</h2><p>查一个用户，和该用户对应的多个账户</p>
<p>IUserDao中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line"><span class="meta">@Results(id=&quot;userMap&quot;,value=&#123;</span></span><br><span class="line"><span class="meta">  @Result(id=true,column = &quot;id&quot;,property = &quot;userId&quot;),</span></span><br><span class="line"><span class="meta">  @Result(column = &quot;username&quot;,property = &quot;userName&quot;),</span></span><br><span class="line"><span class="meta">  @Result(column = &quot;address&quot;,property = &quot;userAddress&quot;),</span></span><br><span class="line"><span class="meta">  @Result(column = &quot;sex&quot;,property = &quot;userSex&quot;),</span></span><br><span class="line"><span class="meta">  @Result(column = &quot;birthday&quot;,property = &quot;userBirthday&quot;),</span></span><br><span class="line"><span class="meta">  @Result(property = &quot;accounts&quot;,column = &quot;id&quot;,</span></span><br><span class="line"><span class="meta">          many = @Many(select = &quot;com.itheima.dao.IAccountDao.findAccountByUid&quot;,</span></span><br><span class="line"><span class="meta">                       fetchType = FetchType.LAZY))</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>用@Many</p>
<p>IAccountDao中加一个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from account where uid = #&#123;userId&#125;&quot;)</span></span><br><span class="line"><span class="function">List&lt;Account&gt; <span class="title">findAccountByUid</span><span class="params">(Integer userId)</span></span>;</span><br></pre></td></tr></table></figure>

<h1 id="缓存配置"><a href="#缓存配置" class="headerlink" title="缓存配置"></a>缓存配置</h1><p>不管用xml还是注解，一级缓存默认都是开的</p>
<p>打开二级注解，全局配置默认也是打开</p>
<p>对于单个类，使用@CacheNamespace（默认是false）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CacheNamespace(blocking = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>即可开启二级缓存</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC笔记01 入门</title>
    <url>/2020/04/03/note-springmvc-01/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/BV1Sb411s7qa">https://www.bilibili.com/video/BV1Sb411s7qa</a></p>
<p>p1~9</p>
</blockquote>
<p>SpringMVC是一个基于Java的、实现MVC设计模型的、请求驱动类型的轻量级Web框架</p>
<p>使用Spring进行web开发时，可以选择SpringMVC，也可以集成其它框架如Struts2</p>
<p>它通过一套注解，让一个简单的Java类成为处理请求的控制器，而无需实现任何接口</p>
<p>支持RESTful风格的请求</p>
<img src="/images/2020/screencapture2020-03-26PM10.20.30.jpg">

<h1 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h1><p>需求：</p>
<img src="/images/2020/screencapture2020-04-03 AM10.39.54.jpg">

<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>Idea创建Maven工程，选择webapp</p>
<p>maven项目创建时，可以加一组键值对archetypeCatalog : internal，解决加载慢的问题</p>
<p>建立的工程目录是不全的，在src/main下手动加上java、resource文件夹，并右键Mark Directory as设置为源码、资源文件夹</p>
<h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 编译版本改成1.8 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- spring版本锁定，下面直接引用 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h2><p>配置前端控制器（servlet）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加载springmvc的配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 启动服务器时加载 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="springmvc的配置文件"><a href="#springmvc的配置文件" class="headerlink" title="springmvc的配置文件"></a>springmvc的配置文件</h2><p>在resources中New-&gt;XML Configuration File-&gt;Spring Config</p>
<p>名称没有要求，这里叫springmvc</p>
<p>导入名称空间，开启注解扫描</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开启注解扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.test&quot;</span>/&gt;</span></span><br><span class="line">  </span><br><span class="line">  	<span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置文件目录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/pages&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置后缀名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  	<span class="comment">&lt;!-- 开启SpringMVC框架注解支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="部署服务器"><a href="#部署服务器" class="headerlink" title="部署服务器"></a>部署服务器</h2><p>Add Configuration</p>
<p>加一个本地的Tomcat</p>
<p>在Deployment中添加</p>
<img src="/images/2020/screencapture2020-04-03 AM11.15.26.jpg">

<h1 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h1><h2 id="index-jsp"><a href="#index-jsp" class="headerlink" title="index.jsp"></a>index.jsp</h2><p>默认自带的index.jsp没有头文件信息，中文可能会有乱码问题</p>
<p>可以删了重新创建一个</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;入门程序&lt;/h1&gt;</span><br><span class="line">    &lt;a href=<span class="string">&quot;hello&quot;</span>&gt;点这里&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="HelloController-java"><a href="#HelloController-java" class="headerlink" title="HelloController.java"></a>HelloController.java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(path=&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello Spring&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里返回”success”，规则默认返回这个名字的jsp</p>
<h2 id="success-jsp"><a href="#success-jsp" class="headerlink" title="success.jsp"></a>success.jsp</h2><p>可以在WEB-INF中新建pages文件夹，在里面新建success.jsp</p>
<p>加一个一级标题</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;成功&lt;/h1&gt;</span><br></pre></td></tr></table></figure>

<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><img src="/images/2020/screencapture2020-04-03 AM11.39.30.jpg">

<p>点击</p>
<img src="/images/2020/screencapture2020-04-03 AM11.40.09.jpg">

<p>控制台输出</p>
<img src="/images/2020/screencapture2020-04-03 AM11.40.58.jpg">

<p>成功</p>
<h1 id="入门案例流程总结"><a href="#入门案例流程总结" class="headerlink" title="入门案例流程总结"></a>入门案例流程总结</h1> <img src="/images/2020/screencapture2020-04-04 PM5.05.25.jpg">

 <img src="/images/2020/screencapture2020-04-04 PM5.06.01.jpg">

<h1 id="RequestMapping注解"><a href="#RequestMapping注解" class="headerlink" title="RequestMapping注解"></a>RequestMapping注解</h1><p><strong>作用</strong></p>
<p>建立请求url和处理请求方法之间的对应关系</p>
<p>可以加在方法上，也可以加在类上（相当于一级目录）</p>
<p>如类上加”/user”，方法上加”/hello”，跳转时请求路径为”user/hello”</p>
<p><strong>属性</strong></p>
<p>path和value：作用相同，指映射路径，当只有value一个属性时，”value=”可以省略不写</p>
<p>method：指当前方法可以接受的请求方式，参数可以是数组，里面是枚举类型（如RequestMathod.POST）</p>
<p>params：用于指定限制请求参数的条件，支持简单的表达式（如params={“username=he”}，表示请求参数中必须有username，且值必须为he）</p>
<p>headers：发送的请求必须包含请求头</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC笔记02 请求参数的绑定</title>
    <url>/2020/04/04/note-springmvc-02/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/BV1Sb411s7qa">https://www.bilibili.com/video/BV1Sb411s7qa</a></p>
<p>P11~16</p>
</blockquote>
<h1 id="简单参数"><a href="#简单参数" class="headerlink" title="简单参数"></a>简单参数</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;param/testParam?username=hehe&amp;password=123&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testParam&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testParam</span><span class="params">(String username,String password)</span></span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="绑定实体类型"><a href="#绑定实体类型" class="headerlink" title="绑定实体类型"></a>绑定实体类型</h1><p>实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line">  </span><br><span class="line">  	<span class="comment">// get set ...</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>表单</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;param/saveAccount&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">  姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  金额：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;money&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>绑定</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 请求参数绑定把数据封装到JavaBean的类中</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/saveAccount&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">saveAccount</span><span class="params">(Account account)</span></span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;执行了...&quot;</span>);</span><br><span class="line">  System.out.println(account);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><p>实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String uname;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">  </span><br><span class="line">  	<span class="comment">// get set ...</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line"></span><br><span class="line">   	<span class="keyword">private</span> User user;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>表单</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;param/saveAccount&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">  姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  金额：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;money&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  用户姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user.uname&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  用户年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user.age&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="集合类型"><a href="#集合类型" class="headerlink" title="集合类型"></a>集合类型</h2><p>实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; list;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,User&gt; map;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>表单</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;param/saveAccount&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">  姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  金额：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;money&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  用户姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;list[0].uname&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  用户年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;list[0].age&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  用户姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;map[&#x27;one&#x27;].uname&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  用户年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;map[&#x27;one&#x27;].age&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>map中放key值，这里是’one’</p>
<h1 id="自定义类型转换器"><a href="#自定义类型转换器" class="headerlink" title="自定义类型转换器"></a>自定义类型转换器</h1><p>页面提交的数据都是字符串类型</p>
<p>基本类型可以自动转，如Integer</p>
<p>但日期类型可能不支持某些格式，需要自定义类型转换器</p>
<p>例如，给User加一个Date属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String uname;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date date;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;param/saveUser&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">  用户姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;uname&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  用户年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  用户生日：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;date&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/saveUser&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">saveUser</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;执行了...&quot;</span>);</span><br><span class="line">  System.out.println(user);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在生日框中输入”2000/11/11”发现可以正常封装</p>
<p>但是”2000-11-11”出现Bad Request</p>
<p>需要写一个类型转换类并注册</p>
<p>需要实现Converter接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringToDateConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>,<span class="title">Date</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String source)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(source == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;请您传入数据&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        DateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> df.parse(source);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;数据类型转换出现错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在springmvc.xml中配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置自定义类型转换器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;conversionService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;converters&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;cn.itcast.utils.StringToDateConverter&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 开启SpringMVC框架注解的支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">&quot;conversionService&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="解决中文乱码"><a href="#解决中文乱码" class="headerlink" title="解决中文乱码"></a>解决中文乱码</h1><p>在web.xml中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置解决中文乱码的过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="获取Servlet原生的API"><a href="#获取Servlet原生的API" class="headerlink" title="获取Servlet原生的API"></a>获取Servlet原生的API</h1><p>直接在方法上加参数即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testServlet&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testServlet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;执行了...&quot;</span>);</span><br><span class="line">  System.out.println(request);</span><br><span class="line"></span><br><span class="line">  HttpSession session = request.getSession();</span><br><span class="line">  System.out.println(session);</span><br><span class="line"></span><br><span class="line">  ServletContext servletContext = session.getServletContext();</span><br><span class="line">  System.out.println(servletContext);</span><br><span class="line"></span><br><span class="line">  System.out.println(response);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC笔记03 常用注解</title>
    <url>/2020/04/04/note-springmvc-03/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/BV1Sb411s7qa">https://www.bilibili.com/video/BV1Sb411s7qa</a></p>
<p>P17~24</p>
</blockquote>
<h1 id="RequestParam"><a href="#RequestParam" class="headerlink" title="RequestParam"></a>RequestParam</h1><p>作用：把请求中的指定名称的参数传递给控制器中的形参赋值</p>
<p>属性：</p>
<ul>
<li>value：请求参数中的名称</li>
<li>required：请求参数中是否必须提供此参数，默认值是true，必须提供</li>
</ul>
<p>如，方法中需要name属性，但是url中传的是username属性，就会封装不上</p>
<p>可以用@RequestParam修饰参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(path=&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(<span class="meta">@RequestParam(value=&quot;username&quot;,required=false)</span>String name)</span> </span>&#123;</span><br><span class="line">  System.out.println(name); </span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="RequestBody"><a href="#RequestBody" class="headerlink" title="RequestBody"></a>RequestBody</h1><p>作用：用于获取请求体的内容（get方法不适用）</p>
<p>直接使用得到的是key=value&amp;key=value结构的数据</p>
<p>属性：</p>
<ul>
<li>required：是否必须有请求体，默认值是true</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;anno/testRequestBody&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">  用户姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  用户年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(path=&quot;/testRequestBody&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(<span class="meta">@RequestBody</span> String body)</span> </span>&#123;</span><br><span class="line">	System.out.println(body);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后面传json数据时会用到</p>
<h1 id="PathVariable"><a href="#PathVariable" class="headerlink" title="PathVariable"></a>PathVariable</h1><p>作用：用于绑定 url 中的占位符（如:请求 /delete/{id}中的{id}）</p>
<p>用于支持RESTful风格</p>
<p>属性：</p>
<ul>
<li>value：用于指定 url 中占位符名称</li>
<li>required：是否必须提供占位符</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;springmvc/usePathVariable/100&quot;</span>&gt;</span>pathVariable 注解<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/usePathVariable/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">usePathVariable</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">	System.out.println(id);</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用RESTful风格时</p>
<p>由于浏览器form表单只支持GET与POST请求，而不支持DELETE、PUT</p>
<p>Spring3.0提供了一个过滤器HiddentHttpMethodFilter，可以将浏览器请求修改为指定方式，但比较麻烦</p>
<p>还有WebClient类可以使用静态方法模拟各种请求方式</p>
<p>或者可以给浏览器装插件</p>
<h1 id="RequestHeader"><a href="#RequestHeader" class="headerlink" title="RequestHeader"></a>RequestHeader</h1><p>作用：获取请求消息头</p>
<p>属性：</p>
<ul>
<li>value：提供消息头名称</li>
<li>required：是否必须有此消息头</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/useRequestHeader&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">useRequestHeader</span><span class="params">(<span class="meta">@RequestHeader(value=&quot;Accept-Language&quot;,</span></span></span></span><br><span class="line"><span class="meta"><span class="params"><span class="function">required=false)</span>String requestHeader)</span></span>&#123; </span><br><span class="line">  System.out.println(requestHeader);</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="CookieValue"><a href="#CookieValue" class="headerlink" title="CookieValue"></a>CookieValue</h1><p>作用：获取Cookie的值</p>
<p>属性：</p>
<ul>
<li>value：指定 cookie 的名称</li>
<li>required：是否必须</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/useCookieValue&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">useCookieValue</span><span class="params">(<span class="meta">@CookieValue(value=&quot;JSESSIONID&quot;,required=false)</span> String cookieValue)</span></span>&#123;</span><br><span class="line">	System.out.println(cookieValue);</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="ModelAttribute"><a href="#ModelAttribute" class="headerlink" title="ModelAttribute"></a>ModelAttribute</h1><p>作用：加在方法上，该方法在控制器的方法执行前先执行；加在参数上，获取指定的数据给参数赋值</p>
<p>属性：</p>
<ul>
<li>value：用于获取数据的 key（key 可以是 POJO 的属性名称，也可以是 map 结构的 key）</li>
</ul>
<p>应用场景：</p>
<p>表单提交数据不完整时，先从数据库查用户信息，没有提交数据的字段用原值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 修改用户信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;springmvc/updateUser&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span> </span><br><span class="line">  用户名称:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> &gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">	用户年龄:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> &gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;保存&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="ModelAttribute-修饰方法带返回值"><a href="#ModelAttribute-修饰方法带返回值" class="headerlink" title="ModelAttribute 修饰方法带返回值"></a>ModelAttribute 修饰方法带返回值</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">showModel</span><span class="params">(String username)</span> </span>&#123; </span><br><span class="line">  <span class="comment">//模拟去数据库查询</span></span><br><span class="line">	User abc = findUserByName(username); </span><br><span class="line">  System.out.println(<span class="string">&quot;执行了 showModel 方法&quot;</span>+abc);</span><br><span class="line">	<span class="keyword">return</span> abc; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/updateUser&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testModelAttribute</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;控制器中处理请求的方法:修改用户:&quot;</span>+user);</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ModelAttribute-修饰方法不带返回值"><a href="#ModelAttribute-修饰方法不带返回值" class="headerlink" title="ModelAttribute 修饰方法不带返回值"></a>ModelAttribute 修饰方法不带返回值</h2><p>放到map中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showModel</span><span class="params">(String username,Map&lt;String,User&gt; map)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//模拟去数据库查询</span></span><br><span class="line">	User user = findUserByName(username); </span><br><span class="line">  System.out.println(<span class="string">&quot;执行了 showModel 方法&quot;</span>+user); </span><br><span class="line">  map.put(<span class="string">&quot;abc&quot;</span>,user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/updateUser&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testModelAttribute</span><span class="params">(<span class="meta">@ModelAttribute(&quot;abc&quot;)</span>User user)</span> </span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;控制器中处理请求的方法:修改用户:&quot;</span>+user);</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="SessionAttribute"><a href="#SessionAttribute" class="headerlink" title="SessionAttribute"></a>SessionAttribute</h1><p>作用：多次执行控制器方法间的参数共享</p>
<p>属性：</p>
<ul>
<li>value：指定存入的属性名称</li>
<li>type：指定存入的数据类型</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- SessionAttribute 注解的使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;springmvc/testPut&quot;</span>&gt;</span>存入SessionAttribute<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;springmvc/testGet&quot;</span>&gt;</span>取出SessionAttribute<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;springmvc/testClean&quot;</span>&gt;</span>清除SessionAttribute<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller(&quot;sessionAttributeController&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/springmvc&quot;)</span></span><br><span class="line"><span class="meta">@SessionAttributes(value =&#123;&quot;username&quot;,&quot;password&quot;&#125;,types=&#123;Integer.class&#125;)</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionAttributeController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@RequestMapping(&quot;/testPut&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">testPut</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;泰斯特&quot;</span>);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@RequestMapping(&quot;/testGet&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">testGet</span><span class="params">(ModelMap model)</span></span>&#123;</span><br><span class="line">    System.out.println(model.get(<span class="string">&quot;username&quot;</span>)+<span class="string">&quot;;&quot;</span>+model.get(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>; </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@RequestMapping(&quot;/testClean&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">complete</span><span class="params">(SessionStatus sessionStatus)</span></span>&#123;</span><br><span class="line">		sessionStatus.setComplete();</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>; </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title>Underwelming</title>
    <url>/2020/04/06/excerpt/</url>
    <content><![CDATA[<blockquote>
<p>软件最大的好处就是让一切变得简单。但是，做到这一点的方法是正确设置默认值，而不是限制用户的选择。</p>
<p>—— Paul Graham《黑客与画家》</p>
</blockquote>
<p>上次看这本书的时候都没有注意到这句话</p>
<p>这次见到视线都挪不走了</p>
<p>可能是Spring后遗症</p>
<p>想起曾经某次听到的介绍Apple Design Award Winning App</p>
<p>其中Pixelmator Photo的魔法棒可以用”Underwelming”来形容</p>
<p>不仅是正确设置默认值，同时动态展示诸多参数的变化，让用户看到变化的起因和结果</p>
<blockquote>
<ul>
<li><p>Reaveal what’s behind the App’s intelligence</p>
</li>
<li><p>Allow adjustments</p>
</li>
</ul>
</blockquote>
<p>这条规律似乎适用很广呢</p>
<p>唉 这么看的话之前自己的App为了简化操作而疯狂缩减可调节的参数实在不妥</p>
]]></content>
      <categories>
        <category>Memo</category>
      </categories>
  </entry>
  <entry>
    <title>SpringMVC笔记04 响应数据和结果视图</title>
    <url>/2020/04/06/note-springmvc-04/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/BV1Sb411s7qa">https://www.bilibili.com/video/BV1Sb411s7qa</a></p>
<p>P25~32</p>
</blockquote>
<h1 id="返回值类型"><a href="#返回值类型" class="headerlink" title="返回值类型"></a>返回值类型</h1><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testReturnString&quot;)</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testReturnString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回字符串可以指定逻辑视图名，通过视图解析器解析为物理视图地址</p>
<p>此处返回”success”将跳转到success.jsp</p>
<p><strong>应用</strong></p>
<p>从数据库中取User并存入Model</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testReturnString&quot;)</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testReturnString</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 模拟从数据库查询出User对象</span></span><br><span class="line">  User user = <span class="keyword">new</span> User();</span><br><span class="line">  user.setUsername(<span class="string">&quot;ha&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 存入Model</span></span><br><span class="line">  model.addAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 跳转到success.jsp</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在success.jsp中取出User</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> isELIgnored=<span class="string">&quot;false&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h3&gt;执行成功&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">    $&#123;user.username&#125;</span><br><span class="line">    $&#123;user.password&#125;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="void"><a href="#void" class="headerlink" title="void"></a>void</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testVoid&quot;)</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testReturnString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果没有返回值，默认根据请求路径跳转，如此处会找testVoid.jsp</p>
<p>修改需要用到Request、Response对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testVoid&quot;)</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testReturnString</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  <span class="comment">// 请求转发</span></span><br><span class="line">  request.getRequestDispatcher(<span class="string">&quot;/WEB-INF/pages/success.jsp&quot;</span>).forward(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也可以用response重定向</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 例1</span></span><br><span class="line">response.sendRedirect(request.getContextPath()+<span class="string">&quot;index.jsp&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例2</span></span><br><span class="line">response.sendRedirect(<span class="string">&quot;testRetrunString&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>或者指定响应结果，例如响应json数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>); response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>); response.getWriter().write(<span class="string">&quot;HELLO&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="ModelAndView"><a href="#ModelAndView" class="headerlink" title="ModelAndView"></a>ModelAndView</h2><p>ModelAndView 是 SpringMVC 提供的一个对象</p>
<p>内部有一个Model，可以存数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testReturnModelAndView&quot;)</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">testReturnModelAndView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 创建ModelAndView对象</span></span><br><span class="line">	ModelAndView mv = <span class="keyword">new</span> ModelAndView(); </span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 模拟从数据库查询出User对象</span></span><br><span class="line">  User user = <span class="keyword">new</span> User();</span><br><span class="line">  user.setUsername(<span class="string">&quot;ha&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 可以存对象</span></span><br><span class="line">  mv.addObject(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">  <span class="comment">// 也可以直接存键值对</span></span><br><span class="line">  mv.addObject(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;张三&quot;</span>); </span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 指定跳转到哪个页面</span></span><br><span class="line">  mv.setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="转发和重定向"><a href="#转发和重定向" class="headerlink" title="转发和重定向"></a>转发和重定向</h1><p>使用关键字进行转发和重定向时，无法使用视图解析器，需要自己写路径，用得不多</p>
<h2 id="forward"><a href="#forward" class="headerlink" title="forward"></a>forward</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testForward&quot;)</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testForward</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;forward:/WEB-INF/pages/success.jsp&quot;</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>路径必须写实际视图url，不能写逻辑视图</p>
<p>既可以转发到jsp，也可以转发到其他的控制器方法</p>
<h2 id="redirect"><a href="#redirect" class="headerlink" title="redirect"></a>redirect</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRedirect&quot;)</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRedirect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// return &quot;redirect:/index.jsp&quot;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;redirect:testReturnModelAndView&quot;</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果重定向到jsp页面，页面不能再WEB-INF中，会找不到</p>
<h1 id="响应json"><a href="#响应json" class="headerlink" title="响应json"></a>响应json</h1><p>使用@ResponseBody 注解实现将 controller 方法返回对象转换为 json 响应给客户端</p>
<p>在webapp目录下新建js文件夹，把jquery.main.js复制进去，要用的jsp中引入</p>
<p><strong>response.jsp</strong></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script src=<span class="string">&quot;js/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">// 页面加载，绑定单击事件</span></span><br><span class="line">        $(function()&#123;</span><br><span class="line">            $(<span class="string">&quot;#btn&quot;</span>).click(function()&#123;</span><br><span class="line">                 alert(<span class="string">&quot;hello btn&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;button id=<span class="string">&quot;btn&quot;</span>&gt;发送ajax的请求&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>然而此时在页面中点击按钮，不会有响应</p>
<p>因为虽然引入了jquery.min.js</p>
<p>但是在web.xml中配置的DispatcherServlet拦截路径”/“，也会拦截静态的资源文件</p>
<h2 id="过滤静态资源"><a href="#过滤静态资源" class="headerlink" title="过滤静态资源"></a>过滤静态资源</h2><p>在springmvc.xml中配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--前端控制器，哪些静态资源不拦截--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">&quot;/css/&quot;</span> <span class="attr">mapping</span>=<span class="string">&quot;/css/**&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">&quot;/images/&quot;</span> <span class="attr">mapping</span>=<span class="string">&quot;/images/**&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">&quot;/js/&quot;</span> <span class="attr">mapping</span>=<span class="string">&quot;/js/**&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置之后再点击按钮，就会有弹框了</p>
<h2 id="发送ajax请求"><a href="#发送ajax请求" class="headerlink" title="发送ajax请求"></a>发送ajax请求</h2><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// 页面加载，绑定单击事件</span></span><br><span class="line">  $(function()&#123;</span><br><span class="line">    $(<span class="string">&quot;#btn&quot;</span>).click(function()&#123;</span><br><span class="line">      <span class="comment">// 发送ajax请求</span></span><br><span class="line">      $.ajax(&#123;</span><br><span class="line">        <span class="comment">// 编写json格式，设置属性和值</span></span><br><span class="line">        url:<span class="string">&quot;user/testAjax&quot;</span>,</span><br><span class="line">        contentType:<span class="string">&quot;application/json;charset=UTF-8&quot;</span>,</span><br><span class="line">        data:<span class="string">&#x27;&#123;&quot;username&quot;:&quot;hehe&quot;,&quot;password&quot;:&quot;123&quot;,&quot;age&quot;:30&#125;&#x27;</span>,</span><br><span class="line">        dataType:<span class="string">&quot;json&quot;</span>,</span><br><span class="line">        type:<span class="string">&quot;post&quot;</span>,</span><br><span class="line">        success:function(data)&#123;</span><br><span class="line">          <span class="comment">// data是服务器端响应的json数据</span></span><br><span class="line">          alert(data);</span><br><span class="line">          alert(data.username);</span><br><span class="line">          alert(data.password);</span><br><span class="line">          alert(data.age);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="响应json格式数据"><a href="#响应json格式数据" class="headerlink" title="响应json格式数据"></a>响应json格式数据</h2><p>Springmvc 默认用 MappingJacksonHttpMessageConverter 对 json 数据进行转换，需要加入 jackson 的包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>客户端发送的ajax请求，传的是json字符串，后端将其封装到user对象中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模拟异步请求响应</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/testAjax&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">User <span class="title">testAjax</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span></span>&#123;</span><br><span class="line">  <span class="comment">// 响应，模拟查询数据库</span></span><br><span class="line">  user.setUsername(<span class="string">&quot;haha&quot;</span>);</span><br><span class="line">  user.setAge(<span class="number">40</span>);</span><br><span class="line">  <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>加@ResponseBody，把user转成json</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC笔记05 文件上传</title>
    <url>/2020/04/06/note-springmvc-05/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/BV1Sb411s7qa">https://www.bilibili.com/video/BV1Sb411s7qa</a></p>
<p>P33~38</p>
</blockquote>
<h1 id="传统方式"><a href="#传统方式" class="headerlink" title="传统方式"></a>传统方式</h1><p>上传的文件和访问的应用在同一台服务器上</p>
<h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p>使用 Commons-fileupload 组件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="jsp页面"><a href="#jsp页面" class="headerlink" title="jsp页面"></a>jsp页面</h2><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;/user/fileupload1&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">  选择文件：&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;upload&quot;</span> /&gt;&lt;br/&gt;</span><br><span class="line">  &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;上传&quot;</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<h2 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用fileupload组件完成文件上传</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/fileupload1&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">fileuoload1</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 上传的位置</span></span><br><span class="line">  String path = request.getSession().getServletContext().getRealPath(<span class="string">&quot;/uploads/&quot;</span>);</span><br><span class="line">  <span class="comment">// 判断路径是否存在</span></span><br><span class="line">  File file = <span class="keyword">new</span> File(path);</span><br><span class="line">  <span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">    <span class="comment">// 创建该文件夹</span></span><br><span class="line">    file.mkdirs();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 解析request对象，获取上传文件项</span></span><br><span class="line">  DiskFileItemFactory factory = <span class="keyword">new</span> DiskFileItemFactory();</span><br><span class="line">  ServletFileUpload upload = <span class="keyword">new</span> ServletFileUpload(factory);</span><br><span class="line">  <span class="comment">// 解析request</span></span><br><span class="line">  List&lt;FileItem&gt; items = upload.parseRequest(request);</span><br><span class="line">  <span class="comment">// 遍历</span></span><br><span class="line">  <span class="keyword">for</span>(FileItem item:items)&#123;</span><br><span class="line">    <span class="comment">// 判断当前item对象是否是上传文件项</span></span><br><span class="line">    <span class="keyword">if</span>(item.isFormField())&#123;</span><br><span class="line">      <span class="comment">// 普通表单向</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="comment">// 获取上传文件的名称</span></span><br><span class="line">      String filename = item.getName();</span><br><span class="line">      <span class="comment">// 把文件的名称设置唯一值，uuid</span></span><br><span class="line">      String uuid = UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">      filename = uuid+<span class="string">&quot;_&quot;</span>+filename;</span><br><span class="line">      <span class="comment">// 完成文件上传</span></span><br><span class="line">      item.write(<span class="keyword">new</span> File(path,filename));</span><br><span class="line">      <span class="comment">// 删除临时文件</span></span><br><span class="line">      item.delete();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试上传后</p>
<p>在target/uploads中找到上传的文件</p>
<h1 id="SpringMVC传统方式上传"><a href="#SpringMVC传统方式上传" class="headerlink" title="SpringMVC传统方式上传"></a>SpringMVC传统方式上传</h1><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><img src="/images/2020/screencapture2020-04-06 AM11.14.41.jpg">

<h2 id="jsp页面-1"><a href="#jsp页面-1" class="headerlink" title="jsp页面"></a>jsp页面</h2><p>和传统方式一样</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;/user/fileupload2&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">  选择文件：&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;upload&quot;</span> /&gt;&lt;br/&gt;</span><br><span class="line">  &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;上传&quot;</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<h2 id="配置文件解析器"><a href="#配置文件解析器" class="headerlink" title="配置文件解析器"></a>配置文件解析器</h2><p>spingmvc.xml中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置文件解析器对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10*1024*1024&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>里面可以设置一些属性，如文件大小</p>
<h2 id="控制器-1"><a href="#控制器-1" class="headerlink" title="控制器"></a>控制器</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/fileupload2&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">fileuoload2</span><span class="params">(HttpServletRequest request, MultipartFile upload)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 上传的位置</span></span><br><span class="line">  String path = request.getSession().getServletContext().getRealPath(<span class="string">&quot;/uploads/&quot;</span>);</span><br><span class="line">  <span class="comment">// 判断该路径是否存在</span></span><br><span class="line">  File file = <span class="keyword">new</span> File(path);</span><br><span class="line">  <span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">    <span class="comment">// 创建该文件夹</span></span><br><span class="line">    file.mkdirs();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取上传文件的名称</span></span><br><span class="line">  String filename = upload.getOriginalFilename();</span><br><span class="line">  <span class="comment">// 把文件的名称设置唯一值，uuid</span></span><br><span class="line">  String uuid = UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">  filename = uuid+<span class="string">&quot;_&quot;</span>+filename;</span><br><span class="line">  <span class="comment">// 完成文件上传</span></span><br><span class="line">  upload.transferTo(<span class="keyword">new</span> File(path,filename));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>相较传统方式，省了解析操作，简化上传步骤</p>
<h1 id="SpringMVC跨服务器上传"><a href="#SpringMVC跨服务器上传" class="headerlink" title="SpringMVC跨服务器上传"></a>SpringMVC跨服务器上传</h1><img src="/images/2020/screencapture2020-04-06 AM11.25.56.jpg">

<p>用2个tomcat服务器，文件服务器端口号此处用的9090</p>
<h2 id="文件服务器"><a href="#文件服务器" class="headerlink" title="文件服务器"></a>文件服务器</h2><p>新建一个工程</p>
<p>在webapp下新建uploads文件夹用来存文件</p>
<p>启动</p>
<h2 id="依赖-1"><a href="#依赖-1" class="headerlink" title="依赖"></a>依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.jersey<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jersey-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.jersey<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jersey-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="jsp页面-2"><a href="#jsp页面-2" class="headerlink" title="jsp页面"></a>jsp页面</h2><p>仍没什么区别</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;/user/fileupload3&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">  选择文件：&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;upload&quot;</span> /&gt;&lt;br/&gt;</span><br><span class="line">  &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;上传&quot;</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<h2 id="控制器-2"><a href="#控制器-2" class="headerlink" title="控制器"></a>控制器</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/fileupload3&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">fileuoload3</span><span class="params">(MultipartFile upload)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义上传文件服务器路径</span></span><br><span class="line">  String path = <span class="string">&quot;http://localhost:9090/uploads/&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取上传文件的名称</span></span><br><span class="line">  String filename = upload.getOriginalFilename();</span><br><span class="line">  <span class="comment">// 把文件的名称设置唯一值，uuid</span></span><br><span class="line">  String uuid = UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">  filename = uuid+<span class="string">&quot;_&quot;</span>+filename;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建客户端的对象</span></span><br><span class="line">  Client client = Client.create();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 和图片服务器进行连接</span></span><br><span class="line">  WebResource webResource = client.resource(path + filename);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 上传文件</span></span><br><span class="line">  webResource.put(upload.getBytes());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>出现409异常可以手动创建一下uploads文件夹</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC笔记06 异常处理与拦截器</title>
    <url>/2020/04/07/note-springmvc-06/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/BV1Sb411s7qa">https://www.bilibili.com/video/BV1Sb411s7qa</a></p>
<p>P39~45</p>
</blockquote>
<h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><img src="/images/2020/screencapture2020-04-07 AM9.52.33.jpg">

<p>如果什么都不做，产生异常时（模拟可以除0），会出现500 Internal Server Error</p>
<p>教务系统就是这样🙃</p>
<p><strong>解决步骤</strong></p>
<ol>
<li>编写自定义异常类（用作提示信息）</li>
<li>编写异常处理器</li>
<li>配置异常处理器（跳转到提示页面）</li>
</ol>
<h2 id="自定义异常类"><a href="#自定义异常类" class="headerlink" title="自定义异常类"></a>自定义异常类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储提示信息</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get set constructor ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h2><p>捕获异常，抛自定义异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testException&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testException</span><span class="params">()</span> <span class="keyword">throws</span> SysException</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 模拟异常</span></span><br><span class="line">            <span class="keyword">int</span> a = <span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">// 抛出自定义异常信息</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SysException(<span class="string">&quot;查询所有用户出现错误了...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="异常处理器"><a href="#异常处理器" class="headerlink" title="异常处理器"></a>异常处理器</h2><p>实现HandlerExceptionResolver接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysExceptionResolver</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  	<span class="comment">// 处理异常的逻辑</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取到异常对象</span></span><br><span class="line">        SysException e = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(ex <span class="keyword">instanceof</span> SysException)&#123;</span><br><span class="line">            e = (SysException)ex;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            e = <span class="keyword">new</span> SysException(<span class="string">&quot;系统正在维护....&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建ModelAndView对象</span></span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mv.addObject(<span class="string">&quot;errorMsg&quot;</span>,e.getMessage());</span><br><span class="line">        mv.setViewName(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="配置异常处理器"><a href="#配置异常处理器" class="headerlink" title="配置异常处理器"></a>配置异常处理器</h2><p>在springmvc.xml中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置异常处理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sysExceptionResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.itcast.exception.SysExceptionResolver&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="错误提示页面"><a href="#错误提示页面" class="headerlink" title="错误提示页面"></a>错误提示页面</h2><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> isELIgnored=<span class="string">&quot;false&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    $&#123;errorMsg&#125;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h1 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h1><p>SpringMVC的拦截器用于对处理器进行预处理和后处理，类似Servlet的过滤器 Filter</p>
<p>是AOP的体现</p>
<p><strong>拦截器链</strong></p>
<p>将拦截器按一定的顺序联结成一条链，按顺序调用</p>
<p><strong>与过滤器的区别</strong></p>
<p>过滤器是Servlet规范中的一部分，任何java web工程都可以用；拦截器是Spring MVC框架的</p>
<p>过滤器在url-pattern中配置了”/*”后，可以对所有要访问的资源拦截；拦截器只会拦截访问的控制器方法，不会拦截jsp、html等</p>
<p><strong>使用步骤</strong></p>
<ol>
<li>编写拦截器，实现HandlerInterceptor接口</li>
<li>配置拦截器</li>
</ol>
<h2 id="控制器-1"><a href="#控制器-1" class="headerlink" title="控制器"></a>控制器</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/testInterceptor&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;testInterceptor执行了...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="自定义拦截器"><a href="#自定义拦截器" class="headerlink" title="自定义拦截器"></a>自定义拦截器</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor1</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  	<span class="comment">// 预处理，controller方法执行前</span></span><br><span class="line">  	<span class="comment">// return true 放行，执行下一个拦截器，如果没有，执行controller中的方法</span></span><br><span class="line">    <span class="comment">// return false 不放行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyInterceptor1执行了...前&quot;</span>);</span><br><span class="line">      	<span class="comment">// 也可以请求转发</span></span><br><span class="line">        <span class="comment">// request.getRequestDispatcher(&quot;/WEB-INF/pages/error.jsp&quot;).forward(request,response);</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后处理方法，controller方法执行后，success.jsp执行之前</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyInterceptor1执行了...后&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// success.jsp页面执行后，该方法会执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyInterceptor1执行了...最后&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>springmvc.xml中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置拦截器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--要拦截的具体的方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/user/*&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--不要拦截的方法</span></span><br><span class="line"><span class="comment">            &lt;mvc:exclude-mapping path=&quot;&quot;/&gt; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置拦截器对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;cn.itcast.controller.cn.itcast.interceptor.MyInterceptor1&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>要拦截的方法和不要拦截的方法配置一个就可以了</p>
<p>这样配置拦截器后，测试输出为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MyInterceptor1执行了...前</span><br><span class="line">testInterceptor执行了</span><br><span class="line">MyInterceptor1执行了...后</span><br><span class="line">success.jsp执行了</span><br><span class="line">MyInterceptor1执行了...最后</span><br></pre></td></tr></table></figure>

<h2 id="2个拦截器"><a href="#2个拦截器" class="headerlink" title="2个拦截器"></a>2个拦截器</h2><img src="/images/2020/screencapture2020-04-07 AM10.26.39.jpg">

<p>拦截器代码和第一个一样</p>
<p><strong>配置</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--配置拦截器--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/user/*&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置拦截器对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;cn.itcast.controller.cn.itcast.interceptor.MyInterceptor1&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--配置第二个拦截器--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--拦截所有方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置拦截器对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;cn.itcast.controller.cn.itcast.interceptor.MyInterceptor2&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MyInterceptor1执行了...前1</span><br><span class="line">MyInterceptor1执行了...前2</span><br><span class="line">testInterceptor执行了</span><br><span class="line">MyInterceptor1执行了...后2</span><br><span class="line">MyInterceptor1执行了...后1</span><br><span class="line">success.jsp执行了</span><br><span class="line">MyInterceptor1执行了...最后2</span><br><span class="line">MyInterceptor1执行了...最后1</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC笔记07 SSM整合</title>
    <url>/2020/04/07/note-springmvc-07/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/BV1Sb411s7qa">https://www.bilibili.com/video/BV1Sb411s7qa</a></p>
<p>P46~54</p>
</blockquote>
<p><strong>三层架构</strong></p>
<img src="/images/2020/screencapture2020-04-07 AM10.29.11.jpg">

<p>先保证每个框架能单独运行</p>
<p>然后用Spring整合另外2个</p>
<h1 id="准备数据库"><a href="#准备数据库" class="headerlink" title="准备数据库"></a>准备数据库</h1><p>account表，以前建过了，继续用</p>
<img src="/images/2020/screencapture2020-04-07 AM10.34.27.jpg" width=300>

<h1 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h1><p>创建Maven工程，选webapp</p>
<p>解决创建项目过慢，加一对archetypeCatalog：internal</p>
<h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><p>版本锁定</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slf4j.version</span>&gt;</span>1.6.6<span class="tag">&lt;/<span class="name">slf4j.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>加依赖</p>
<img src="/images/2020/screencapture2020-04-07 AM10.54.56.jpg" width=400>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- spring IOC --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- spring AOP --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- JdbcTemplate --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 事务 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 测试 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- mysql驱动 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 连接池 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- spring MVC --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- servlet --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- jsp标签 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- log --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- mybatis --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h2><p>java和resources文件夹</p>
<img src="/images/2020/screencapture2020-04-07 AM10.57.25.jpg" width=300>

<p>用到的类</p>
<img src="/images/2020/screencapture2020-04-07 AM11.07.04.jpg" width=300>

<p>Account三个属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> Double money;</span><br></pre></td></tr></table></figure>

<p>做2个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span></span>;</span><br></pre></td></tr></table></figure>

<h1 id="Spring框架"><a href="#Spring框架" class="headerlink" title="Spring框架"></a>Spring框架</h1><h2 id="配置-applicationContext-xml"><a href="#配置-applicationContext-xml" class="headerlink" title="配置 applicationContext.xml"></a>配置 applicationContext.xml</h2><p>resources下新建applicationContext.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">	http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">	http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">	http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">	http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">	http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">	http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">	http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开启注解的扫描，希望处理service和dao，controller不需要Spring框架去处理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.coconutnut&quot;</span> &gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置哪些注解不扫描 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>controller是表现层的，Spring框架不管</p>
<h2 id="加注解"><a href="#加注解" class="headerlink" title="加注解"></a>加注解</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;accountService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;业务层：查询所有&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;业务层：保存账户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>用junit单元测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSpring</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 加载配置文件</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;classpath:applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取对象</span></span><br><span class="line">        IAccountService as = (IAccountService) ac.getBean(<span class="string">&quot;accountService&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用方法</span></span><br><span class="line">        as.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/images/2020/screencapture2020-04-07 AM11.21.45.jpg">

<p>WARNING说没有log4j的配置文件</p>
<p>复制一个log4j.properties到resources目录下即可</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Set root category priority to INFO and its only appender to CONSOLE.</span></span><br><span class="line"><span class="comment">#log4j.rootCategory=INFO, CONSOLE            debug   info   warn error fatal</span></span><br><span class="line"><span class="meta">log4j.rootCategory</span>=<span class="string">info, CONSOLE, LOGFILE</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Set the enterprise logger category to FATAL and its only appender to CONSOLE.</span></span><br><span class="line"><span class="meta">log4j.logger.org.apache.axis.enterprise</span>=<span class="string">FATAL, CONSOLE</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># CONSOLE is set to be a ConsoleAppender using a PatternLayout.</span></span><br><span class="line"><span class="meta">log4j.appender.CONSOLE</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.CONSOLE.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.CONSOLE.layout.ConversionPattern</span>=<span class="string">%d&#123;ISO8601&#125; %-6r [%15.15t] %-5p %30.30c %x - %m\n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># LOGFILE is set to be a File appender using a PatternLayout.</span></span><br><span class="line"><span class="meta">log4j.appender.LOGFILE</span>=<span class="string">org.apache.log4j.FileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.LOGFILE.File</span>=<span class="string">/Users/coconutnut/TREE/Midgard/Idea/SSM/axis.log</span></span><br><span class="line"><span class="meta">log4j.appender.LOGFILE.Append</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">log4j.appender.LOGFILE.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.LOGFILE.layout.ConversionPattern</span>=<span class="string">%d&#123;ISO8601&#125; %-6r [%15.15t] %-5p %30.30c %x - %m\n</span></span><br></pre></td></tr></table></figure>

<p>要改一下路径</p>
<h1 id="SpringMVC框架"><a href="#SpringMVC框架" class="headerlink" title="SpringMVC框架"></a>SpringMVC框架</h1><h2 id="配置-web-xml"><a href="#配置-web-xml" class="headerlink" title="配置 web.xml"></a>配置 web.xml</h2><p>WEB-INF文件夹下的web.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 配置前端控制器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加载springmvc.xml配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 启动服务器，创建该servlet --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 解决中文乱码的过滤器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="配置-springmvc-xml"><a href="#配置-springmvc-xml" class="headerlink" title="配置 springmvc.xml"></a>配置 springmvc.xml</h2><p>resources文件夹下新建springmvc.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span> <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开启注解扫描，只扫描Controller注解 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.coconutnut&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置的视图解析器对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/pages/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--过滤静态资源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">&quot;/css/&quot;</span> <span class="attr">mapping</span>=<span class="string">&quot;/css/**&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">&quot;/images/&quot;</span> <span class="attr">mapping</span>=<span class="string">&quot;/images/**&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">&quot;/js/&quot;</span> <span class="attr">mapping</span>=<span class="string">&quot;/js/**&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启SpringMVC注解的支持--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h2><p>index.jsp中加一个超链接</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;a href=<span class="string">&quot;account/findAll&quot;</span>&gt;测试&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>WEB-INF中新建pages文件夹，新建list.jsp</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h3&gt;查询所有的账户信息&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/account&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/findAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;表现层：查询所有&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;TODO&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><img src="/images/2020/screencapture2020-04-07 AM11.40.21.jpg">

<h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><img src="/images/2020/screencapture2020-04-07 AM11.41.33.jpg">

<img src="/images/2020/screencapture2020-04-07 AM11.41.38.jpg">

<h1 id="Spring整合SpringMVC"><a href="#Spring整合SpringMVC" class="headerlink" title="Spring整合SpringMVC"></a>Spring整合SpringMVC</h1><p>目标：Controller中调用业务层方法</p>
<p>方法：要把Service注入到Controller中</p>
<p>问题：web.xml中配置了springmvc.xml，springmvc.xml中配置了对Controller的扫描，其它扫描的配置在applicationContext.xml中，而这个文件始终没有被加载过</p>
<p>解决：启动tomcat服务器时，加载Spring的配置文件applicationContext.xml</p>
<p>ServletContext对象生命周期和服务器相同，可以用监听器监听其创建和销毁</p>
<p>于是，可以在web.xml中用监听器加载Spring的配置文件</p>
<p>监听器是spring-web提供的</p>
<p>它默认只加载WEB-INF目录下的applicationContext.xml配置文件</p>
<p>可以复制一份丢到WEB-INF目录，或者手动设置路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置Spring的监听器，默认只加载WEB-INF目录下的applicationContext.xml配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置配置文件的路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样启动服务器时，Spring的配置文件也加载了</p>
<p>Service和Controller都放到容器中了</p>
<p>于是可以在AccountController中进行依赖注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/account&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IAccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/findAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;表现层：查询所有&quot;</span>);</span><br><span class="line">        accountService.findAll();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;list&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h2><p>点击浏览器中测试按钮</p>
<img src="/images/2020/screencapture2020-04-07 PM12.00.15.jpg">

<p>成功</p>
<h1 id="MyBatis框架"><a href="#MyBatis框架" class="headerlink" title="MyBatis框架"></a>MyBatis框架</h1><h2 id="加注解-1"><a href="#加注解-1" class="headerlink" title="加注解"></a>加注解</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from account&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into account (name,money) values (#&#123;name&#125;,#&#123;money&#125;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="配置-sqlMapConfig-xml"><a href="#配置-sqlMapConfig-xml" class="headerlink" title="配置 sqlMapConfig.xml"></a>配置 sqlMapConfig.xml</h2><p>在resources中新建sqlMapConfig.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置环境 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/groot?characterEncoding=utf8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;iamgroot&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入映射配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.coconutnut.dao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="测试-3"><a href="#测试-3" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMyBatis</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 加载配置文件</span></span><br><span class="line">        InputStream in = Resources.getResourceAsStream(<span class="string">&quot;sqlMapConfig.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建SqlSessionFactory对象</span></span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        <span class="comment">// 创建SqlSession对象</span></span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        <span class="comment">// 获取到代理对象</span></span><br><span class="line">        IAccountDao dao = session.getMapper(IAccountDao.class);</span><br><span class="line">        <span class="comment">// 查询所有数据</span></span><br><span class="line">        List&lt;Account&gt; list = dao.findAll();</span><br><span class="line">        <span class="keyword">for</span>(Account account : list)&#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account();</span><br><span class="line">        account.setName(<span class="string">&quot;熊大&quot;</span>);</span><br><span class="line">        account.setMoney(<span class="number">400d</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载配置文件</span></span><br><span class="line">        InputStream in = Resources.getResourceAsStream(<span class="string">&quot;sqlMapConfig.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建SqlSessionFactory对象</span></span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        <span class="comment">// 创建SqlSession对象</span></span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        <span class="comment">// 获取到代理对象</span></span><br><span class="line">        IAccountDao dao = session.getMapper(IAccountDao.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 保存</span></span><br><span class="line">        dao.saveAccount(account);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提交事务</span></span><br><span class="line">        session.commit();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试查询</p>
<img src="/images/2020/screencapture2020-04-07 PM12.12.50.jpg">

<p>测试保存</p>
<img src="/images/2020/screencapture2020-04-07 PM12.14.12.jpg">

<h1 id="Spring整合MyBatis"><a href="#Spring整合MyBatis" class="headerlink" title="Spring整合MyBatis"></a>Spring整合MyBatis</h1><p>目标：Service能调用Dao</p>
<p>此时Service已经在容器中了，需要把生成的Dao的代理对象也存到容器中</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在Spring的配置文件applicationContext.xml中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Spring整合MyBatis框架 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/groot?characterEncoding=utf8&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;iamgroot&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置SqlSessionFactory工厂 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置AccountDao接口所在包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mapperScanner&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.coconutnut.dao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>有了这段配置，sqlMapConfig.xml其实就不需要了，可以删除</p>
<h2 id="加注解-2"><a href="#加注解-2" class="headerlink" title="加注解"></a>加注解</h2><p>在AccountDao上加@Repository注解</p>
<p>在AccountServiceImpl中注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;accountService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IAccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;业务层：查询所有&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;业务层：保存账户&quot;</span>);</span><br><span class="line">        accountDao.saveAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在AccountController中把查出的数据存入Model</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/account&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IAccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/findAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAll</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;表现层：查询所有&quot;</span>);</span><br><span class="line">        List&lt;Account&gt; list = accountService.findAll();</span><br><span class="line">        model.addAttribute(<span class="string">&quot;list&quot;</span>,list);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;list&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="页面-1"><a href="#页面-1" class="headerlink" title="页面"></a>页面</h2><p>在list.jsp中打印出来</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> isELIgnored=<span class="string">&quot;false&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h3&gt;查询所有的帐户&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:forEach items=<span class="string">&quot;$&#123;list&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;account&quot;</span>&gt;</span><br><span class="line">    $&#123;account.name&#125;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="测试查询"><a href="#测试查询" class="headerlink" title="测试查询"></a>测试查询</h2><p>出了一个异常</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2020-04-07 12:31:59,102 36291  [r$PoolThread-#0] WARN  resourcepool.BasicResourcePool  - com.mchange.v2.resourcepool.BasicResourcePool$AcquireTask@64fe7a60 -- Acquisition Attempt Failed!!! Clearing pending acquires. While trying to acquire a needed new resource, we failed to succeed more than the maximum number of allowed acquisition attempts (30). Last acquisition attempt exception: </span><br><span class="line">java.sql.SQLException: Unknown system variable &#x27;tx_isolation&#x27;</span><br><span class="line">	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:1055)</span><br><span class="line">	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:956)</span><br><span class="line">	...</span><br></pre></td></tr></table></figure>

<p>查询发现是mysql-connector-java版本太低导致</p>
<p>在pom.xml中将</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>改为</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.48<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>再试</p>
<img src="/images/2020/screencapture2020-04-07 PM12.46.36.jpg">

<p>成功</p>
<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>保存方法还需管理事务</p>
<p>Spring中进行声明式事务管理，在applicationContext.xml中增加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置Spring框架声明式事务管理--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置事务通知--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;find*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;DEFAULT&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置AOP增强--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(* com.coconutnut.service.impl.*ServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="页面-2"><a href="#页面-2" class="headerlink" title="页面"></a>页面</h2><p>在index.jsp中新增表单</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;a href=<span class="string">&quot;account/findAll&quot;</span>&gt;测试查询&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h3&gt;测试保存&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">    &lt;form action=<span class="string">&quot;account/save&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        姓名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span> /&gt;&lt;br/&gt;</span><br><span class="line">        金额：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;money&quot;</span> /&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;保存&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<h2 id="控制器-1"><a href="#控制器-1" class="headerlink" title="控制器"></a>控制器</h2><p>增加save方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  accountService.saveAccount(account);</span><br><span class="line">  response.sendRedirect(request.getContextPath()+<span class="string">&quot;/account/findAll&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>存完重定向到list页面</p>
<h2 id="测试保存"><a href="#测试保存" class="headerlink" title="测试保存"></a>测试保存</h2><img src="/images/2020/screencapture2020-04-07 PM12.54.47.jpg">

<p>点击保存</p>
<img src="/images/2020/screencapture2020-04-07 PM12.54.54.jpg">

<p>成功</p>
<h1 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h1><img src="/images/2020/screencapture2020-04-07 PM12.56.33.jpg" width=300>]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title>刷题阶段一完工纪念！</title>
    <url>/2020/04/08/memo/</url>
    <content><![CDATA[<p>这个<a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Leetcode%20%E9%A2%98%E8%A7%A3%20-%20%E7%9B%AE%E5%BD%95.md" title="" target="">目录</a>终于完工了</p>
<p>LeetCode从去年准备算法考试开始刷</p>
<p>到现在刚好2222个硬币😃</p>
<p>棒球帽！冲鸭！</p>
<img src="/images/2020/screencapture2020-04-08 PM7.47.28.jpg" width=300>

<p>3月每日1题忘了1天 就那么 干干净净 无忧无虑的 忘了😭</p>
<p>4月搞了张日历贴在床对面的白板上 但愿…</p>
<hr>
<p>最近周赛还不如刚开始做得好</p>
<p>有一丝丝凄凉</p>
<p>希望烧掉的脑细胞给新的神经回路提供养料了吧</p>
<img src="/images/2020/img-91ef518e959886326719c5d07a824772.jpg" width=400>

<p>最近看到这张图觉得貌似很有道理</p>
<p>放在这里</p>
<p>不知道以后会不会有什么感受</p>
<hr>
<p>最后是一大条看板的完工记录</p>
<img src="/images/2020/Apr-09-2020 15-35-04.gif">

<p>快乐</p>
<p>宅家运动计划进行中</p>
<p>两个月没出门还轻了也是很震惊</p>
<p>继续打卡！嘿咻！</p>
<p>也许哪天就能劈叉了呢</p>
]]></content>
      <categories>
        <category>Memo</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud笔记01 Eureka注册中心</title>
    <url>/2020/04/08/note-springcloud-01/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://blog.csdn.net/ThinkWon/article/details/103726655">https://blog.csdn.net/ThinkWon/article/details/103726655</a></p>
</blockquote>
<hr>
<blockquote>
<p>Spring Cloud Netflix Eureka是Spring Cloud Netflix子项目的核心组件之一，主要用于微服务架构中的服务治理</p>
</blockquote>
<p>先疑惑了一下此Netflix是不是彼Netflix</p>
<p>查了一下 <a href="https://www.cnblogs.com/EasonJim/p/7795816.html">Netflix是什么，与Spring Cloud有什么关系</a> 还真是</p>
<p>爱了爱了</p>
<hr>
<h1 id="搭建Eureka注册中心"><a href="#搭建Eureka注册中心" class="headerlink" title="搭建Eureka注册中心"></a>搭建Eureka注册中心</h1><ol>
<li><p>创建eureka-server模块</p>
</li>
<li><p>@EnableEurekaServer启用Euerka注册中心功能</p>
</li>
<li><p>application.yml添加配置</p>
<p>项目默认是application.properties，为了和教程保持一致</p>
<p>删除application.properties，执行 mvn -X clean install</p>
</li>
<li><p>Run Dashboard运行应用</p>
</li>
<li><p>浏览器打开注册中心</p>
</li>
</ol>
<img src="/images/2020/screencapture2020-04-09 AM10.00.53.jpg">

<p>成功</p>
<hr>
<p>依赖下了挺久，看眼都有些什么</p>
<img src="/images/2020/screencapture2020-04-09 AM9.33.00.jpg" width=400>

<p>😱😱😱</p>
<p>上面是spring-cloud-starter-netflix-eureka-server</p>
<img src="/images/2020/screencapture2020-04-09 AM9.34.40.jpg">

<p>下面是spring-boot-starter-test</p>
<img src="/images/2020/screencapture2020-04-09 AM9.35.06.jpg">

<h2 id="DEBUG：没有Run-Dashboard"><a href="#DEBUG：没有Run-Dashboard" class="headerlink" title="DEBUG：没有Run Dashboard"></a>DEBUG：没有Run Dashboard</h2><p><strong>尝试1</strong></p>
<blockquote>
<p><a href="https://blog.csdn.net/chinoukin/article/details/80577890">https://blog.csdn.net/chinoukin/article/details/80577890</a></p>
</blockquote>
<p>改.idea/workspace.xml的</p>
<p>原本是这样</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">name</span>=<span class="string">&quot;RunDashboard&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">&quot;configurationTypes&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;SpringBootApplicationConfigurationType&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>但是这个文件每次改了command+s就又回去了</p>
<p><strong>尝试2</strong></p>
<blockquote>
<p><a href="https://blog.csdn.net/feixiangsmile/article/details/96908744">https://blog.csdn.net/feixiangsmile/article/details/96908744</a></p>
</blockquote>
<p>Edit Configurations中</p>
<p>Templates中</p>
<p>点击加号添加Application和Spring Boot</p>
<p>workspace.xml变成了</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">name</span>=<span class="string">&quot;RunDashboard&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">&quot;configurationTypes&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Application&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;SpringBootApplicationConfigurationType&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>但还是没有</p>
<p><strong>尝试3</strong></p>
<blockquote>
<p><a href="https://www.cnblogs.com/JealousGirl/p/openorcloserundash.html">https://www.cnblogs.com/JealousGirl/p/openorcloserundash.html</a></p>
<p><a href="https://blog.csdn.net/icebox126/article/details/78861943">https://blog.csdn.net/icebox126/article/details/78861943</a></p>
</blockquote>
<p>在workspace.xml中添加（这次可以加了）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;show.run.dashboard.notification&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>但是重启还是不会弹出提示</p>
<p><strong>尝试4</strong></p>
<blockquote>
<p><a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/115000428264-New-Spring-Boot-Run-dashboard-not-showing-up">https://intellij-support.jetbrains.com/hc/en-us/community/posts/115000428264-New-Spring-Boot-Run-dashboard-not-showing-up</a></p>
<p><a href="https://blog.csdn.net/jianxia801/article/details/99576764">https://blog.csdn.net/jianxia801/article/details/99576764</a></p>
</blockquote>
<img src="/images/2020/screencapture2020-04-09 AM10.30.31.jpg">

<p>…</p>
<p>fine</p>
<p>原来一直都在啊</p>
<img src="/images/2020/screencapture2020-04-09 AM10.31.24.jpg">

<h1 id="搭建Eureka客户端"><a href="#搭建Eureka客户端" class="headerlink" title="搭建Eureka客户端"></a>搭建Eureka客户端</h1><ol>
<li><p>创建eureka-client模块</p>
</li>
<li><p>添加依赖</p>
</li>
<li><p>加@EnableDiscoveryClient表明是一个Eureka客户端</p>
</li>
<li><p>配置</p>
</li>
</ol>
<h2 id="DEBUG：注册中心中没有显示eureka-client"><a href="#DEBUG：注册中心中没有显示eureka-client" class="headerlink" title="DEBUG：注册中心中没有显示eureka-client"></a>DEBUG：注册中心中没有显示eureka-client</h2><p><strong>尝试1</strong></p>
<p>原来的pom.xml中的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>教程中说要添加的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>一开始由于spring-cloud-starter-netflix-eureka-client已经有了</p>
<p>直接添加了上面这个spring-boot-starter-web</p>
<p>但是觉得好像有点问题？</p>
<p>spring-boot-starter-test和spring-boot-starter-web会不会冲突呢?</p>
<img src="/images/2020/screencapture2020-04-09 AM10.39.19.jpg">

<p>没冲突</p>
<p>但是spring-boot-starter-test似乎多了很多东西（试了一下并不能删）</p>
<p><strong>尝试2</strong></p>
<p>看下报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2020-04-09 10:43:38.777 ERROR 1243 --- [           main] c.n.d.s.t.d.RedirectingEurekaHttpClient  : Request execution error. endpoint=DefaultEndpoint&#123; serviceUrl=&#x27;http://localhost:8001/eureka/&#125;</span><br><span class="line"></span><br><span class="line">com.sun.jersey.api.client.ClientHandlerException: java.net.ConnectException: Connection refused (Connection refused)</span><br></pre></td></tr></table></figure>

<p>好像干了个蠢事</p>
<img src="/images/2020/screencapture2020-04-09 AM10.44.58.jpg">

<p>果然 服务器没开</p>
<p>重来 先开eureka-server 再开eureka-client</p>
<img src="/images/2020/screencapture2020-04-09 AM10.46.19.jpg">

<img src="/images/2020/screencapture2020-04-09 AM10.46.31.jpg">

<p>注册成功</p>
<h1 id="搭建Eureka注册中心集群"><a href="#搭建Eureka注册中心集群" class="headerlink" title="搭建Eureka注册中心集群"></a>搭建Eureka注册中心集群</h1><p>目的：防止注册中心挂了整个垮掉 搭建双节点的注册中心集群</p>
<ol>
<li><p>2个配置文件</p>
<p>（不知道原本的application.yml要不要删？看了下源码没有删）</p>
</li>
<li><p>本机配置域名</p>
<p>macOS在/etc/hosts</p>
<p>改之前的存个档</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">##</span><br><span class="line"># Host Database</span><br><span class="line">#</span><br><span class="line"># localhost is used to configure the loopback interface</span><br><span class="line"># when the system is booting.  Do not change this entry.</span><br><span class="line">##</span><br><span class="line">127.0.0.1	localhost</span><br><span class="line">255.255.255.255	broadcasthost</span><br><span class="line">::1             localhost</span><br><span class="line">127.0.0.1 xmind.net</span><br><span class="line">127.0.0.1 www.xmind.net</span><br></pre></td></tr></table></figure>

<p>加两行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1 replica1</span><br><span class="line">127.0.0.1 replica2</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动</p>
</li>
<li><p>修改配置，让eureka-client连接到集群</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 配置注册中心地址</span><br><span class="line"># defaultZone: http://localhost:8001/eureka</span><br><span class="line"># 同时注册到两个注册中心</span><br><span class="line">defaultZone: http://replica1:8002/eureka/,http://replica2:8003/eureka/</span><br></pre></td></tr></table></figure>

<h2 id="DEBUG：服务器没有注册"><a href="#DEBUG：服务器没有注册" class="headerlink" title="DEBUG：服务器没有注册"></a>DEBUG：服务器没有注册</h2><p>复制一份原启动配置，修改为从replica1启动</p>
<img src="/images/2020/screencapture2020-04-09 AM10.57.57.jpg">

<p>Run</p>
<img src="/images/2020/screencapture2020-04-09 AM10.59.41.jpg">

<p>发现有备份，但是没有注册？</p>
<img src="/images/2020/screencapture2020-04-09 AM10.59.52.jpg">

<p>似乎是只复制了一份配置，replica2没有启动</p>
<p>加上</p>
<img src="/images/2020/screencapture2020-04-09 AM11.10.28.jpg">

<p>好了</p>
<img src="/images/2020/screencapture2020-04-09 AM11.11.58.jpg">

<h1 id="给Eureka注册中心添加认证"><a href="#给Eureka注册中心添加认证" class="headerlink" title="给Eureka注册中心添加认证"></a>给Eureka注册中心添加认证</h1><ol>
<li>创建eureka-security-server模块</li>
<li>添加依赖</li>
<li>配置pom.xml</li>
<li>添加WebSecurityConfig</li>
<li>eureka-client注册到有登录认证的注册中心</li>
<li>以application-security.yml配置运行eureka-client</li>
</ol>
<h2 id="DEBUG：SpringSecurity模块"><a href="#DEBUG：SpringSecurity模块" class="headerlink" title="DEBUG：SpringSecurity模块"></a>DEBUG：SpringSecurity模块</h2><p>要添加SpringSecurity模块，也许是Spring Cloud Security下的Cloud Security？先试试</p>
<p>创建出的pom.xml中依赖是</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>教程中要加的依赖是</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>好像不是这个</p>
<p>重新创建</p>
<p>这次直接搜索Spring Security 发现有这个模块</p>
<img src="/images/2020/screencapture2020-04-09 AM11.18.28.jpg">

<p>（最后发现都行，且没必要创建时添加，随时在pom.xml中修改都可）</p>
<h2 id="DEBUG：新的模块没有被识别为Maven项目"><a href="#DEBUG：新的模块没有被识别为Maven项目" class="headerlink" title="DEBUG：新的模块没有被识别为Maven项目"></a>DEBUG：新的模块没有被识别为Maven项目</h2><blockquote>
<p><a href="https://www.jianshu.com/p/909eb8a48d49">https://www.jianshu.com/p/909eb8a48d49</a></p>
</blockquote>
<p>右边Maven栏＋对应的pom.xml</p>
<h2 id="DEBUG：启动报错-amp-Whitelabel-Error-Page"><a href="#DEBUG：启动报错-amp-Whitelabel-Error-Page" class="headerlink" title="DEBUG：启动报错&amp;Whitelabel Error Page"></a>DEBUG：启动报错&amp;Whitelabel Error Page</h2><img src="/images/2020/screencapture2020-04-09 AM11.27.19.jpg">

<blockquote>
<p><a href="https://blog.csdn.net/qq_28379809/article/details/102789716">https://blog.csdn.net/qq_28379809/article/details/102789716</a></p>
</blockquote>
<p>添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>启动</p>
<img src="/images/2020/screencapture2020-04-09 AM11.32.17.jpg">

<p>输入账号密码</p>
<img src="/images/2020/screencapture2020-04-09 AM11.32.27.jpg">

<p>发现EurekaSecurityServerApplication没有加@EnableEurekaServer</p>
<img src="/images/2020/screencapture2020-04-09 AM11.45.35.jpg">

<p>pom.xml中有spring-cloud-starter-netflix-eureka-server，为什么导不进来呢</p>
<p>和eureka-server的配置比较，发现少一句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Hoxton.SR3<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>加上</p>
<p>还是不行</p>
<p>源码中是</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Hoxton.RELEASE<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>现在的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>源码中的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>复制过去</p>
<p>Reimport Maven Projects</p>
<p>发现正在下载的进度条</p>
<p>所以难道刚才是因为依赖还没下载完吗</p>
<p>下载完成</p>
<p>全红了…</p>
<img src="/images/2020/screencapture2020-04-09 AM11.58.06.jpg">

<p>改回原本的依赖 删掉spring-boot-starter-web 不红了</p>
<p>启动</p>
<img src="/images/2020/screencapture2020-04-09 AM11.59.54.jpg">

<p>🙃</p>
<p>仔细看下源码的配置是</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>而不是</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>所以难道还是应该引入Spring Cloud Security模块？</p>
<p>重新创建试试</p>
<p>成功！</p>
<h2 id="DEBUG：以application-security-yml配置运行eureka-client"><a href="#DEBUG：以application-security-yml配置运行eureka-client" class="headerlink" title="DEBUG：以application-security.yml配置运行eureka-client"></a>DEBUG：以application-security.yml配置运行eureka-client</h2><p>现在eureka-client有2个yml</p>
<img src="/images/2020/screencapture2020-04-09 PM3.55.10.jpg">

<p>直接运行还是application.yml的8101端口</p>
<p>根据刚才eureka-server的多个yml</p>
<p>是修改了指定主机地址</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># application.yml</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># application-replica1.yml</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">replica1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># application-replica2.yml</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">replica2</span></span><br></pre></td></tr></table></figure>

<p>然后在Edit Configurations中复制Configuration，然后修改主机名</p>
<p>于是这里也加上指定主机名</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">instance:</span></span><br><span class="line">  <span class="attr">hostname:</span> <span class="string">eureka-client-security</span></span><br></pre></td></tr></table></figure>

<p>复制一个EurekaClientApplication的配置，Active profiles处改为主机名</p>
<img src="/images/2020/screencapture2020-04-09 PM4.01.03.jpg">

<p>但还是8101？</p>
<img src="/images/2020/screencapture2020-04-09 PM4.04.44.jpg">

<p>观察发现</p>
<p>Server的配置文件1叫application-replica1.yml，hostname是replica1，Active profiles填的replica1</p>
<p>配置文件2叫application-replica2.yml，hostname是replica2，Active profiles填的replica2</p>
<p>难道…</p>
<p>把Client的application-security.yml中改成</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">instance:</span></span><br><span class="line">  <span class="attr">hostname:</span> <span class="string">security</span></span><br></pre></td></tr></table></figure>

<p>Active profiles改成security</p>
<p>Run</p>
<img src="/images/2020/screencapture2020-04-09 PM4.10.10.jpg">

<p>打开了！</p>
<img src="/images/2020/screencapture2020-04-09 PM4.11.03.jpg">

<p>有个<strong>EMERGENCY!</strong> </p>
<p>保护机制后面再看</p>
<p>先试试这个指定yml到底是怎么指定的</p>
<table>
<thead>
<tr>
<th>文件名</th>
<th>hostname</th>
<th>Active profiles</th>
<th>能否启动</th>
</tr>
</thead>
<tbody><tr>
<td>application-security.yml</td>
<td>eureka-client-security</td>
<td>eureka-client-security</td>
<td>否</td>
</tr>
<tr>
<td>application-security.yml</td>
<td>security</td>
<td>security</td>
<td>可</td>
</tr>
<tr>
<td>application-security.yml</td>
<td>securityX</td>
<td>security</td>
<td>可</td>
</tr>
<tr>
<td>application-securityX.yml</td>
<td>security</td>
<td>security</td>
<td>否</td>
</tr>
</tbody></table>
<p>看来Active profiles要填文件名后面的部分</p>
<p>教程最下面的常用配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span> <span class="comment">#eureka客户端配置</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span> <span class="comment">#是否将自己注册到eureka服务端上去</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span> <span class="comment">#是否获取eureka服务端上注册的服务列表</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8001/eureka/</span> <span class="comment"># 指定注册中心地址</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 启用eureka客户端</span></span><br><span class="line">    <span class="attr">registry-fetch-interval-seconds:</span> <span class="number">30</span> <span class="comment">#定义去eureka服务端获取服务列表的时间间隔</span></span><br><span class="line">  <span class="attr">instance:</span> <span class="comment">#eureka客户端实例配置</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">30</span> <span class="comment">#定义服务多久去注册中心续约</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">90</span> <span class="comment">#定义服务多久不去续约认为服务失效</span></span><br><span class="line">    <span class="attr">metadata-map:</span></span><br><span class="line">      <span class="attr">zone:</span> <span class="string">guangdong</span> <span class="comment">#所在区域</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span> <span class="comment">#服务主机名称</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">false</span> <span class="comment">#是否优先使用ip来作为主机名</span></span><br><span class="line">  <span class="attr">server:</span> <span class="comment">#eureka服务端配置</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span> <span class="comment">#关闭eureka服务端的保护机制</span></span><br></pre></td></tr></table></figure>

<p>于是在eureka-server的yml中加上</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span> <span class="comment">#eureka服务端配置</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">true</span> <span class="comment">#关闭eureka服务端的保护机制</span></span><br></pre></td></tr></table></figure>

<p>就没有<strong>EMERGENCY!</strong> 了</p>
<h2 id="关于eureka-security-server的依赖"><a href="#关于eureka-security-server的依赖" class="headerlink" title="关于eureka-security-server的依赖"></a>关于eureka-security-server的依赖</h2><p>发现教程里写的依赖是</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>源码里用的依赖是</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>自己刚才启动成功的是spring-cloud-starter-security</p>
<p>改成spring-boot-starter-security试了一下也成功了</p>
<h2 id="问题解决总结"><a href="#问题解决总结" class="headerlink" title="问题解决总结"></a>问题解决总结</h2><ol>
<li>用Spring Cloud Security模块，不是Spring Security模块</li>
<li>EurekaSecurityServerApplication要记得加@EnableEurekaServer</li>
<li>用指定的yml（application-XXX.yml）启动Spring Boot，在Edit Configurations中复制一个原Configuration，Active profiles填指定yml文件后半部分（XXX），运行这个Configuration</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><img src="/images/2020/screencapture2020-04-09 PM4.44.05.jpg">]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>springcloud</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud笔记02 Ribbon负载均衡</title>
    <url>/2020/04/09/note-springcloud-02/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://blog.csdn.net/ThinkWon/article/details/103729080">https://blog.csdn.net/ThinkWon/article/details/103729080</a></p>
</blockquote>
<h1 id="user-service模块"><a href="#user-service模块" class="headerlink" title="user-service模块"></a>user-service模块</h1><ol>
<li>创建user-service模块</li>
<li>pom.xml添加依赖</li>
<li>配置application.yml</li>
<li>实体类和响应类</li>
<li>控制器</li>
<li>Service接口和实现类</li>
</ol>
<h1 id="ribbon-service模块"><a href="#ribbon-service模块" class="headerlink" title="ribbon-service模块"></a>ribbon-service模块</h1><ol>
<li>创建ribbon-service模块</li>
<li>pom.xml添加依赖</li>
<li>配置application.yml</li>
<li>@LoadBalanced注解赋予RestTemplate负载均衡的能力</li>
<li>实体类和响应类</li>
<li>控制器</li>
</ol>
<h1 id="负载均衡功能演示"><a href="#负载均衡功能演示" class="headerlink" title="负载均衡功能演示"></a>负载均衡功能演示</h1><ol>
<li>开启服务</li>
</ol>
<p>8001开一个Server（上次的模块）</p>
<p>8201、8202各开一个Service</p>
<img src="/images/2020/screencapture2020-04-09 PM7.55.27.jpg">

<p>这次是同样的配置文件，2个端口各开一个，改Active profiles</p>
<p>上次是不同的配置文件，开在不同的端口，用Override parameters</p>
<p>8301开Ribbon Service</p>
<img src="/images/2020/screencapture2020-04-09 PM9.36.41.jpg">

<ol start="2">
<li>调用接口进行测试</li>
</ol>
<img src="/images/2020/screencapture2020-04-10 AM10.28.54.jpg">

<p>8201</p>
<img src="/images/2020/screencapture2020-04-10 AM10.32.24.jpg">

<p>8202</p>
<img src="/images/2020/screencapture2020-04-10 AM10.32.33.jpg">

<h2 id="DEBUG：运行后没有注册"><a href="#DEBUG：运行后没有注册" class="headerlink" title="DEBUG：运行后没有注册"></a>DEBUG：运行后没有注册</h2><p>启动几个服务后</p>
<img src="/images/2020/screencapture2020-04-09 PM7.59.13.jpg">

<p>但是浏览器中查看</p>
<img src="/images/2020/screencapture2020-04-09 PM7.59.23.jpg">

<p>发现又忘记加@EnableDiscoveryClient了</p>
<p>重启</p>
<p>还是没有注册上</p>
<p><strong>尝试1</strong></p>
<blockquote>
<p><a href="https://blog.csdn.net/yangyongming_888/article/details/83859092">https://blog.csdn.net/yangyongming_888/article/details/83859092</a></p>
</blockquote>
<p>说是依赖带starter和不带starter</p>
<p>但是看了下三个pom.xml中都是带starter的</p>
<p>再比较一下依赖</p>
<p>源码-eureka-server</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>项目-eureka-server</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>源码-ribbon-service</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>项目-ribbon-service</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>源码-user-service</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>项目-user-service</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>一样，看来不是这个问题</p>
<p><strong>尝试2</strong></p>
<p>关闭server，直接启动service，发现也启动了，并没有报错</p>
<p>但是上次的client如果在没开service的时候启动会报</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">com.sun.jersey.api.client.ClientHandlerException: java.net.ConnectException: Connection refused (Connection refused)</span><br></pre></td></tr></table></figure>

<p>所以也许根本就没有连上服务器？</p>
<p>难道是yml没有生效？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn -X clean install</span><br></pre></td></tr></table></figure>

<p>没用</p>
<blockquote>
<p><a href="https://segmentfault.com/q/1010000012008825">https://segmentfault.com/q/1010000012008825</a></p>
</blockquote>
<p>有说是yml的缩进问题</p>
<p>看了一下上次可以注册的服务的yml</p>
<img src="/images/2020/screencapture2020-04-09 PM8.49.31.jpg">

<p>这次的</p>
<img src="/images/2020/screencapture2020-04-09 PM8.49.35.jpg">

<p>发现注册的true是白色的</p>
<p>提示</p>
<img src="/images/2020/screencapture2020-04-09 PM8.53.23.jpg">

<p>确实有问题</p>
<p>把pom.xml中spring-cloud-starter-netflix-eureka-client的依赖注释的，依然能启动</p>
<blockquote>
<p><a href="https://ask.csdn.net/questions/719186">https://ask.csdn.net/questions/719186</a></p>
</blockquote>
<p>有说加版本号的</p>
<p>没用</p>
<p>想想和上次创建的区别，上次是在创建模块的时候通过Spring Initializer选择了Eureka Discovery Client的依赖</p>
<p>试试创建一个user-service2，创建的时候选上Eureka Discovery Client</p>
<p>把application.yml的内容复制过去，可以解析</p>
<p>它的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>user-service的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>没差啊</p>
<p>那难道是依赖没有导入</p>
<p>看下Maven</p>
<img src="/images/2020/screencapture2020-04-09 PM9.14.59.jpg">

<p>???</p>
<p>难道真是没有版本号</p>
<p>而且为什么前面的模块也都是红的，那是怎么运行成功的 迷惑</p>
<p>点进去看一下</p>
<img src="/images/2020/screencapture2020-04-09 PM9.15.46.jpg">

<p>也许只是部分冲突所以还能运行？</p>
<p>总之先加个版本号</p>
<img src="/images/2020/screencapture2020-04-09 PM9.23.48.jpg">

<p>加了之后还是unknown</p>
<p>重启也是</p>
<p>发现右下角在下载</p>
<p>下完之后变成了Maven中变成了2.2.2.RELEASE</p>
<p>激动地搓搓手</p>
<img src="/images/2020/screencapture2020-04-09 PM9.27.27.jpg">

<p>成功！</p>
<img src="/images/2020/screencapture2020-04-09 PM9.29.40.jpg">

<p>注册上了</p>
<p>给ribbon-service也加个版本</p>
<p>加在properties里似乎不管用，暂时都加在dependency里好了</p>
<img src="/images/2020/screencapture2020-04-09 PM9.31.51.jpg">

<h2 id="DEBUG：调用接口调试的问题"><a href="#DEBUG：调用接口调试的问题" class="headerlink" title="DEBUG：调用接口调试的问题"></a>DEBUG：调用接口调试的问题</h2><p>出现Whitelabel Error Page</p>
<p>报错是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2020-04-09 21:37:37.483 ERROR 3503 --- [nio-8301-exec-1] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.springframework.beans.factory.BeanDefinitionStoreException: Failed to process import candidates for configuration class [org.springframework.cloud.netflix.ribbon.RibbonClientConfiguration]; nested exception is java.lang.IllegalStateException: Failed to introspect annotated methods on class org.springframework.cloud.netflix.ribbon.RestClientRibbonConfiguration] with root cause</span><br><span class="line"></span><br><span class="line">java.lang.ClassNotFoundException: com.netflix.niws.client.http.RestClient</span><br><span class="line">	at java.net.URLClassLoader.findClass(URLClassLoader.java:382) ~[na:1.8.0_241]</span><br><span class="line">	at java.lang.ClassLoader.loadClass(ClassLoader.java:418) ~[na:1.8.0_241]</span><br></pre></td></tr></table></figure>

<p>找不到com.netflix.niws.client.http.RestClient</p>
<p>看一下依赖</p>
<img src="/images/2020/screencapture2020-04-09 PM9.46.14.jpg">

<p>似乎有很多冲突</p>
<blockquote>
<p><a href="https://stackoverflow.com/questions/50675895/java-lang-classnotfoundexception-com-netflix-discovery-eurekaclientconfig">https://stackoverflow.com/questions/50675895/java-lang-classnotfoundexception-com-netflix-discovery-eurekaclientconfig</a></p>
<p>You should select only <em>Eureka Server</em> using <em>spring Initializr</em> while creating eureka server project.</p>
</blockquote>
<p>…</p>
<p>试一下重新创建</p>
<img src="/images/2020/screencapture2020-04-09 PM10.00.26.jpg" width=400>

<p>就没有冲突了</p>
<p>运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.lang.ClassNotFoundException: com.netflix.niws.client.http.RestClient</span><br></pre></td></tr></table></figure>

<p>怎么还是找不到？？？</p>
<p>把ribbon的依赖挪到前面来优先找呢？</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>还是不行</p>
<p>再翻一下报错发现是getUser函数的问题</p>
<img src="/images/2020/screencapture2020-04-09 PM10.19.03.jpg">

<p>在里面打印一下路径</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">getUser</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> </span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;【getUser中】userServiceUrl：&quot;</span>+userServiceUrl);</span><br><span class="line">  <span class="keyword">return</span> restTemplate.getForObject(userServiceUrl + <span class="string">&quot;/user/&#123;1&#125;&quot;</span>, Result.class, id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">【getUser中】userServiceUrl：http://user-service</span><br></pre></td></tr></table></figure>

<p>没有localhost?</p>
<p>浏览器访问一下</p>
<p>找不到 <strong>user-service</strong> 的服务器 IP 地址</p>
<p>上次好像注册过ip来着</p>
<p>但是注册是hostname</p>
<p>这里应该是要通过服务名称访问2个Service，似乎不一样</p>
<p>试试直接用localhost加端口访问</p>
<img src="/images/2020/screencapture2020-04-09 PM10.33.08.jpg">

<p>单个节点的服务没有问题</p>
<p>那应该就是在注册服务名称到ip的转换上出了问题</p>
<blockquote>
<p><a href="https://bbs.csdn.net/topics/392414113">https://bbs.csdn.net/topics/392414113</a></p>
</blockquote>
<p>把</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RestTemplate restTemplate;</span><br></pre></td></tr></table></figure>

<p>改成</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RestOperations restTemplate;</span><br></pre></td></tr></table></figure>

<p>不行</p>
<blockquote>
<p><a href="https://www.liangzl.com/get-article-detail-174951.html">https://www.liangzl.com/get-article-detail-174951.html</a></p>
</blockquote>
<p>对比了一下这个教程，也没找到问题</p>
<p>网页上的错误信息是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">There was an unexpected error (type=Internal Server Error, status=500).</span><br><span class="line">Failed to process import candidates for configuration class [org.springframework.cloud.netflix.ribbon.RibbonClientConfiguration]; nested exception is java.lang.IllegalStateException: Failed to introspect annotated methods on class org.springframework.cloud.netflix.ribbon.RestClientRibbonConfiguration</span><br></pre></td></tr></table></figure>

<p>似乎是注释的问题</p>
<p>…</p>
<p>很久很久以后</p>
<p>…</p>
<p>试试源码能不能跑</p>
<p>漫长的下载依赖</p>
<p><strong>第二天</strong></p>
<p>运行源码</p>
<img src="/images/2020/screencapture2020-04-10 AM10.05.19.jpg">

<img src="/images/2020/screencapture2020-04-10 AM10.05.28.jpg">

<p>没有问题</p>
<p>而且Maven一个都没红</p>
<img src="/images/2020/screencapture2020-04-10 AM10.06.09.jpg" width=300>

<p>对比一下依赖版本</p>
<p>源码eureka-server</p>
<img src="/images/2020/screencapture2020-04-10 AM10.08.50.jpg">

<p>项目eureka-server</p>
<img src="/images/2020/screencapture2020-04-10 AM10.08.58.jpg">

<p>spring-cloud-starter-netflix-eureka-server版本不一样</p>
<p>diff一下pom文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">8c8</span><br><span class="line">&lt;         &lt;version&gt;2.2.2.RELEASE&lt;/version&gt;</span><br><span class="line">---</span><br><span class="line">&gt;         &lt;version&gt;2.2.6.RELEASE&lt;/version&gt;</span><br><span class="line">11c11</span><br><span class="line">&lt;     &lt;groupId&gt;com.jourwon.springcloud&lt;/groupId&gt;</span><br><span class="line">---</span><br><span class="line">&gt;     &lt;groupId&gt;com.coconutnut&lt;/groupId&gt;</span><br><span class="line">19c19</span><br><span class="line">&lt;         &lt;spring-cloud.version&gt;Hoxton.RELEASE&lt;/spring-cloud.version&gt;</span><br><span class="line">---</span><br><span class="line">&gt;         &lt;spring-cloud.version&gt;Hoxton.SR3&lt;/spring-cloud.version&gt;</span><br></pre></td></tr></table></figure>

<p>一个是spring-boot-starter-parent的版本不一样</p>
<p>一个是spring-cloud的版本不一样</p>
<p>修改spring-cloud的版本，Maven的冲突就没有了</p>
<p>于是把其它pom的版本也改了</p>
<p>spring-boot-starter-parent的版本暂时没改，保持最新</p>
<img src="/images/2020/screencapture2020-04-10 AM10.22.11.jpg">

<p>启动</p>
<img src="/images/2020/screencapture2020-04-10 AM10.22.23.jpg">

<p>注册上了</p>
<img src="/images/2020/screencapture2020-04-10 AM10.22.18.jpg">

<p>又崩了</p>
<p>但是这次控制台没有Error了</p>
<p>错误信息变成了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">There was an unexpected error (type=Internal Server Error, status=500).</span><br><span class="line">No instances available for user-service</span><br></pre></td></tr></table></figure>

<p>单独访问<a href="http://localhost:8201/user/1或者http://localhost:8202/user/1都是可以的">http://localhost:8201/user/1或者http://localhost:8202/user/1都是可以的</a></p>
<blockquote>
<p><a href="https://blog.csdn.net/choice_of_door/article/details/85467105">https://blog.csdn.net/choice_of_door/article/details/85467105</a></p>
</blockquote>
<p>按照这个加了个依赖</p>
<p>（源码里并没有 但是可以正常运行，为什么呢？<del>MARK</del> (笔记03中解决)）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.netflix.ribbon<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ribbon-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>成功了！</p>
<p>嗷！</p>
<h2 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h2><p>都是版本的坑</p>
<p>创建时用Spring Initializer加还是后期在pom.xml中加不重要</p>
<p>但最好和教程保持一致</p>
<p>至少检查右边Maven栏中没有红线</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><img src="/images/2020/screencapture2020-04-10 AM10.51.52.jpg">

]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>springcloud</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud笔记03 Hystrix断路器</title>
    <url>/2020/04/12/note-springcloud-03/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://blog.csdn.net/ThinkWon/article/details/103732497">https://blog.csdn.net/ThinkWon/article/details/103732497</a></p>
</blockquote>
<p>Hystrix功能：服务降级、服务熔断、线程隔离、请求缓存、请求合并、服务监控等</p>
<h1 id="创建一个hystrix-service模块"><a href="#创建一个hystrix-service模块" class="headerlink" title="创建一个hystrix-service模块"></a>创建一个hystrix-service模块</h1><p>经过前面一系列扎心操作，这次创建的时候没有用Spring Initializer加依赖，直接改的pom.xml并修改版本</p>
<p>@EnableCircuitBreaker开启断路器功能</p>
<p>pom中还要加一个依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;cn.hutool&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;hutool-all&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;5.1.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>这个模块也添加了Ribbon的负载均衡功能</p>
<p>但是pom中并没有配置这个依赖</p>
<p>看了下依赖图发现是eureka-client依赖的</p>
<img src="/images/2020/screencapture2020-04-12 PM4.24.37.jpg">

<h2 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h2><p>在UserHystrixController中添加用于测试服务降级的接口</p>
<p>在UserService中添加调用方法与服务降级方法，并添加@HystrixCommand注解</p>
<p>启动eureka-server、user-service、hystrix-service服务</p>
<img src="/images/2020/screencapture2020-04-12 PM5.16.10.jpg">

<p>关闭user-service服务重新测试该接口</p>
<img src="/images/2020/screencapture2020-04-12 PM5.16.42.jpg">

<p>后面测试忽略某些异常降级、缓存、请求合并表现均和教程一样</p>
<img src="/images/2020/screencapture2020-04-12 PM5.35.06.jpg">

<h2 id="DEBUG：调用服务失败"><a href="#DEBUG：调用服务失败" class="headerlink" title="DEBUG：调用服务失败"></a>DEBUG：调用服务失败</h2><p>启动后注册中心</p>
<img src="/images/2020/screencapture2020-04-12 PM4.31.04.jpg">

<p>调用测试方法后</p>
<img src="/images/2020/screencapture2020-04-12 PM4.31.10.jpg">

<p>直接失败了？</p>
<p>试试原服务地址</p>
<img src="/images/2020/screencapture2020-04-12 PM4.32.40.jpg">

<p>没问题</p>
<p>这个bug似曾相识</p>
<p>上次在ribbon-service中添加了依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.netflix.ribbon<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ribbon-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>hystrix-service中也加一个试试</p>
<p>注册中心多了警告</p>
<img src="/images/2020/screencapture2020-04-12 PM4.35.28.jpg">

<p>运行*2</p>
<p>还是失败了</p>
<p>看下Maven</p>
<img src="/images/2020/screencapture2020-04-12 PM4.43.25.jpg">

<p>加个版本</p>
<p>ribbon模块用的是2.3.0</p>
<p>运行*3</p>
<p>还是挂了</p>
<p>拿源码的这三个模块试试</p>
<img src="/images/2020/screencapture2020-04-12 PM4.47.14.jpg">

<p>是可以的</p>
<p>对比版本</p>
<img src="/images/2020/screencapture2020-04-12 PM4.49.02.jpg">

<p>全部改成一样的</p>
<p>发现源码pom中还多了一个</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>以及</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>难怪前面springframework-cloud的模块总是没有版本号，原来是没加这个</p>
<p>（解决了前面笔记02中一个MARK）</p>
<p>运行*4</p>
<p>还🥶是🥶挂🥶了</p>
<p>再来一个个比代码</p>
<p>没差啊？</p>
<p>难道是其它模块的依赖也要改？改吧</p>
<p>发现前面大部分都是有dependencyManagement的，所以其实也没什么变动</p>
<p>运行*5</p>
<p>挂</p>
<p>刚才把spring-boot-starter-actuator删了，重新加上</p>
<p>运行*6</p>
<p>！成功了</p>
<p>可是这个时候其它版本都和源码一样了，但是源码没有用这个啊？-MARK-</p>
<h2 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h2><ol>
<li><p>版本 版本 版本</p>
</li>
<li><p>注册中心有，但找不到服务，试试加上</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><img src="/images/2020/screencapture2020-04-12 PM5.36.45.jpg">

]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>springcloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Axure笔记</title>
    <url>/2020/04/16/note-axure/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/BV1Yx411f7d6">https://www.bilibili.com/video/BV1Yx411f7d6</a></p>
</blockquote>
<h1 id="标尺"><a href="#标尺" class="headerlink" title="标尺"></a>标尺</h1><p>按住尺子拖下来</p>
<img src="/images/2020/screencapture2020-04-16 AM11.19.53.jpg">

<p>左侧也是</p>
<h1 id="圆角"><a href="#圆角" class="headerlink" title="圆角"></a>圆角</h1><p>按住黄色三角拖动</p>
<img src="/images/2020/screencapture2020-04-16 AM11.34.03.jpg">

<h1 id="平均排布"><a href="#平均排布" class="headerlink" title="平均排布"></a>平均排布</h1><p>选中几个元素，点水平</p>
<img src="/images/2020/screencapture2020-04-16 AM11.37.11.jpg">

<h1 id="切割顶栏"><a href="#切割顶栏" class="headerlink" title="切割顶栏"></a>切割顶栏</h1><p>右键-&gt;分割图片</p>
<img src="/images/2020/screencapture2020-04-16 PM12.08.32.jpg">

<h1 id="动作"><a href="#动作" class="headerlink" title="动作"></a>动作</h1><p>先建一个文件夹，一个页面对应一页，大小、位置相同</p>
<p>用热区罩在点击区域上</p>
<p>添加交互</p>
<img src="/images/2020/screencapture2020-04-16 PM12.27.48.jpg">

<p>跳转页面 可选择打开链接</p>
<hr>
<p>上手完成</p>
<img src="/images/2020/screencapture2020-04-16 PM12.31.48.jpg">

<img src="/images/2020/screencapture2020-04-16 PM12.31.52.jpg">

]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>axios请求跨域问题</title>
    <url>/2020/04/18/debug/</url>
    <content><![CDATA[<img src="/images/2020/screencapture2020-04-18 PM12.01.36.jpg">

<p>发现有跨域问题</p>
<p>查到</p>
<blockquote>
<p><a href="https://www.cnblogs.com/l-y-h/p/11815452.html">https://www.cnblogs.com/l-y-h/p/11815452.html</a></p>
</blockquote>
<p>照着改了一下</p>
<p>但是又出现了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Cannot set property $http of #&lt;Vue&gt; which has only a getter at eval axios</span><br></pre></td></tr></table></figure>

<p>最后解决方法</p>
<p>vue.config.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        proxy: &#123;</span><br><span class="line">            &#x27;/api&#x27;: &#123;</span><br><span class="line">                target: &#x27;http://***:3000/&#x27;,</span><br><span class="line">                // 允许跨域</span><br><span class="line">                changeOrigin: true,</span><br><span class="line">                ws: true,</span><br><span class="line">                pathRewrite: &#123;</span><br><span class="line">                    &#x27;^/api&#x27;: &#x27;&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.$axios.get(<span class="string">&#x27;/api/findall&#x27;</span>).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(response.data)</span><br><span class="line">            &#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">                alert(error);</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Debug</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud笔记04 Consul服务治理</title>
    <url>/2020/04/20/note-springcloud-04/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.consul.io/">https://www.consul.io/</a></p>
</blockquote>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><blockquote>
<p><a href="https://learn.hashicorp.com/consul/getting-started/install.html">https://learn.hashicorp.com/consul/getting-started/install.html</a></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">% brew install consul</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">% consul version</span><br><span class="line">Consul v1.6.3</span><br><span class="line">Protocol 2 spoken by default, understands 2 to 3 (agent will automatically use protocol &gt;2 when speaking to compatible agents)</span><br></pre></td></tr></table></figure>

<h1 id="官方教程"><a href="#官方教程" class="headerlink" title="官方教程"></a>官方教程</h1><blockquote>
<p><a href="https://learn.hashicorp.com/consul/getting-started/agent">https://learn.hashicorp.com/consul/getting-started/agent</a></p>
</blockquote>
<h2 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ consul agent -dev</span><br></pre></td></tr></table></figure>

<h2 id="查看节点"><a href="#查看节点" class="headerlink" title="查看节点"></a>查看节点</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ consul members</span><br></pre></td></tr></table></figure>

<p><strong>尝试</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">% consul members</span><br><span class="line">Node                  Address         Status  Type    Build  Protocol  DC   Segment</span><br><span class="line">Ss-MacBook-Pro.local  127.0.0.1:8301  alive   server  1.6.3  2         dc1  &lt;all&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">coconutnut@Ss-MacBook-Pro ~ % consul members -detailed</span><br><span class="line">Node                  Address         Status  Tags</span><br><span class="line">Ss-MacBook-Pro.local  127.0.0.1:8301  alive   acls=0,build=1.6.3:7f3b5f3+,dc=dc1,id=d9c5a17b-cc6b-1ca6-7c72-07304fbcccdc,port=8300,raft_vsn=3,role=consul,segment=&lt;all&gt;,vsn=2,vsn_max=3,vsn_min=2,wan_join_port=8302</span><br></pre></td></tr></table></figure>

<p>但是member命令获取的信息只是eventually consistent的</p>
<p>一致性更强的方式是使用http api</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl localhost:8500/v1/catalog/nodes</span><br></pre></td></tr></table></figure>

<p><strong>尝试</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">% curl localhost:8500/v1/catalog/nodes</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;ID&quot;: &quot;d9c5a17b-cc6b-1ca6-7c72-07304fbcccdc&quot;,</span><br><span class="line">        &quot;Node&quot;: &quot;Ss-MacBook-Pro.local&quot;,</span><br><span class="line">        &quot;Address&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">        &quot;Datacenter&quot;: &quot;dc1&quot;,</span><br><span class="line">        &quot;TaggedAddresses&quot;: &#123;</span><br><span class="line">            &quot;lan&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">            &quot;wan&quot;: &quot;127.0.0.1&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Meta&quot;: &#123;</span><br><span class="line">            &quot;consul-network-segment&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;CreateIndex&quot;: 10,</span><br><span class="line">        &quot;ModifyIndex&quot;: 11</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>也可以用dns</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">% dig @127.0.0.1 -p 8600 Judiths-MBP.node.consul</span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.10.6 &lt;&lt;&gt;&gt; @127.0.0.1 -p 8600 Judiths-MBP.node.consul</span><br><span class="line">; (1 server found)</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NXDOMAIN, id: 33684</span><br><span class="line">;; flags: qr aa rd; QUERY: 1, ANSWER: 0, AUTHORITY: 1, ADDITIONAL: 1</span><br><span class="line">;; WARNING: recursion requested but not available</span><br><span class="line"></span><br><span class="line">;; OPT PSEUDOSECTION:</span><br><span class="line">; EDNS: version: 0, flags:; udp: 4096</span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;Judiths-MBP.node.consul.	IN	A</span><br><span class="line"></span><br><span class="line">;; AUTHORITY SECTION:</span><br><span class="line">consul.			0	IN	SOA	ns.consul. hostmaster.consul. 1587353730 3600 600 86400 0</span><br><span class="line"></span><br><span class="line">;; Query time: 0 msec</span><br><span class="line">;; SERVER: 127.0.0.1#8600(127.0.0.1)</span><br><span class="line">;; WHEN: Mon Apr 20 11:35:30 CST 2020</span><br><span class="line">;; MSG SIZE  rcvd: 102</span><br></pre></td></tr></table></figure>

<h2 id="优雅的关闭节点"><a href="#优雅的关闭节点" class="headerlink" title="优雅的关闭节点"></a>优雅的关闭节点</h2><p>ctrl+C 暂停服务器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ consul leave</span><br></pre></td></tr></table></figure>

<h1 id="注册到consul"><a href="#注册到consul" class="headerlink" title="注册到consul"></a>注册到consul</h1><blockquote>
<p><a href="https://juejin.im/post/5db05582f265da4d4c20180f">https://juejin.im/post/5db05582f265da4d4c20180f</a></p>
</blockquote>
<p>将以前注册到eureka的服务改到consul</p>
<p>user-service模块</p>
<p>修改依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>修改配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#eureka:</span></span><br><span class="line"><span class="comment">#  client:</span></span><br><span class="line"><span class="comment">#    register-with-eureka: true</span></span><br><span class="line"><span class="comment">#    fetch-registry: true</span></span><br><span class="line"><span class="comment">#    service-url:</span></span><br><span class="line"><span class="comment">#      defaultZone: http://localhost:8001/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cloud:</span></span><br><span class="line">  <span class="attr">consul:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">    <span class="attr">discovery:</span></span><br><span class="line">      <span class="attr">service-name:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br></pre></td></tr></table></figure>

<p>ribbon-service模块也是</p>
<img src="/images/2020/screencapture2020-04-20 AM11.50.55.jpg">

<p> Service Checks是X，但是可以访问？</p>
<img src="/images/2020/screencapture2020-04-20 AM11.51.51.jpg">

<p>但是<a href="http://localhost:8301/user/1获取不了">http://localhost:8301/user/1获取不了</a></p>
<p>报错信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.lang.IllegalStateException: No instances available for user-service</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://blog.csdn.net/kxj19980524/article/details/86935415">https://blog.csdn.net/kxj19980524/article/details/86935415</a></p>
</blockquote>
<p>还需要加一个监控中心的依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>重启</p>
<img src="/images/2020/screencapture2020-04-20 AM11.58.30.jpg">

<p>访问<a href="http://localhost:8301/user/1四次">http://localhost:8301/user/1四次</a></p>
<p>控制台输出</p>
<img src="/images/2020/screencapture2020-04-20 AM11.58.49.jpg">

<p>交替调用</p>
<img src="/images/2020/screencapture2020-04-20 AM11.58.58.jpg">

<p>成功</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>终端启动consul服务器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ consul agent -dev</span><br></pre></td></tr></table></figure>

<p>Idea模块 consul客户端</p>
<p>依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-cloud-starter-consul-discovery&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cloud:</span><br><span class="line">  consul:</span><br><span class="line">    host: localhost</span><br><span class="line">    port: 8500</span><br><span class="line">    discovery:</span><br><span class="line">      service-name: $&#123;spring.application.name&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>springcloud</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatisPlus笔记01 CRUD</title>
    <url>/2020/04/21/note-mybatisplus-01/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/BV1rE41197jR">https://www.bilibili.com/video/BV1rE41197jR</a></p>
<p>p1~25</p>
</blockquote>
<h1 id="数据库准备"><a href="#数据库准备" class="headerlink" title="数据库准备"></a>数据库准备</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建测试表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_user` (</span><br><span class="line">`id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>, `user_name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>, `password` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">`name` <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">`age` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年龄&#x27;</span>, `email` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>, <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入测试数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` (`id`, `user_name`, `password`, `name`, `age`, `email`) <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;18&#x27;</span>, <span class="string">&#x27;test1@itcast.cn&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` (`id`, `user_name`, `password`, `name`, `age`, `email`) <span class="keyword">VALUES</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;lisi&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;20&#x27;</span>, <span class="string">&#x27;test2@itcast.cn&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` (`id`, `user_name`, `password`, `name`, `age`, `email`) <span class="keyword">VALUES</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;wangwu&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;28&#x27;</span>, <span class="string">&#x27;test3@itcast.cn&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` (`id`, `user_name`, `password`, `name`, `age`, `email`) <span class="keyword">VALUES</span> (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;zhaoliu&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;赵六&#x27;</span>, <span class="string">&#x27;21&#x27;</span>, <span class="string">&#x27;test4@itcast.cn&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user` (`id`, `user_name`, `password`, `name`, `age`, `email`) <span class="keyword">VALUES</span> (<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;sunqi&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;孙七&#x27;</span>, <span class="string">&#x27;24&#x27;</span>, <span class="string">&#x27;test5@itcast.cn&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h1 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h1><h2 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--mybatis-plus的springboot支持--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--mysql驱动--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--简化bean代码的工具包--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="log4j-properties"><a href="#log4j-properties" class="headerlink" title="log4j.properties"></a>log4j.properties</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG,A1</span></span><br><span class="line"><span class="meta">log4j.appender.A1</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.A1.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.A1.layout.ConversionPattern</span>=<span class="string">[%t] [%c]-[%p] %m%n</span></span><br></pre></td></tr></table></figure>

<h3 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.application.name</span> = <span class="string">itcast-mp-springboot</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/groot? useUnicode=true&amp;characterEncoding=utf8&amp;autoReconnect=true&amp;allowMultiQueries=true&amp;useSSL=false</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">iamgroot</span></span><br></pre></td></tr></table></figure>

<h2 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h2><p>使用lombok注解生成get、set方法</p>
<p>使用MybatisPlus注解指定表名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coconutnut.demo.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@TableName(&quot;tb_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  	<span class="meta">@TableId(type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用@TableId指定id的增长策略</p>
<h3 id="TableField"><a href="#TableField" class="headerlink" title="@TableField"></a>@TableField</h3><p>可解决的问题：</p>
<ol>
<li><p>对象中的属性名和字段名不一致的问题(非驼峰)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableField(value = &quot;email&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String mail;</span><br></pre></td></tr></table></figure>
</li>
<li><p>对象中的属性字段在表中不存在的问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableField(exist = false)</span></span><br><span class="line"><span class="keyword">private</span> String address;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询时不返回该字段的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableField(select = false)</span></span><br><span class="line"><span class="keyword">private</span> String password;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="Mapper接口"><a href="#Mapper接口" class="headerlink" title="Mapper接口"></a>Mapper接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coconutnut.demo.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.coconutnut.demo.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="SpringBoot启动类"><a href="#SpringBoot启动类" class="headerlink" title="SpringBoot启动类"></a>SpringBoot启动类</h2><p>使用@MapperScan设置mapper接口的扫描包</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coconutnut.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.coconutnut.demo.mapper&quot;)</span> </span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><img src="/images/2020/screencapture2020-04-21 PM12.22.59.jpg" width=300>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coconutnut.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.coconutnut.demo.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.coconutnut.demo.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出</p>
<img src="/images/2020/screencapture2020-04-21 PM12.19.07.jpg">

<h2 id="DEBUG-依赖重复"><a href="#DEBUG-依赖重复" class="headerlink" title="DEBUG 依赖重复"></a>DEBUG 依赖重复</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SLF4J: Class path contains multiple SLF4J bindings.</span><br></pre></td></tr></table></figure>

<p>删除依赖中的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h1 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h1><p>查看UserMapper继承的BaseMapper源码</p>
<img src="/images/2020/screencapture2020-04-21 PM12.28.46.jpg">

<p>CRUD方法都有了</p>
<p>官网文档</p>
<blockquote>
<p><a href="https://mybatis.plus/guide/crud-interface.html#mapper-crud-接口">https://mybatis.plus/guide/crud-interface.html#mapper-crud-%E6%8E%A5%E5%8F%A3</a></p>
</blockquote>
<p>直接测试</p>
<h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 插入一条记录</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(T entity)</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coconutnut.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.coconutnut.demo.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.coconutnut.demo.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setAge(<span class="number">20</span>);</span><br><span class="line">        user.setUserName(<span class="string">&quot;zhangsi&quot;</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;张四&quot;</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;zhangsi@163.com&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> result = <span class="keyword">this</span>.userMapper.insert(user); <span class="comment">// 返回的result是受影响的行数，并不是自增后的id</span></span><br><span class="line">        System.out.println(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">        System.out.println(user.getId()); <span class="comment">// 自增后的id会回填到对象中</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行后，数据库变化</p>
<img src="/images/2020/screencapture2020-04-21 PM12.57.42.jpg">

<p>输出</p>
<img src="/images/2020/screencapture2020-04-21 PM12.57.29.jpg">

<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据 whereEntity 条件，更新记录</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="meta">@Param(Constants.ENTITY)</span> T entity, <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; updateWrapper)</span></span>;</span><br><span class="line"><span class="comment">// 根据 ID 修改</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateById</span><span class="params">(<span class="meta">@Param(Constants.ENTITY)</span> T entity)</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="根据id更新"><a href="#根据id更新" class="headerlink" title="根据id更新"></a>根据id更新</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  User user = <span class="keyword">new</span> User();</span><br><span class="line">  user.setId(<span class="number">1L</span>);</span><br><span class="line">  user.setAge(<span class="number">21</span>);</span><br><span class="line">  <span class="comment">//根据id更新，更新不为null的字段</span></span><br><span class="line">  <span class="keyword">this</span>.userMapper.updateById(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行后</p>
<img src="/images/2020/screencapture2020-04-21 PM2.29.48.jpg">

<h3 id="根据条件更新"><a href="#根据条件更新" class="headerlink" title="根据条件更新"></a>根据条件更新</h3><h4 id="QueryWrapper"><a href="#QueryWrapper" class="headerlink" title="QueryWrapper"></a>QueryWrapper</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  User user = <span class="keyword">new</span> User();</span><br><span class="line">  user.setAge(<span class="number">22</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 更新的条件</span></span><br><span class="line">  QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">  <span class="comment">// wrapper.eq(&quot;id&quot;, 6);</span></span><br><span class="line">  wrapper.eq(<span class="string">&quot;user_name&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 执行更新操作</span></span><br><span class="line">  <span class="keyword">int</span> result = <span class="keyword">this</span>.userMapper.update(user, wrapper);</span><br><span class="line">  System.out.println(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>wrapper中设置属性用的是mysql表中的名称</p>
<p>执行后</p>
<img src="/images/2020/screencapture2020-04-21 PM2.35.03.jpg">

<h4 id="UpdateWrapper"><a href="#UpdateWrapper" class="headerlink" title="UpdateWrapper"></a>UpdateWrapper</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">//更新的条件以及字段</span></span><br><span class="line">  UpdateWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> UpdateWrapper&lt;&gt;();</span><br><span class="line">  wrapper.eq(<span class="string">&quot;id&quot;</span>, <span class="number">6</span>).set(<span class="string">&quot;age&quot;</span>, <span class="number">23</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//执行更新操作</span></span><br><span class="line">  <span class="keyword">int</span> result = <span class="keyword">this</span>.userMapper.update(<span class="keyword">null</span>, wrapper);</span><br><span class="line">  System.out.println(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行后</p>
<img src="/images/2020/screencapture2020-04-21 PM2.37.47.jpg">

<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据 entity 条件，删除记录</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; wrapper)</span></span>;</span><br><span class="line"><span class="comment">// 删除（根据ID 批量删除）</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteBatchIds</span><span class="params">(<span class="meta">@Param(Constants.COLLECTION)</span> Collection&lt;? extends Serializable&gt; idList)</span></span>;</span><br><span class="line"><span class="comment">// 根据 ID 删除</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteById</span><span class="params">(Serializable id)</span></span>;</span><br><span class="line"><span class="comment">// 根据 columnMap 条件，删除记录</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteByMap</span><span class="params">(<span class="meta">@Param(Constants.COLUMN_MAP)</span> Map&lt;String, Object&gt; columnMap)</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="deleteById"><a href="#deleteById" class="headerlink" title="deleteById"></a>deleteById</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result = <span class="keyword">this</span>.userMapper.deleteById(<span class="number">6L</span>);</span><br><span class="line">  System.out.println(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行后</p>
<img src="/images/2020/screencapture2020-04-21 PM2.41.34.jpg">

<h3 id="deleteByMap"><a href="#deleteByMap" class="headerlink" title="deleteByMap"></a>deleteByMap</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteByMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 将columnMap中的元素设置为删除的条件，多个之间为and关系</span></span><br><span class="line">  Map&lt;String, Object&gt; columnMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">  columnMap.put(<span class="string">&quot;age&quot;</span>,<span class="number">20</span>);</span><br><span class="line">  columnMap.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> result = <span class="keyword">this</span>.userMapper.deleteByMap(columnMap);</span><br><span class="line">  System.out.println(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行后</p>
<img src="/images/2020/screencapture2020-04-21 PM2.43.36.jpg">

<p>没有符合条件的</p>
<h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 用法1</span></span><br><span class="line"><span class="comment">//        QueryWrapper&lt;User&gt; wrapper = new QueryWrapper&lt;&gt;();</span></span><br><span class="line"><span class="comment">//        wrapper.eq(&quot;user_name&quot;,&quot;zhangsan&quot;);</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 用法2</span></span><br><span class="line">  User user = <span class="keyword">new</span> User();</span><br><span class="line">  user.setAge(<span class="number">20</span>);</span><br><span class="line">  user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">  <span class="comment">// 将实体对象进行包装，包装为操作条件</span></span><br><span class="line">  QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;(user);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> result = <span class="keyword">this</span>.userMapper.delete(wrapper);</span><br><span class="line">  System.out.println(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>推荐使用用法2</p>
<h3 id="deleteByIds"><a href="#deleteByIds" class="headerlink" title="deleteByIds"></a>deleteByIds</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteByIds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result = <span class="keyword">this</span>.userMapper.deleteBatchIds(Arrays.asList(<span class="number">1L</span>,<span class="number">10L</span>,<span class="number">20L</span>)); </span><br><span class="line">  System.out.println(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据 ID 查询</span></span><br><span class="line"><span class="function">T <span class="title">selectById</span><span class="params">(Serializable id)</span></span>;</span><br><span class="line"><span class="comment">// 根据 entity 条件，查询一条记录</span></span><br><span class="line"><span class="function">T <span class="title">selectOne</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询（根据ID 批量查询）</span></span><br><span class="line"><span class="function">List&lt;T&gt; <span class="title">selectBatchIds</span><span class="params">(<span class="meta">@Param(Constants.COLLECTION)</span> Collection&lt;? extends Serializable&gt; idList)</span></span>;</span><br><span class="line"><span class="comment">// 根据 entity 条件，查询全部记录</span></span><br><span class="line"><span class="function">List&lt;T&gt; <span class="title">selectList</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"><span class="comment">// 查询（根据 columnMap 条件）</span></span><br><span class="line"><span class="function">List&lt;T&gt; <span class="title">selectByMap</span><span class="params">(<span class="meta">@Param(Constants.COLUMN_MAP)</span> Map&lt;String, Object&gt; columnMap)</span></span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询全部记录</span></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; selectMaps(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper);</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询全部记录。注意： 只返回第一个字段的值</span></span><br><span class="line"><span class="function">List&lt;Object&gt; <span class="title">selectObjs</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据 entity 条件，查询全部记录（并翻页）</span></span><br><span class="line"><span class="function">IPage&lt;T&gt; <span class="title">selectPage</span><span class="params">(IPage&lt;T&gt; page, <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询全部记录（并翻页）</span></span><br><span class="line">IPage&lt;Map&lt;String, Object&gt;&gt; selectMapsPage(IPage&lt;T&gt; page, <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper);</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询总记录数</span></span><br><span class="line"><span class="function">Integer <span class="title">selectCount</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="selectById"><a href="#selectById" class="headerlink" title="selectById"></a>selectById</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectById</span><span class="params">()</span> </span>&#123; </span><br><span class="line">  User user = <span class="keyword">this</span>.userMapper.selectById(<span class="number">2L</span>);</span><br><span class="line">  System.out.println(<span class="string">&quot;result = &quot;</span> + user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行后</p>
<img src="/images/2020/screencapture2020-04-21 PM2.52.44.jpg">

<p>没查到为null</p>
<h3 id="selectOne"><a href="#selectOne" class="headerlink" title="selectOne"></a>selectOne</h3><p>不存在返回null</p>
<p>查到多条报错</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;User&gt;();</span><br><span class="line">  wrapper.eq(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;李四&quot;</span>);</span><br><span class="line">  User user = <span class="keyword">this</span>.userMapper.selectOne(wrapper);</span><br><span class="line">  System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User(id=2, userName=lisi, password=123456, name=李四, age=20, email=test2@itcast.cn)</span><br></pre></td></tr></table></figure>

<h3 id="selectBatchIds"><a href="#selectBatchIds" class="headerlink" title="selectBatchIds"></a>selectBatchIds</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectBatchIds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  List&lt;User&gt; users = <span class="keyword">this</span>.userMapper.selectBatchIds(Arrays.asList(<span class="number">2L</span>, <span class="number">3L</span>, <span class="number">100L</span>));</span><br><span class="line">  <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行后</p>
<img src="/images/2020/screencapture2020-04-21 PM2.54.08.jpg">

<h3 id="selectCount"><a href="#selectCount" class="headerlink" title="selectCount"></a>selectCount</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;User&gt;();</span><br><span class="line">  wrapper.gt(<span class="string">&quot;age&quot;</span>, <span class="number">23</span>); <span class="comment">// 年龄大于23岁</span></span><br><span class="line">  Integer count = <span class="keyword">this</span>.userMapper.selectCount(wrapper);</span><br><span class="line">  System.out.println(<span class="string">&quot;count = &quot;</span> + count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">count = 2</span><br></pre></td></tr></table></figure>

<h3 id="selectList"><a href="#selectList" class="headerlink" title="selectList"></a>selectList</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;User&gt;();</span><br><span class="line">  wrapper.gt(<span class="string">&quot;age&quot;</span>, <span class="number">23</span>); <span class="comment">// 年龄大于23岁</span></span><br><span class="line">  <span class="comment">//根据条件查询数据</span></span><br><span class="line">  List&lt;User&gt; users = <span class="keyword">this</span>.userMapper.selectList(wrapper);</span><br><span class="line">  <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行后</p>
<img src="/images/2020/screencapture2020-04-21 PM3.03.34.jpg">

<h3 id="selectPage"><a href="#selectPage" class="headerlink" title="selectPage"></a>selectPage</h3><p>配置分页插件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.coconutnut.demo.mapper&quot;)</span> <span class="comment">// 设置mapper接口的扫描包</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PaginationInterceptor <span class="title">paginationInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PaginationInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有了这个配置类之后，DemoApplication中的@MapperScan可以去掉</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;User&gt;();</span><br><span class="line">  wrapper.gt(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>); <span class="comment">// 年龄大于20岁</span></span><br><span class="line">  Page&lt;User&gt; page = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">  IPage&lt;User&gt; iPage = <span class="keyword">this</span>.userMapper.selectPage(page, wrapper);</span><br><span class="line"></span><br><span class="line">  System.out.println(<span class="string">&quot;数据总条数:&quot;</span> + iPage.getTotal());</span><br><span class="line">  System.out.println(<span class="string">&quot;总页数:&quot;</span> + iPage.getPages());</span><br><span class="line">  List&lt;User&gt; users = iPage.getRecords();</span><br><span class="line">  <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行后</p>
<img src="/images/2020/screencapture2020-04-21 PM3.11.25.jpg">

]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>mybatis_plus</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud笔记05 OpenFeign服务消费者</title>
    <url>/2020/04/21/note-springcloud-05/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://blog.csdn.net/ThinkWon/article/details/103735751">https://blog.csdn.net/ThinkWon/article/details/103735751</a></p>
</blockquote>
<p>Spring Cloud OpenFeign 是声明式的服务调用工具，它整合了Ribbon和Hystrix，拥有负载均衡和服务容错功能</p>
<h1 id="创建feign-service模块"><a href="#创建feign-service模块" class="headerlink" title="创建feign-service模块"></a>创建feign-service模块</h1><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p>教程给的依赖是</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>换成consul注册中心，改成</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>发现没有spring cloud版本和依赖管理，加上</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Hoxton.RELEASE<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>查看右侧Maven栏中没有红线</p>
<p>下一步</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>教程给的配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8701</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">feign-service</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8001/eureka/</span></span><br></pre></td></tr></table></figure>

<p>换成consul</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#eureka:</span></span><br><span class="line"><span class="comment">#  client:</span></span><br><span class="line"><span class="comment">#    register-with-eureka: true</span></span><br><span class="line"><span class="comment">#    fetch-registry: true</span></span><br><span class="line"><span class="comment">#    service-url:</span></span><br><span class="line"><span class="comment">#      defaultZone: http://localhost:8001/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cloud:</span></span><br><span class="line">  <span class="attr">consul:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">    <span class="attr">discovery:</span></span><br><span class="line">      <span class="attr">service-name:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="EnableFeignClients启动功能"><a href="#EnableFeignClients启动功能" class="headerlink" title="@EnableFeignClients启动功能"></a>@EnableFeignClients启动功能</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@EnableFeignClients</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class FeignServiceApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(FeignServiceApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="接口和控制器"><a href="#接口和控制器" class="headerlink" title="接口和控制器"></a>接口和控制器</h2><p>根据源码补齐其它代码</p>
<img src="/images/2020/screencapture2020-04-21 AM9.49.59.jpg" width=300>

<h1 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h1><p>启动consul服务器，两个user-service，feign-service服务</p>
<img src="/images/2020/screencapture2020-04-21 AM9.52.28.jpg">

<p>调用<a href="http://localhost:8701/user/1四次">http://localhost:8701/user/1四次</a></p>
<img src="/images/2020screencapture2020-04-21 AM9.53.09.jpg">

<p>交替打印</p>
<img src="/images/2020/screencapture2020-04-21 AM9.53.16.jpg">

<h1 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h1><p>前面UserFallbackService也拷过来了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;user-service&quot;, fallback = UserFallbackService.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注释也加了</p>
<p>修改application.yml，开启Hystrix功能</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在Feign中开启Hystrix</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>关闭两个user-service服务，重新启动feign-service</p>
<p>调用<a href="http://localhost:8701/user/1进行测试">http://localhost:8701/user/1进行测试</a></p>
<p>发现被降级</p>
<img src="/images/2020/screencapture2020-04-21 AM9.57.28.jpg">

<h1 id="日志打印功能"><a href="#日志打印功能" class="headerlink" title="日志打印功能"></a>日志打印功能</h1><p>用FeignConfig配置类</p>
<p>在application.yml中配置需要开启日志的Feign客户端</p>
<p>可设置日志级别</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><img src="/images/2020/screencapture2020-04-21 AM10.11.43.jpg">

]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>springcloud</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatisPlus笔记02 配置</title>
    <url>/2020/04/22/note-mybatisplus-02/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/BV1rE41197jR">https://www.bilibili.com/video/BV1rE41197jR</a></p>
<p>p27~32</p>
</blockquote>
<p><a href="https://mybatis.plus/config/#基本配置">官方文档</a></p>
<h1 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h1><h2 id="configLocation"><a href="#configLocation" class="headerlink" title="configLocation"></a>configLocation</h2><p>MyBatis 配置文件位置</p>
<p>eg：resources文件夹下有mybatis-config.xml，要将其作为MyBatis配置文件</p>
<p>则需在applications.properties中配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 指定全局的配置文件</span><br><span class="line">mybatis-plus.config-location = classpath:mybatis-config.xml</span><br></pre></td></tr></table></figure>

<h2 id="mapperLocations"><a href="#mapperLocations" class="headerlink" title="mapperLocations"></a>mapperLocations</h2><p>指定mapper文件位置</p>
<p>当默认的Mapper不够用（如需要多表查询时），可以指定自定义的mapper，在里面写sql语句</p>
<p>例如resources中新建mybatis文件夹，新建一个UserMapper.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mybatis-plus.mapper-locations = classpath*:mybatis/*.xml</span><br></pre></td></tr></table></figure>

<p>Maven多模块项目的扫描路径需以classpath*开头（即加在多个jar包下的xml文件）</p>
<h2 id="typeAliasesPackage"><a href="#typeAliasesPackage" class="headerlink" title="typeAliasesPackage"></a>typeAliasesPackage</h2><p>给包中的类注册别名，注册后在 Mapper 对应的 XML 文件中可以直接使用类名，而不用使用全限定的类名</p>
<p>例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mybatis-plus.type-aliases-package = cn.itcast.mp.pojo</span><br></pre></td></tr></table></figure>

<h1 id="进阶配置"><a href="#进阶配置" class="headerlink" title="进阶配置"></a>进阶配置</h1><p>大都为 MyBatis 原生支持的配置</p>
<p>注意：如果制定了全局配置文件，需要在全局配置文件中配置，和application.properties不能共存</p>
<h2 id="mapUnderscoreToCamelCase"><a href="#mapUnderscoreToCamelCase" class="headerlink" title="mapUnderscoreToCamelCase"></a>mapUnderscoreToCamelCase</h2><p>是否开启自动驼峰命名规则映射</p>
<h2 id="cacheEnabled"><a href="#cacheEnabled" class="headerlink" title="cacheEnabled"></a>cacheEnabled</h2><p>开启Mybatis二级缓存，默认为 true</p>
<h1 id="DB-策略配置"><a href="#DB-策略配置" class="headerlink" title="DB 策略配置"></a>DB 策略配置</h1><h2 id="idType"><a href="#idType" class="headerlink" title="idType"></a>idType</h2><p>全局默认主键类型，设置后，即可省略实体对象中的@TableId(type = IdType.AUTO)配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mybatis-plus.global-config.db-config.id-type = auto</span><br></pre></td></tr></table></figure>

<h2 id="tablePrefix"><a href="#tablePrefix" class="headerlink" title="tablePrefix"></a>tablePrefix</h2><p>指定表名前缀，全局配置后可省略@TableName()配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mybatis-plus.global-config.db-config.table-prefix = tb_</span><br></pre></td></tr></table></figure>

<p>如，User类默认会去找user表，如果要找tb_user表，需要使用注解，或者全局配置前缀</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>mybatis_plus</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatisPlus笔记03 条件构造器</title>
    <url>/2020/04/22/note-mybatisplus-03/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/BV1rE41197jR">https://www.bilibili.com/video/BV1rE41197jR</a></p>
<p>p33~39</p>
</blockquote>
<p>Wrapper接口实现类重点有AbstractWrapper和AbstractChainWrapper</p>
<p>区别在于AbstractChainWrapper采用lambda表达式编写</p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>以allEq为例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置条件</span></span><br><span class="line">Map&lt;String,Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;(); </span><br><span class="line">params.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">params.put(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;20&quot;</span>); </span><br><span class="line">params.put(<span class="string">&quot;password&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">wrapper.allEq(params);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询</span></span><br><span class="line">List&lt;User&gt; users = <span class="keyword">this</span>.userMapper.selectList(wrapper);</span><br><span class="line"><span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">	System.out.println(user); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样生成的sql语句为</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb_user <span class="keyword">WHERE</span> password <span class="keyword">IS</span> <span class="keyword">NULL</span> <span class="keyword">AND</span> name <span class="operator">=</span> ? <span class="keyword">AND</span> age <span class="operator">=</span> ?</span><br></pre></td></tr></table></figure>

<p>第二个参数为false时忽略值为null的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">wrapper.allEq(params,<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure>

<p>生成的sql语句为</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tb_user <span class="keyword">WHERE</span> name <span class="operator">=</span> ? <span class="keyword">AND</span> age <span class="operator">=</span> ?</span><br></pre></td></tr></table></figure>

<p>还可以设置过滤器</p>
<h1 id="基本比较操作"><a href="#基本比较操作" class="headerlink" title="基本比较操作"></a>基本比较操作</h1><p><a href="https://mybatis.plus/guide/wrapper.html#abstractwrapper">官方文档</a></p>
<h1 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h1><p>like、notLike、likeLeft、likeRight</p>
<p>例如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line"></span><br><span class="line">wrapper.like(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;曹&quot;</span>); <span class="comment">// %曹%</span></span><br><span class="line"></span><br><span class="line">List&lt;User&gt; users = <span class="keyword">this</span>.userMapper.selectList(wrapper);</span><br><span class="line"><span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">	System.out.println(user); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><p>orderBy（默认Asc）、orderByAsc、orderByDesc</p>
<p>例如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// SELECT id,user_name,password,name,age,email FROM tb_user ORDER BY age DESC</span></span><br><span class="line">wrapper.orderByDesc(<span class="string">&quot;age&quot;</span>);</span><br><span class="line"></span><br><span class="line">List&lt;User&gt; users = <span class="keyword">this</span>.userMapper.selectList(wrapper);</span><br><span class="line"><span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">	System.out.println(user); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="逻辑查询"><a href="#逻辑查询" class="headerlink" title="逻辑查询"></a>逻辑查询</h1><p>or、and</p>
<p>例如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// SELECT id,user_name,password,name,age,email FROM tb_user WHERE name = ? OR age = ?</span></span><br><span class="line">wrapper.eq(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;李四&quot;</span>).or().eq(<span class="string">&quot;age&quot;</span>, <span class="number">24</span>);</span><br><span class="line"></span><br><span class="line">List&lt;User&gt; users = <span class="keyword">this</span>.userMapper.selectList(wrapper);</span><br><span class="line"><span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">	System.out.println(user); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="指定查询字段"><a href="#指定查询字段" class="headerlink" title="指定查询字段"></a>指定查询字段</h1><p>select</p>
<p>例如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// SELECT id,name,age FROM tb_user WHERE name = ? OR age = ?</span></span><br><span class="line">wrapper.eq(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;李四&quot;</span>)</span><br><span class="line">.or()</span><br><span class="line">.eq(<span class="string">&quot;age&quot;</span>, <span class="number">24</span>)</span><br><span class="line">.select(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>);</span><br><span class="line"></span><br><span class="line">List&lt;User&gt; users = <span class="keyword">this</span>.userMapper.selectList(wrapper);</span><br><span class="line"><span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">	System.out.println(user); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>mybatis_plus</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatisPlus笔记04 ActiveRecord</title>
    <url>/2020/04/24/note-mybatisplus-04/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/BV1rE41197jR">https://www.bilibili.com/video/BV1rE41197jR</a></p>
<p>P40~45</p>
</blockquote>
<p>属于ORM(对象关系映射)层</p>
<p>主要思想:</p>
<ul>
<li>每一个数据库表对应创建一个类，类的每一个对象实例对应于数据库中表的一行记录;通常表的每个字段在类中都有相应的Field;</li>
<li>ActiveRecord同时负责把自己持久化，在ActiveRecord中封装了对数据库的访问，即CURD;</li>
<li>ActiveRecord是一种领域模型(Domain Model)，封装了部分业务逻辑;</li>
</ul>
<h1 id="开启AR"><a href="#开启AR" class="headerlink" title="开启AR"></a>开启AR</h1><p>实体对象继承Model即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@TableName(&quot;tb_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>不需要UserMapper了，直接查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  User user = <span class="keyword">new</span> User();</span><br><span class="line">  user.setId(<span class="number">2L</span>);</span><br><span class="line">  User user2 = user.selectById();</span><br><span class="line">  System.out.println(user2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User(id=2, userName=lisi, password=123456, name=李四, age=20, email=test2@itcast.cn)</span><br></pre></td></tr></table></figure>

<p>对比以前的查询方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectById</span><span class="params">()</span> </span>&#123; </span><br><span class="line">  User user = <span class="keyword">this</span>.userMapper.selectById(<span class="number">2L</span>);</span><br><span class="line">  System.out.println(<span class="string">&quot;result = &quot;</span> + user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用AR后，不需要显示的注入UserMapper，但是这个类还是需要的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果把这个删了就运行不了了</p>
<h1 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h1><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><p>方法一：同上</p>
<p>方法二：条件查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelect</span><span class="params">()</span></span>&#123;</span><br><span class="line">  User user = <span class="keyword">new</span> User();</span><br><span class="line">  QueryWrapper&lt;User&gt; userQueryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">  userQueryWrapper.le(<span class="string">&quot;age&quot;</span>,<span class="string">&quot;20&quot;</span>);</span><br><span class="line">  List&lt;User&gt; users = user.selectList(userQueryWrapper);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (User user1 : users) &#123;</span><br><span class="line">    System.out.println(user1);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span></span>&#123;</span><br><span class="line">  User user = <span class="keyword">new</span> User();</span><br><span class="line">  user.setName(<span class="string">&quot;刘备&quot;</span>);</span><br><span class="line">  user.setAge(<span class="number">30</span>);</span><br><span class="line">  user.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">  user.setUserName(<span class="string">&quot;liubei&quot;</span>);</span><br><span class="line">  user.setEmail(<span class="string">&quot;liubei@itcast.cn&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">boolean</span> insert = user.insert();</span><br><span class="line"></span><br><span class="line">  System.out.println(insert);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回插入是否成功</p>
<img src="/images/2020/screencapture2020-04-24 PM6.15.09.jpg" width=500>

<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">  User user = <span class="keyword">new</span> User();</span><br><span class="line">  user.setId(<span class="number">5L</span>);</span><br><span class="line">  user.setAge(<span class="number">35</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">boolean</span> update = user.updateById();</span><br><span class="line">  System.out.println(update);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/images/2020/screencapture2020-04-24 PM6.16.55.jpg" width=500>

<p>也可以根据条件（用Wrapper）更新</p>
<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  User user = <span class="keyword">new</span> User(); user.setId(<span class="number">7L</span>);</span><br><span class="line">  <span class="keyword">boolean</span> delete = user.deleteById();</span><br><span class="line">  System.out.println(delete);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/images/2020/screencapture2020-04-24 PM6.18.54.jpg" width=500>

]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>mybatis_plus</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatisPlus笔记05 插件</title>
    <url>/2020/04/24/note-mybatisplus-05/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/BV1rE41197jR">https://www.bilibili.com/video/BV1rE41197jR</a></p>
<p>P49~54</p>
</blockquote>
<h1 id="mybatis的插件机制"><a href="#mybatis的插件机制" class="headerlink" title="mybatis的插件机制"></a>mybatis的插件机制</h1><p>MyBatis 允许在已映射语句执行过程中的某一点进行拦截</p>
<p>默认情况下，MyBatis 允许使用插件来拦截的方法调用包括:</p>
<ul>
<li><p>Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed) </p>
</li>
<li><p>ParameterHandler (getParameterObject, setParameters)</p>
</li>
<li><p>ResultSetHandler (handleResultSets, handleOutputParameters)</p>
</li>
<li><p>StatementHandler (prepare, parameterize, batch, update, query)</p>
</li>
</ul>
<p>可以拦截：</p>
<ul>
<li>执行器的方法</li>
<li>参数的处理</li>
<li>结果集的处理</li>
<li>Sql语法构建的处理</li>
</ul>
<p>自定义拦截器可以实现Interceptor接口，注入到Spring容器</p>
<h1 id="执行分析插件"><a href="#执行分析插件" class="headerlink" title="执行分析插件"></a>执行分析插件</h1><p>可用作阻断全表更新、删除的操作</p>
<p>注意:该插件仅适用于开发环境，不适用于生产环境（性能问题）</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>MybatisPlusConfig中配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SqlExplainInterceptor <span class="title">sqlExplainInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">  SqlExplainInterceptor sqlExplainInterceptor = <span class="keyword">new</span> SqlExplainInterceptor();</span><br><span class="line">  List&lt;ISqlParser&gt; sqlParserList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  sqlParserList.add(<span class="keyword">new</span> BlockAttackSqlParser());</span><br><span class="line">  sqlExplainInterceptor.setSqlParserList(sqlParserList);</span><br><span class="line">  <span class="keyword">return</span> sqlExplainInterceptor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">  User user = <span class="keyword">new</span> User();</span><br><span class="line">  user.setAge(<span class="number">20</span>);</span><br><span class="line">  <span class="keyword">int</span> result = <span class="keyword">this</span>.userMapper.update(user, <span class="keyword">null</span>);</span><br><span class="line">  System.out.println(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：全表更新被阻断</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Prohibition of table update operation</span><br></pre></td></tr></table></figure>

<img src="/images/2020/screencapture2020-04-24 PM6.51.47.jpg">

<h1 id="性能分析插件"><a href="#性能分析插件" class="headerlink" title="性能分析插件"></a>性能分析插件</h1><p>用于输出每条 SQL 语句及其执行时间，可以设置最大执行时间，超过时间会抛出异常</p>
<h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><p>两种方式，可以像上面一样在Config中配置，也可以在xml中配置</p>
<p>这里用xml方式</p>
<p>mybatis-config.xml中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span> <span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SQL 执行性能分析，开发环境使用，线上不推荐。 maxTime 指的是 sql 最大执行时长 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.baomidou.mybatisplus.extension.plugins.PerformanceInterceptor&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxTime&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--SQL是否格式化 默认false--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;format&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><p>执行testSelectById()</p>
<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Time：10 ms - ID：com.coconutnut.demo.mapper.UserMapper.selectById</span><br><span class="line">Execute SQL：</span><br><span class="line">    SELECT</span><br><span class="line">        id,</span><br><span class="line">        user_name,</span><br><span class="line">        password,</span><br><span class="line">        name,</span><br><span class="line">        age,</span><br><span class="line">        email </span><br><span class="line">    FROM</span><br><span class="line">        tb_user </span><br><span class="line">    WHERE</span><br><span class="line">        id=2 </span><br><span class="line"></span><br><span class="line">User(id=2, userName=lisi, password=123456, name=李四, age=20, email=test2@itcast.cn)</span><br></pre></td></tr></table></figure>

<h1 id="乐观锁插件"><a href="#乐观锁插件" class="headerlink" title="乐观锁插件"></a>乐观锁插件</h1><p>当要更新一条记录的时候，希望这条记录没有被别人更新</p>
<p>实现方式:</p>
<ul>
<li>取出记录时，获取当前version</li>
<li>更新时，带上这个version</li>
<li>执行更新时， set version = newVersion where version = oldVersion</li>
<li>如果version不对，就更新失败</li>
</ul>
<h2 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> OptimisticLockerInterceptor <span class="title">optimisticLockerInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> OptimisticLockerInterceptor();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Version字段"><a href="#Version字段" class="headerlink" title="Version字段"></a>Version字段</h2><p>为表添加version字段，并且设置初始值为1</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `tb_user`</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">COLUMN</span> `version` <span class="type">int</span>(<span class="number">10</span>) <span class="keyword">NULL</span> AFTER `email`;</span><br><span class="line">UPDATE `tb_user` <span class="keyword">SET</span> `version`<span class="operator">=</span><span class="string">&#x27;1&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>为User实体类添加version字段和注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Version</span></span><br><span class="line"><span class="keyword">private</span> Integer version;</span><br></pre></td></tr></table></figure>

<h2 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateVersion</span><span class="params">()</span></span>&#123;</span><br><span class="line">  User user = <span class="keyword">new</span> User();</span><br><span class="line">  user.setAge(<span class="number">30</span>);</span><br><span class="line">  user.setId(<span class="number">2L</span>);</span><br><span class="line">  user.setVersion(<span class="number">1</span>); <span class="comment">// 当前version为1</span></span><br><span class="line">  <span class="keyword">int</span> result = <span class="keyword">this</span>.userMapper.updateById(user);</span><br><span class="line">  System.out.println(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> Time：2 ms - ID：com.coconutnut.demo.mapper.UserMapper.updateById</span><br><span class="line">Execute SQL：</span><br><span class="line">    UPDATE</span><br><span class="line">        tb_user </span><br><span class="line">    SET</span><br><span class="line">        age=30,</span><br><span class="line">        version=2 </span><br><span class="line">    WHERE</span><br><span class="line">        id=2 </span><br><span class="line">        AND version=1</span><br><span class="line"></span><br><span class="line">result = 1</span><br></pre></td></tr></table></figure>

<p>乐观锁插件添加了version条件，并设置新的version为2</p>
<img src="/images/2020/screencapture2020-04-24 PM7.07.07.jpg">

<p>如果再执行一次</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> Time：1 ms - ID：com.coconutnut.demo.mapper.UserMapper.updateById</span><br><span class="line">Execute SQL：</span><br><span class="line">    UPDATE</span><br><span class="line">        tb_user </span><br><span class="line">    SET</span><br><span class="line">        age=30,</span><br><span class="line">        version=2 </span><br><span class="line">    WHERE</span><br><span class="line">        id=2 </span><br><span class="line">        AND version=1</span><br><span class="line"></span><br><span class="line">result = 0</span><br></pre></td></tr></table></figure>

<p>此时version已经是2，不能执行了</p>
<p>正常的使用方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateVersion</span><span class="params">()</span></span>&#123;</span><br><span class="line">  User user = <span class="keyword">new</span> User();</span><br><span class="line">  user.setId(<span class="number">2L</span>); <span class="comment">// 查询条件</span></span><br><span class="line"></span><br><span class="line">  User userVersion = user.selectById(); <span class="comment">// 当前版本</span></span><br><span class="line">  user.setAge(<span class="number">30</span>);  <span class="comment">// 更新的数据</span></span><br><span class="line">  user.setVersion(userVersion.getVersion()); <span class="comment">// 版本信息</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> result = <span class="keyword">this</span>.userMapper.updateById(user);</span><br><span class="line">  System.out.println(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a>特别说明</h2><ul>
<li>支持的数据类型只有:int,Integer,long,Long,Date,Timestamp,LocalDateTime</li>
<li>整数类型下 newVersion = oldVersion + 1</li>
<li>newVersion 会回写到 entity 中</li>
<li>仅支持 updateById(id) 与 update(entity, wrapper) 方法</li>
<li>在 update(entity, wrapper) 方法下, wrapper 不能复用</li>
</ul>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>mybatis_plus</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatisPlus笔记06 自动填充、逻辑删除、通用枚举等</title>
    <url>/2020/04/24/note-mybatisplus-06/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/BV1rE41197jR">https://www.bilibili.com/video/BV1rE41197jR</a></p>
<p>P55~62</p>
</blockquote>
<h1 id="sql注入器"><a href="#sql注入器" class="headerlink" title="sql注入器"></a>sql注入器</h1><p>默认的Mapper中方法不够用时，自己扩充BaseMapper中的方法</p>
<blockquote>
<p><a href="https://www.bilibili.com/video/BV1rE41197jR?p=55">https://www.bilibili.com/video/BV1rE41197jR?p=55</a></p>
</blockquote>
<h1 id="自动填充"><a href="#自动填充" class="headerlink" title="自动填充"></a>自动填充</h1><p>插入或者更新数据时，希望有些字段可以自动填充数据，比如密码、version 等</p>
<h2 id="添加-TableField注解"><a href="#添加-TableField注解" class="headerlink" title="添加@TableField注解"></a>添加@TableField注解</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Version</span></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line"><span class="keyword">private</span> Integer version;</span><br></pre></td></tr></table></figure>

<p>FieldFill可选：</p>
<ul>
<li>DEFAULT 默认不处理</li>
<li>INSERT 插入试填充字段</li>
<li>UPDATE 更新时填充字段</li>
<li>INSERT_UPDATE 插入和更新时填充字段</li>
</ul>
<h2 id="编写MyMetaObjectHandler"><a href="#编写MyMetaObjectHandler" class="headerlink" title="编写MyMetaObjectHandler"></a>编写MyMetaObjectHandler</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title">MetaObjectHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        Object version = getFieldValByName(<span class="string">&quot;version&quot;</span>, metaObject);</span><br><span class="line">        <span class="keyword">if</span>(version == <span class="keyword">null</span>)&#123;</span><br><span class="line">            setFieldValByName(<span class="string">&quot;version&quot;</span>, <span class="number">1</span>, metaObject);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsertFill</span><span class="params">()</span></span>&#123;</span><br><span class="line">  User user = <span class="keyword">new</span> User();</span><br><span class="line">  user.setName(<span class="string">&quot;张四&quot;</span>);</span><br><span class="line">  user.setUserName(<span class="string">&quot;zhangsi&quot;</span>);</span><br><span class="line">  user.setPassword(<span class="string">&quot;123123&quot;</span>);</span><br><span class="line">  user.setAge(<span class="number">30</span>);</span><br><span class="line">  user.setEmail(<span class="string">&quot;zhangsi@itast.cn&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> result = <span class="keyword">this</span>.userMapper.insert(user);</span><br><span class="line">  System.out.println(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> Time：9 ms - ID：com.coconutnut.demo.mapper.UserMapper.insert</span><br><span class="line">Execute SQL：</span><br><span class="line">    INSERT </span><br><span class="line">    INTO</span><br><span class="line">        tb_user</span><br><span class="line">        ( user_name, password, name, age, email, version ) </span><br><span class="line">    VALUES</span><br><span class="line">        ( &#x27;zhangsi&#x27;, &#x27;123123&#x27;, &#x27;张四&#x27;, 30, &#x27;zhangsi@itast.cn&#x27;, 1 )</span><br><span class="line"></span><br><span class="line">result = 1</span><br></pre></td></tr></table></figure>

<h1 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h1><p>将数据标记为删除，而并非真正删除</p>
<p>查询时需要携带状态条件，确保被标记的数据不被查询到</p>
<h2 id="修改表结构"><a href="#修改表结构" class="headerlink" title="修改表结构"></a>修改表结构</h2><p>为tb_user表增加deleted字段，用于表示数据是否被删除，1代表删除，0代表未删除</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `tb_user`</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">COLUMN</span> `deleted` <span class="type">int</span>(<span class="number">1</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;1代表删除，0代表未删除&#x27;</span> AFTER `version`;</span><br></pre></td></tr></table></figure>

<p>修改User实体，增加deleted属性并且添加@TableLogic注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableLogic</span></span><br><span class="line"><span class="keyword">private</span> Integer deleted;</span><br></pre></td></tr></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>application.properties中</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 逻辑已删除值(默认为 1) mybatis-plus.global-config.db-config.logic-delete-value=1</span></span><br><span class="line"><span class="comment"># 逻辑未删除值(默认为 0) mybatis-plus.global-config.db-config.logic-not-delete-value=0</span></span><br></pre></td></tr></table></figure>

<p>直接用默认值可以省略</p>
<h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  User user = <span class="keyword">new</span> User(); user.setId(<span class="number">2L</span>);</span><br><span class="line">  <span class="keyword">boolean</span> delete = user.deleteById();</span><br><span class="line">  System.out.println(delete);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> Time：2 ms - ID：com.coconutnut.demo.mapper.UserMapper.deleteById</span><br><span class="line">Execute SQL：</span><br><span class="line">    UPDATE</span><br><span class="line">        tb_user </span><br><span class="line">    SET</span><br><span class="line">        deleted=1 </span><br><span class="line">    WHERE</span><br><span class="line">        id=2 </span><br><span class="line">        AND deleted=0</span><br><span class="line"></span><br><span class="line">true</span><br></pre></td></tr></table></figure>

<p>实际上变成了UPDATE</p>
<img src="/images/2020/screencapture2020-04-24 PM7.42.26.jpg">

<p>然后查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  User user = <span class="keyword">new</span> User();</span><br><span class="line">  user.setId(<span class="number">2L</span>);</span><br><span class="line">  User user2 = user.selectById();</span><br><span class="line">  System.out.println(user2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> Time：5 ms - ID：com.coconutnut.demo.mapper.UserMapper.selectById</span><br><span class="line">Execute SQL：</span><br><span class="line">    SELECT</span><br><span class="line">        id,</span><br><span class="line">        user_name,</span><br><span class="line">        password,</span><br><span class="line">        name,</span><br><span class="line">        age,</span><br><span class="line">        email,</span><br><span class="line">        version,</span><br><span class="line">        deleted </span><br><span class="line">    FROM</span><br><span class="line">        tb_user </span><br><span class="line">    WHERE</span><br><span class="line">        id=2 </span><br><span class="line">        AND deleted=0</span><br><span class="line"></span><br><span class="line">null</span><br></pre></td></tr></table></figure>

<p>SQL中添加了deleted=0的条件，没有查到数据</p>
<h1 id="通用枚举"><a href="#通用枚举" class="headerlink" title="通用枚举"></a>通用枚举</h1><h2 id="修改表结构-1"><a href="#修改表结构-1" class="headerlink" title="修改表结构"></a>修改表结构</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `tb_user`</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">COLUMN</span> `sex` <span class="type">int</span>(<span class="number">1</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">1</span> COMMENT <span class="string">&#x27;1-男，2-女&#x27;</span> AFTER `deleted`;</span><br></pre></td></tr></table></figure>

<p>修改User实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> SexEnum sex;</span><br></pre></td></tr></table></figure>

<h2 id="定义枚举"><a href="#定义枚举" class="headerlink" title="定义枚举"></a>定义枚举</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coconutnut.demo.enums;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.enums.IEnum;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">SexEnum</span> <span class="keyword">implements</span> <span class="title">IEnum</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    MAN(<span class="number">1</span>,<span class="string">&quot;男&quot;</span>),</span><br><span class="line">    WOMAN(<span class="number">2</span>,<span class="string">&quot;女&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> value;</span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">    SexEnum(<span class="keyword">int</span> value, String desc) &#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.desc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 枚举包扫描</span><br><span class="line">mybatis-plus.type-enums-package=com.coconutnut.demo.enums</span><br></pre></td></tr></table></figure>

<h2 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span></span>&#123;</span><br><span class="line">  User user = <span class="keyword">new</span> User();</span><br><span class="line">  user.setName(<span class="string">&quot;张五&quot;</span>);</span><br><span class="line">  user.setAge(<span class="number">30</span>);</span><br><span class="line">  user.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">  user.setUserName(<span class="string">&quot;zhangwu&quot;</span>);</span><br><span class="line">  user.setEmail(<span class="string">&quot;zhangwu@itcast.cn&quot;</span>);</span><br><span class="line">  user.setSex(SexEnum.WOMAN);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">boolean</span> insert = user.insert();</span><br><span class="line">  System.out.println(insert);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> Time：6 ms - ID：com.coconutnut.demo.mapper.UserMapper.insert</span><br><span class="line">Execute SQL：</span><br><span class="line">    INSERT </span><br><span class="line">    INTO</span><br><span class="line">        tb_user</span><br><span class="line">        ( user_name, password, name, age, email, sex, version ) </span><br><span class="line">    VALUES</span><br><span class="line">        ( &#x27;zhangwu&#x27;, &#x27;123456&#x27;, &#x27;张五&#x27;, 30, &#x27;zhangwu@itcast.cn&#x27;, 2, 1 )</span><br><span class="line"></span><br><span class="line">true</span><br></pre></td></tr></table></figure>

<img src="/images/2020/screencapture2020-04-24 PM7.51.09.jpg">

<h1 id="代码生成器"><a href="#代码生成器" class="headerlink" title="代码生成器"></a>代码生成器</h1><p>AutoGenerator 是 MyBatis-Plus 的代码生成器，通过 AutoGenerator 可以快速生成 Entity、Mapper、MapperXML、Service、Controller 等各个模块的代码，提升开发效率</p>
<blockquote>
<p><a href="https://www.bilibili.com/video/BV1rE41197jR?p=60">https://www.bilibili.com/video/BV1rE41197jR?p=60</a></p>
</blockquote>
<h1 id="MyBatisX快速开发插件"><a href="#MyBatisX快速开发插件" class="headerlink" title="MyBatisX快速开发插件"></a>MyBatisX快速开发插件</h1><p>基于 IDEA 的快速开发插件</p>
<p>安装：File -&gt; Settings -&gt; Plugins，搜索并安装</p>
<p>功能：Java和对应XML跳转；Mapper方法自动生成 XML</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>mybatis_plus</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud笔记06 Gateway服务网关</title>
    <url>/2020/04/25/note-springcloud-06/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://blog.csdn.net/ThinkWon/article/details/103757927">https://blog.csdn.net/ThinkWon/article/details/103757927</a></p>
</blockquote>
<p>Gateway是在Spring生态系统之上构建的API网关服务，旨在提供一种简单而有效的方式来对API进行路由，以及提供一些强大的过滤器功能， 例如：熔断、限流、重试等</p>
<p>集成Hystrix的断路器功能和Spring Cloud服务发现功能</p>
<h1 id="创建api-gateway模块"><a href="#创建api-gateway模块" class="headerlink" title="创建api-gateway模块"></a>创建api-gateway模块</h1><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>不需要注册？</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9201</span></span><br><span class="line"></span><br><span class="line"><span class="attr">service-url:</span></span><br><span class="line">  <span class="attr">user-service:</span> <span class="string">http://localhost:8201</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">          <span class="comment"># 路由的ID</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">path_route</span></span><br><span class="line">          <span class="comment"># 匹配后路由地址</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">$&#123;service-url.user-service&#125;/user/&#123;id&#125;</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">              <span class="comment"># 断言，路径相匹配的进行路由</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/user/&#123;id&#125;</span></span><br></pre></td></tr></table></figure>

<p>启动consul-server、user-service和api-gateway</p>
<p>测试 <a href="http://localhost:9201/user/1">http://localhost:9201/user/1</a></p>
<img src="/images/2020/screencapture2020-04-25 AM9.58.55.jpg">

<h1 id="Route-Predicate-的使用"><a href="#Route-Predicate-的使用" class="headerlink" title="Route Predicate 的使用"></a>Route Predicate 的使用</h1><ul>
<li><p>After Route Predicate : 在指定时间之后的请求会匹配该路由</p>
</li>
<li><p>Before Route Predicate : 在指定时间之前的请求会匹配该路由</p>
</li>
<li><p>Between Route Predicate : 在指定时间区间内的请求会匹配该路由</p>
</li>
<li><p>Cookie Route Predicate : 带有指定Cookie的请求会匹配该路由</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=jourwon</span><br></pre></td></tr></table></figure>
</li>
<li><p>Header Route Predicate : 带有指定请求头的请求会匹配该路由</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">X-Request-Id:123</span><br></pre></td></tr></table></figure>
</li>
<li><p>Host Route Predicate : 带有指定Host的请求会匹配该路由</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Host:www.jourwon.com</span><br></pre></td></tr></table></figure>
</li>
<li><p>Method Route Predicate : 发送指定方法的请求会匹配该路由</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET</span><br></pre></td></tr></table></figure>
</li>
<li><p>Path Route Predicate : 发送指定路径的请求会匹配该路由</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/user/1</span><br></pre></td></tr></table></figure>
</li>
<li><p>Query Route Predicate : 带指定查询参数的请求可以匹配该路由</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=jourwon</span><br></pre></td></tr></table></figure>
</li>
<li><p>RemoteAddr Route Predicate : 从指定远程地址发起的请求可以匹配该路由</p>
</li>
<li><p>Weight Route Predicate : 使用权重来路由相应请求</p>
<p>如80%的请求路由到localhost:8201，20%路由到localhost:8202</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">weight_high</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://localhost:8201</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Weight=group1,</span> <span class="number">8</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">weight_low</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://localhost:8202</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Weight=group1,</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="Route-Filter的使用"><a href="#Route-Filter的使用" class="headerlink" title="Route Filter的使用"></a>Route Filter的使用</h1><p>可用于修改进入的HTTP请求和返回的HTTP响应，只能指定路由进行使用</p>
<ul>
<li>AddRequestParameter GatewayFilter : 给请求添加参数的过滤器</li>
<li>StripPrefix GatewayFilter : 对指定数量的路径前缀进行去除的过滤器</li>
<li>PrefixPath GatewayFilter : 与StripPrefix过滤器相反，会对原有路径进行增加操作的过滤器</li>
<li>Retry GatewayFilter : 对路由请求进行重试的过滤器，根据路由请求返回的HTTP状态码来确定是否进行重试</li>
</ul>
<h2 id="Hystrix-GatewayFilter"><a href="#Hystrix-GatewayFilter" class="headerlink" title="Hystrix GatewayFilter"></a>Hystrix GatewayFilter</h2><p>将断路器功能添加到网关路由中</p>
<p>需添加Hystrix的相关依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>添加相关服务降级的处理类FallbackController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FallbackController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/fallback&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">fallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        result.put(<span class="string">&quot;data&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line">        result.put(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;Get request fallback!&quot;</span>);</span><br><span class="line">        result.put(<span class="string">&quot;code&quot;</span>,<span class="number">500</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置服务降级</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">filters:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hystrix</span></span><br><span class="line">    <span class="attr">args:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">fallbackcmd</span></span><br><span class="line">      <span class="attr">fallback-uri:</span> <span class="string">forward:/fallback</span></span><br></pre></td></tr></table></figure>

<p>测试（先重启api-gateway）</p>
<p>关闭user-service，调用<a href="http://localhost:9201/user/1">http://localhost:9201/user/1</a> </p>
<img src="/images/2020/screencapture2020-04-25 AM10.13.57.jpg">

<p>发生了降级</p>
<h2 id="RequestRateLimiter-GatewayFilter"><a href="#RequestRateLimiter-GatewayFilter" class="headerlink" title="RequestRateLimiter GatewayFilter"></a>RequestRateLimiter GatewayFilter</h2><p>可以用于限流</p>
<p>添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis-reactive<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>添加限流策略的配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisRateLimiterConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KeyResolver <span class="title">userKeyResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 根据请求参数中的username进行限流</span></span><br><span class="line">        <span class="keyword">return</span> exchange -&gt; Mono.just(exchange.getRequest().getQueryParams().getFirst(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KeyResolver <span class="title">ipKeyResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 根据访问IP进行限流</span></span><br><span class="line">        <span class="keyword">return</span> exchange -&gt; Mono.just(exchange.getRequest().getRemoteAddress().getHostName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加Redis和RequestRateLimiter的配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">RequestRateLimiter</span></span><br><span class="line">  <span class="attr">args:</span></span><br><span class="line">    <span class="comment"># 每秒允许处理的请求数量</span></span><br><span class="line">    <span class="attr">redis-rate-limiter.replenishRate:</span> <span class="number">1</span></span><br><span class="line">    <span class="comment"># 每秒最大处理的请求数量</span></span><br><span class="line">    <span class="attr">redis-rate-limiter.burstCapacity:</span> <span class="number">2</span></span><br><span class="line">    <span class="comment"># 限流策略，对应策略的Bean</span></span><br><span class="line">    <span class="attr">key-resolver:</span> <span class="string">&quot;#&#123;@ipKeyResolver&#125;&quot;</span></span><br></pre></td></tr></table></figure>

<p>测试</p>
<p>启动服务，多次请求 <a href="http://localhost:9201/user/1">http://localhost:9201/user/1</a></p>
<img src="/images/2020/screencapture2020-04-25 AM10.35.06.jpg">

<p>报错429</p>
<h2 id="DEBUG：启动失败"><a href="#DEBUG：启动失败" class="headerlink" title="DEBUG：启动失败"></a>DEBUG：启动失败</h2><p>报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">***************************</span><br><span class="line">APPLICATION FAILED TO START</span><br><span class="line">***************************</span><br><span class="line"></span><br><span class="line">Description:</span><br><span class="line"></span><br><span class="line">Parameter 1 of method requestRateLimiterGatewayFilterFactory in org.springframework.cloud.gateway.config.GatewayAutoConfiguration required a single bean, but 2 were found:</span><br><span class="line">	- userKeyResolver: defined by method &#x27;userKeyResolver&#x27; in class path resource [com/coconutnut/apigateway/config/RedisRateLimiterConfig.class]</span><br><span class="line">	- ipKeyResolver: defined by method &#x27;ipKeyResolver&#x27; in class path resource [com/coconutnut/apigateway/config/RedisRateLimiterConfig.class]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Action:</span><br><span class="line"></span><br><span class="line">Consider marking one of the beans as @Primary, updating the consumer to accept multiple beans, or using @Qualifier to identify the bean that should be consumed</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Process finished with exit code 1</span><br></pre></td></tr></table></figure>

<p>根据提示加上@Primary，解决</p>
<h2 id="DEBUG：Redis连接失败"><a href="#DEBUG：Redis连接失败" class="headerlink" title="DEBUG：Redis连接失败"></a>DEBUG：Redis连接失败</h2><p>访问<a href="http://localhost:9201/user/1时数据正常，但控制台报错">http://localhost:9201/user/1时数据正常，但控制台报错</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">org.springframework.data.redis.RedisConnectionFailureException: Unable to connect to Redis; nested exception is io.lettuce.core.RedisConnectionException: Unable to connect to localhost:6379</span><br><span class="line">	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$SharedConnection.getNativeConnection(LettuceConnectionFactory.java:1199) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]</span><br><span class="line">	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$SharedConnection.getConnection(LettuceConnectionFactory.java:1178) ~[spring-data-redis-2.2.3.RELEASE.jar:2.2.3.RELEASE]</span><br><span class="line">	...</span><br></pre></td></tr></table></figure>

<p>下载安装</p>
<blockquote>
<p><a href="http://www.redis.cn/download.html">http://www.redis.cn/download.html</a></p>
</blockquote>
<p>启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-5.0.5 % src/redis-server</span><br></pre></td></tr></table></figure>

<img src="/images/2020/screencapture2020-04-25 AM10.37.45.jpg">

<p>好可爱🙀</p>
<h1 id="结合注册中心使用"><a href="#结合注册中心使用" class="headerlink" title="结合注册中心使用"></a>结合注册中心使用</h1><p>（弃）</p>
<p>教程给的是eureka，这里尝试改成consul</p>
<p>加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>改配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">application:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">api-gateway</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">service-name:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="comment">#开启从注册中心动态创建路由的功能</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">          <span class="comment">#使用小写服务名，默认是大写</span></span><br><span class="line">          <span class="attr">lower-case-service-id:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h2 id="DEBUG：启动失败-1"><a href="#DEBUG：启动失败-1" class="headerlink" title="DEBUG：启动失败"></a>DEBUG：启动失败</h2><p>报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#x27;webHandler&#x27; defined in class path resource [org/springframework/boot/autoconfigure/web/reactive/WebFluxAutoConfiguration$EnableWebFluxConfiguration.class]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#x27;webEndpointReactiveHandlerMapping&#x27; defined in class path resource [org/springframework/boot/actuate/autoconfigure/endpoint/web/reactive/WebFluxEndpointManagementContextConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping]: Factory method &#x27;webEndpointReactiveHandlerMapping&#x27; threw exception; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name &#x27;org.springframework.cloud.client.serviceregistry.ServiceRegistryAutoConfiguration$ServiceRegistryEndpointConfiguration&#x27;: Unsatisfied dependency expressed through field &#x27;registration&#x27;; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#x27;consulRegistration&#x27; defined in class path resource [org/springframework/cloud/consul/serviceregistry/ConsulAutoServiceRegistrationAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.cloud.consul.serviceregistry.ConsulAutoRegistration]: Factory method &#x27;consulRegistration&#x27; threw exception; nested exception is java.lang.IllegalArgumentException: Consul service ids must not be empty, must start with a letter, end with a letter or digit, and have as interior characters only letters, digits, and hyphen: 9201</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:603) ~[spring-beans-5.2.2.RELEASE.jar:5.2.2.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517) ~[spring-beans-5.2.2.RELEASE.jar:5.2.2.RELEASE]</span><br></pre></td></tr></table></figure>

<p>发现启动类忘加注释了，加上先</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br></pre></td></tr></table></figure>

<p>看下依赖，没有冲突</p>
<img src="/images/2020/screencapture2020-04-25 AM10.49.46.jpg">

<p>但是确实是加了consul的依赖之后才报错的</p>
<p>去掉它的依赖就可以正常启动</p>
<blockquote>
<p><a href="https://blog.csdn.net/jiazhiyuan0/article/details/84033595">https://blog.csdn.net/jiazhiyuan0/article/details/84033595</a></p>
<p><a href="https://blog.csdn.net/maduo_duo/article/details/84866137">https://blog.csdn.net/maduo_duo/article/details/84866137</a></p>
</blockquote>
<p>确实可能是有冲突</p>
<p>现在的Spring Boot版本是2.2.2.RELEASE，Spring Cloud版本是2.2.0.RELEASE</p>
<p><strong>尝试1</strong></p>
<p>把Spring Boot降到2.2.0</p>
<p>并不行</p>
<p><strong>尝试2</strong></p>
<blockquote>
<p><a href="https://github.com/spring-cloud/spring-cloud-gateway/issues/319">https://github.com/spring-cloud/spring-cloud-gateway/issues/319</a></p>
<p>Finchley is not compatible with boot 2.1.0. Either downgrade to boot 2.0.6 or use Greenwich.M3</p>
</blockquote>
<p>这里用的是Hoxton版本</p>
<p>找下文档</p>
<blockquote>
<p><a href="https://spring.io/blog/2019/11/28/spring-cloud-hoxton-released">https://spring.io/blog/2019/11/28/spring-cloud-hoxton-released</a></p>
</blockquote>
<p>Consul和Gateway的版本也是2.2.0.RELEASE</p>
<blockquote>
<p><a href="https://spring.io/projects/spring-cloud#overview">https://spring.io/projects/spring-cloud#overview</a></p>
</blockquote>
<p>Hoxton对应的Boot Version是2.2.x</p>
<p>应该没错</p>
<p>好几个地方看到说是spring-boot-starter-web的问题</p>
<img src="/images/2020/screencapture2020-04-25 AM11.49.26.jpg">

<p>搜一下，确实引用了</p>
<p>把它排除</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src="/images/2020/screencapture2020-04-25 AM11.55.17.jpg">

<p>并不行</p>
<p><strong>尝试3</strong></p>
<p>找找Spring Cloud Hoxton + Gatway + Consul的教程</p>
<blockquote>
<p><a href="https://piotrminkowski.com/2019/11/06/microservices-with-spring-boot-spring-cloud-gateway-and-consul-cluster/">https://piotrminkowski.com/2019/11/06/microservices-with-spring-boot-spring-cloud-gateway-and-consul-cluster/</a></p>
</blockquote>
<p>这个教程的依赖是</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>已有</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>把之前spring-boot-starter的依赖改成spring-boot-starter-web</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>还是没启动成功，但是报错变成了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2020-04-25 12:09:53.083 ERROR 4989 --- [           main] o.s.boot.SpringApplication               : Application run failed</span><br><span class="line"></span><br><span class="line">org.springframework.context.ApplicationContextException: Unable to start web server; nested exception is org.springframework.boot.web.server.WebServerException: Unable to start embedded Tomcat</span><br><span class="line">	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:156) ~[spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]</span><br><span class="line">	...</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://blog.csdn.net/fly_west/article/details/101229871?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1&amp;utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1">https://blog.csdn.net/fly_west/article/details/101229871?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1&amp;utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1</a></p>
</blockquote>
<p>还是spring-boot-starter-web冲突的问题</p>
<p>现在再把gateway里的webflux排除试试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2020-04-25 12:12:38.331 ERROR 5002 --- [           main] o.s.boot.SpringApplication               : Application run failed</span><br><span class="line"></span><br><span class="line">org.springframework.context.ApplicationContextException: Unable to start web server; nested exception is org.springframework.boot.web.server.WebServerException: Unable to start embedded Tomcat</span><br><span class="line">	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:156) ~[spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]</span><br><span class="line">	...</span><br></pre></td></tr></table></figure>

<p><strong>尝试4</strong></p>
<p>依赖全改得和刚那个教程一样试试</p>
<p>hystrix和redis相关的都注释掉</p>
<p>版本</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Hoxton.RC1<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>还是崩了</p>
<p>发现一个问题，依赖的最下面怎么还有个</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>估计是创建的时候导入的，删掉</p>
<p>重启</p>
<p>崩</p>
<p><strong>尝试5</strong></p>
<p>还是把版本改回Spring Boot 2.2.0和Spring Cloud Hoxton</p>
<p>现在的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--            &lt;exclusions&gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--                &lt;exclusion&gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--                    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--                    &lt;artifactId&gt;spring-cloud-starter-webflux&lt;/artifactId&gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--                &lt;/exclusion&gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--            &lt;/exclusions&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>现在的报错</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">2020-04-25 12:32:36.436 ERROR 5170 --- [           main] o.s.boot.SpringApplication               : Application run failed</span><br><span class="line"></span><br><span class="line">org.springframework.context.ApplicationContextException: Unable to start web server; nested exception is org.springframework.boot.web.server.WebServerException: Unable to start embedded Tomcat</span><br><span class="line">	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:156) ~[spring-boot-2.2.2.RELEASE.jar:2.2.2.RELEASE]</span><br><span class="line">	...</span><br></pre></td></tr></table></figure>

<p>刚才看依赖图发现gateway依赖的是webflux</p>
<p>这里依赖的是web</p>
<p>如果改成webflux？</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2020-04-25 12:33:57.502 ERROR 5182 --- [           main] o.s.boot.SpringApplication               : Application run failed</span><br><span class="line"></span><br><span class="line">org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#x27;webHandler&#x27; defined in class path resource [org/springframework/boot/autoconfigure/web/reactive/WebFluxAutoConfiguration$EnableWebFluxConfiguration.class]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#x27;webEndpointReactiveHandlerMapping&#x27; defined in class path resource [org/springframework/boot/actuate/autoconfigure/endpoint/web/reactive/WebFluxEndpointManagementContextConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping]: Factory method &#x27;webEndpointReactiveHandlerMapping&#x27; threw exception; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name &#x27;org.springframework.cloud.client.serviceregistry.ServiceRegistryAutoConfiguration$ServiceRegistryEndpointConfiguration&#x27;: Unsatisfied dependency expressed through field &#x27;registration&#x27;; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#x27;consulRegistration&#x27; defined in class path resource [org/springframework/cloud/consul/serviceregistry/ConsulAutoServiceRegistrationAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.cloud.consul.serviceregistry.ConsulAutoRegistration]: Factory method &#x27;consulRegistration&#x27; threw exception; nested exception is java.lang.IllegalArgumentException: Consul service ids must not be empty, must start with a letter, end with a letter or digit, and have as interior characters only letters, digits, and hyphen: 9201</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:603) ~[spring-beans-5.2.2.RELEASE.jar:5.2.2.RELEASE]</span><br><span class="line">	...</span><br></pre></td></tr></table></figure>

<p>所以应该是，启动需要web，否则报BeanCreationException</p>
<p>而gateway依赖了webflux，和web冲突，报ApplicationContextException</p>
<p>再把exclusion加上</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-webflux<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2020-04-25 12:35:30.492 ERROR 5188 --- [           main] o.s.boot.SpringApplication               : Application run failed</span><br><span class="line"></span><br><span class="line">org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#x27;webHandler&#x27; defined in class path resource [org/springframework/boot/autoconfigure/web/reactive/WebFluxAutoConfiguration$EnableWebFluxConfiguration.class]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#x27;webEndpointReactiveHandlerMapping&#x27; defined in class path resource [org/springframework/boot/actuate/autoconfigure/endpoint/web/reactive/WebFluxEndpointManagementContextConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping]: Factory method &#x27;webEndpointReactiveHandlerMapping&#x27; threw exception; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name &#x27;org.springframework.cloud.client.serviceregistry.ServiceRegistryAutoConfiguration$ServiceRegistryEndpointConfiguration&#x27;: Unsatisfied dependency expressed through field &#x27;registration&#x27;; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#x27;consulRegistration&#x27; defined in class path resource [org/springframework/cloud/consul/serviceregistry/ConsulAutoServiceRegistrationAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.cloud.consul.serviceregistry.ConsulAutoRegistration]: Factory method &#x27;consulRegistration&#x27; threw exception; nested exception is java.lang.IllegalArgumentException: Consul service ids must not be empty, must start with a letter, end with a letter or digit, and have as interior characters only letters, digits, and hyphen: 9201</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:603) ~[spring-beans-5.2.2.RELEASE.jar:5.2.2.RELEASE]</span><br><span class="line">	...</span><br></pre></td></tr></table></figure>

<p>把exclusion去掉，webflux删了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2020-04-25 12:37:30.419 ERROR 5199 --- [           main] o.s.boot.SpringApplication               : Application run failed</span><br><span class="line"></span><br><span class="line">org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#x27;webHandler&#x27; defined in class path resource [org/springframework/boot/autoconfigure/web/reactive/WebFluxAutoConfiguration$EnableWebFluxConfiguration.class]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#x27;webEndpointReactiveHandlerMapping&#x27; defined in class path resource [org/springframework/boot/actuate/autoconfigure/endpoint/web/reactive/WebFluxEndpointManagementContextConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.actuate.endpoint.web.reactive.WebFluxEndpointHandlerMapping]: Factory method &#x27;webEndpointReactiveHandlerMapping&#x27; threw exception; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name &#x27;org.springframework.cloud.client.serviceregistry.ServiceRegistryAutoConfiguration$ServiceRegistryEndpointConfiguration&#x27;: Unsatisfied dependency expressed through field &#x27;registration&#x27;; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#x27;consulRegistration&#x27; defined in class path resource [org/springframework/cloud/consul/serviceregistry/ConsulAutoServiceRegistrationAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.cloud.consul.serviceregistry.ConsulAutoRegistration]: Factory method &#x27;consulRegistration&#x27; threw exception; nested exception is java.lang.IllegalArgumentException: Consul service ids must not be empty, must start with a letter, end with a letter or digit, and have as interior characters only letters, digits, and hyphen: 9201</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:603) ~[spring-beans-5.2.2.RELEASE.jar:5.2.2.RELEASE]</span><br><span class="line">	...</span><br></pre></td></tr></table></figure>

<img src="/images/2020/a.gif" width=200>

<p><strong>尝试6</strong></p>
<blockquote>
<p><a href="https://github.com/spring-cloud/spring-cloud-gateway/issues/319">https://github.com/spring-cloud/spring-cloud-gateway/issues/319</a></p>
</blockquote>
<p>之前这个issue里面有人说</p>
<blockquote>
<p>spring cloud gateway is not compatible with spring mvc and servlet containers, what you get when you depend on <code>spring-boot-starter-web</code>.</p>
</blockquote>
<p>试试把spring-boot-starter-web里的spring mvc和servlet排除了？</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>不行</p>
<blockquote>
<p><a href="https://github.com/spring-cloud/spring-cloud-gateway/issues/1004">https://github.com/spring-cloud/spring-cloud-gateway/issues/1004</a></p>
<p><code>spring-cloud-gateway-mvc</code> is not compatible with gateway core. You need to use <code>spring-cloud-gateway-webflux</code>.</p>
</blockquote>
<blockquote>
<p><a href="https://github.com/spring-cloud/spring-cloud-gateway/issues/1473">https://github.com/spring-cloud/spring-cloud-gateway/issues/1473</a></p>
<p>Spring MVC found on classpath, which is incompatible with Spring Cloud Gateway at this time. Please remove spring-boot-starter-web dependency.</p>
</blockquote>
<p>现在就只有这几个依赖，为什么还是启动不了呢</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-cloud-starter-consul-discovery&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>难道actuator里面也有web？</p>
<p>把它注释掉</p>
<p>报错变成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2020-04-25 13:17:36.860 ERROR 5310 --- [           main] o.s.boot.SpringApplication               : Application run failed</span><br><span class="line"></span><br><span class="line">org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name &#x27;org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationAutoConfiguration&#x27;: Unsatisfied dependency expressed through field &#x27;autoServiceRegistration&#x27;; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name &#x27;consulAutoServiceRegistration&#x27; defined in class path resource [org/springframework/cloud/consul/serviceregistry/ConsulAutoServiceRegistrationAutoConfiguration.class]: Unsatisfied dependency expressed through method &#x27;consulAutoServiceRegistration&#x27; parameter 3; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#x27;consulRegistration&#x27; defined in class path resource [org/springframework/cloud/consul/serviceregistry/ConsulAutoServiceRegistrationAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.cloud.consul.serviceregistry.ConsulAutoRegistration]: Factory method &#x27;consulRegistration&#x27; threw exception; nested exception is java.lang.IllegalArgumentException: Consul service ids must not be empty, must start with a letter, end with a letter or digit, and have as interior characters only letters, digits, and hyphen: 9201</span><br><span class="line">	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:643) ~[spring-beans-5.2.2.RELEASE.jar:5.2.2.RELEASE]</span><br><span class="line">	...</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://github.com/spring-cloud/spring-cloud-gateway/issues/802">https://github.com/spring-cloud/spring-cloud-gateway/issues/802</a></p>
<p>Gateway is thought to be used as a separate technical component in your architecture. It usually does not make sense to add a gateway dependency directly to your business code.</p>
</blockquote>
<p>适合单独使用…</p>
<p>单独使用…</p>
<p>单独…</p>
<p>fine</p>
<p>暂时就不结合注册中心了</p>
<p>以后有需要再说</p>
<p>再见</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>springcloud</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud笔记07 总结</title>
    <url>/2020/04/25/note-springcloud-07/</url>
    <content><![CDATA[<img src="/images/2020/SpringCloud.png">

]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>mindmap</tag>
        <tag>springcloud</tag>
      </tags>
  </entry>
  <entry>
    <title>四月每日一题打卡完工纪念</title>
    <url>/2020/04/30/memo/</url>
    <content><![CDATA[<img src="/images/2020/screencapture2020-04-30 PM4.03.43.jpg" width=300>

<p>三月差一点点，四月成功咯~</p>
<img src="/images/2020/screencapture2020-04-30 PM4.04.55.jpg" width=300>

]]></content>
      <categories>
        <category>Memo</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>读书笔记 深度工作</title>
    <url>/2020/05/02/deepwork/</url>
    <content><![CDATA[<blockquote>
<p>《深度工作》 [美] 卡尔·纽波特</p>
</blockquote>
<img src="/images/2020/deepwork.png">]]></content>
      <categories>
        <category>Memo</category>
      </categories>
      <tags>
        <tag>mindmap</tag>
      </tags>
  </entry>
  <entry>
    <title>git笔记</title>
    <url>/2020/05/02/note-git/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://github.com/pcottle/learnGitBranching">https://github.com/pcottle/learnGitBranching</a></p>
</blockquote>
<img src="/images/2020/git.png">

]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>tool</tag>
        <tag>mindmap</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 10 闪退问题</title>
    <url>/2020/05/04/debug/</url>
    <content><![CDATA[<p>（未解决）</p>
<h1 id="bug描述"><a href="#bug描述" class="headerlink" title="bug描述"></a>bug描述</h1><p>打开工程可以安装，但是闪退</p>
<p>Build中报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">注: 某些输入文件使用或覆盖了已过时的 API。</span><br><span class="line">注: 有关详细信息, 请使用 -Xlint:deprecation 重新编译。</span><br></pre></td></tr></table></figure>

<h1 id="尝试解决"><a href="#尝试解决" class="headerlink" title="尝试解决"></a>尝试解决</h1><h2 id="尝试1"><a href="#尝试1" class="headerlink" title="尝试1"></a>尝试1</h2><blockquote>
<p><a href="https://blog.csdn.net/caidi1988314/article/details/52460922?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3">https://blog.csdn.net/caidi1988314/article/details/52460922?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3</a></p>
</blockquote>
<p>build.gradle android {}里加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">  gradle.projectsEvaluated &#123;</span><br><span class="line">    tasks.withType(JavaCompile) &#123;</span><br><span class="line">    	options.compilerArgs &lt;&lt; &quot;-Xlint:unchecked&quot; &lt;&lt; &quot;-Xlint:deprecation&quot;                       		&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 出现</p>
<img src="/images/2020/screencapture2020-05-04 PM9.09.01.jpg">

<p>在报错的函数上加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@SuppressWarnings(&quot;deprecation&quot;)</span><br></pre></td></tr></table></figure>

<p>Build成功，但还是闪退</p>
<h2 id="尝试2"><a href="#尝试2" class="headerlink" title="尝试2"></a>尝试2</h2><p>看到activity_main.xml里有</p>
<img src="/images/2020/screencapture2020-05-04 PM9.28.55.jpg">

<p>按提示修改</p>
<p>还是闪退</p>
<blockquote>
<p><a href="https://blog.csdn.net/yogima/article/details/89416885?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1">https://blog.csdn.net/yogima/article/details/89416885?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1</a></p>
</blockquote>
<p>把MainActivity所有函数都注释掉，可以打开</p>
<p>一点一点放开</p>
<p>发现问题在</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File path = <span class="keyword">new</span> File(dir);</span><br><span class="line">String[] list = path.list();</span><br><span class="line">len = list.length;</span><br><span class="line"><span class="keyword">if</span> (len == <span class="number">0</span>) &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br></pre></td></tr></table></figure>

<p>list空的时候，list.length会异常</p>
<p>加了个为空返回0</p>
<p>但是这个异常怎么不提示呢？？？</p>
<p>这里会为空应该读文件权限没有获取到</p>
<h2 id="尝试3"><a href="#尝试3" class="headerlink" title="尝试3"></a>尝试3</h2><p>像上次那样加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">android:requestLegacyExternalStorage=&quot;true&quot;</span><br></pre></td></tr></table></figure>

<p>报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AAPT: error: attribute android:requestLegacyExternalStorage not found.</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://blog.csdn.net/DeMonliuhui/article/details/99718553">https://blog.csdn.net/DeMonliuhui/article/details/99718553</a></p>
</blockquote>
<p>现在这个工程的版本是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">compileSdkVersion 28</span><br><span class="line">buildToolsVersion &#x27;28.0.3&#x27;</span><br><span class="line">defaultConfig &#123;</span><br><span class="line">  applicationId &quot;com.example.mydoppler&quot;</span><br><span class="line">  minSdkVersion 15</span><br><span class="line">  targetSdkVersion 28</span><br><span class="line">  versionCode 1</span><br><span class="line">  versionName &quot;1.0&quot;</span><br><span class="line">  testInstrumentationRunner &quot;androidx.test.runner.AndroidJUnitRunner&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>改成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">compileSdkVersion 29</span><br><span class="line">buildToolsVersion &quot;29.0.2&quot;</span><br><span class="line">defaultConfig &#123;</span><br><span class="line">  applicationId&quot;com.example.mydoppler&quot;</span><br><span class="line">  minSdkVersion 26</span><br><span class="line">  targetSdkVersion 29</span><br><span class="line">  versionCode 1</span><br><span class="line">  versionName &quot;1.0&quot;</span><br><span class="line">  testInstrumentationRunner &quot;androidx.test.runner.AndroidJUnitRunner&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>requestLegacyExternalStorage属性可以加了</p>
<p>输出那个获取的文件路径，还是null</p>
<h2 id="尝试4"><a href="#尝试4" class="headerlink" title="尝试4"></a>尝试4</h2><p>在Run里面又发现一句红的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E/libc: Access denied finding property &quot;ro.vendor.df.effect.conflict&quot;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Debug</category>
      </categories>
  </entry>
  <entry>
    <title>pyenv配置不生效</title>
    <url>/2020/05/07/debug/</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>以前装过pyenv，可以正常使用</p>
<p>今天用的时候发现配置的版本没有生效</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">coconutnut@Ss-MacBook-Pro ~ % pyenv versions</span><br><span class="line">* system (set by /Users/coconutnut/.pyenv/version)</span><br><span class="line">  3.7.4</span><br><span class="line">coconutnut@Ss-MacBook-Pro ~ % pyenv global 3.7.4</span><br><span class="line">coconutnut@Ss-MacBook-Pro ~ % python -V</span><br><span class="line">Python 2.7.17</span><br></pre></td></tr></table></figure>

<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><blockquote>
<p><a href="https://blog.csdn.net/vencent7/article/details/76849849">https://blog.csdn.net/vencent7/article/details/76849849</a></p>
</blockquote>
<p>也许是以前装Jupiter或者用Tensorflow的时候把环境搞坏了？</p>
<p>试试把pyenv的配置放在.bash_profile的最后</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># pyenv</span><br><span class="line">export PYENV_ROOT=&quot;$HOME/.pyenv&quot;</span><br><span class="line">export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;</span><br><span class="line">eval &quot;$(pyenv init -)&quot;</span><br><span class="line"># eval &quot;$(pyenv virtualenv-init -)&quot;</span><br></pre></td></tr></table></figure>

<p>再试试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">coconutnut@Ss-MacBook-Pro ~ % source ~/.bash_profile</span><br><span class="line">coconutnut@Ss-MacBook-Pro ~ % python -V            </span><br><span class="line">Python 3.7.4</span><br></pre></td></tr></table></figure>

<p>成功</p>
<p>PS：</p>
<p>安装pyenv的教程有的改.bash_profile有的改.bashrc</p>
<blockquote>
<p><a href="https://www.bbsmax.com/A/lk5aj7Eld1/">https://www.bbsmax.com/A/lk5aj7Eld1/</a></p>
<p>在安装成功之后需要在<code>.bashrc</code>或者<code>.bash_profile</code>中添加三行来开启自动补全</p>
</blockquote>
<p>应该都是可以的</p>
]]></content>
      <categories>
        <category>Debug</category>
      </categories>
  </entry>
  <entry>
    <title>记录服务器部署</title>
    <url>/2020/05/07/memo-server/</url>
    <content><![CDATA[<p>以前的服务器过期了，重新买了部署，希望这次少踩点坑</p>
<p>服务器环境：Ubuntu 16.04 64位</p>
<h1 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h1><ol>
<li><p>重置密码&amp;重启实例</p>
</li>
<li><p>添加安全组规则</p>
<blockquote>
<p><a href="https://help.aliyun.com/document_detail/151694.html?spm=a2c4g.11186623.6.582.56d15bbbDfXG8X">https://help.aliyun.com/document_detail/151694.html?spm=a2c4g.11186623.6.582.56d15bbbDfXG8X</a></p>
</blockquote>
<p>顺便把8000~9000都开了</p>
</li>
</ol>
<h1 id="终端访问"><a href="#终端访问" class="headerlink" title="终端访问"></a>终端访问</h1><ol>
<li><p>ssh连接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh root@&lt;实例公网IP地址&gt;</span><br></pre></td></tr></table></figure>

<p>✌️</p>
</li>
</ol>
<h1 id="安装jdk和Tomcat"><a href="#安装jdk和Tomcat" class="headerlink" title="安装jdk和Tomcat"></a>安装jdk和Tomcat</h1><ol>
<li><p>下载jdk-14.0.1_linux-x64_bin.tar.gz和apache-tomcat-9.0.34.tar.gz</p>
<blockquote>
<p><a href="https://www.oracle.com/java/technologies/javase-jdk14-downloads.html">https://www.oracle.com/java/technologies/javase-jdk14-downloads.html</a></p>
<p><a href="https://tomcat.apache.org/download-90.cgi">https://tomcat.apache.org/download-90.cgi</a></p>
</blockquote>
<p>（之前装的是jdk12，不知道这样会不会有毛病）</p>
</li>
<li><p>FileZilla连接服务器，上面两个包传到root文件夹下</p>
</li>
<li><p>回到终端，新建javaee文件夹，解压</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~# ls</span><br><span class="line">apache-tomcat-9.0.34.tar.gz jdk-14.0.1_linux-x64_bin.tar.gz</span><br><span class="line">~# mkdir javaee</span><br><span class="line">~# tar zxvf jdk-14.0.1_linux-x64_bin.tar.gz -C javaee</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置java环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~# vim /etc/profile</span><br></pre></td></tr></table></figure>

<p>最后加上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># set java environment</span><br><span class="line">export JAVA_HOME=/root/javaee/jdk-14.0.1</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~# source /etc/profile</span><br><span class="line">~# java -version</span><br><span class="line">java version &quot;14.0.1&quot; 2020-04-14</span><br><span class="line">Java(TM) SE Runtime Environment (build 14.0.1+7)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 14.0.1+7, mixed mode, sharing)</span><br></pre></td></tr></table></figure>

<p>✌️</p>
</li>
<li><p>安装tomcat</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~# tar zxvf apache-tomcat-9.0.34.tar.gz -C javaee</span><br></pre></td></tr></table></figure>

<p>配置catalina.sh</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~/javaee/apache-tomcat-9.0.34/bin# vim /catalina.sh</span><br></pre></td></tr></table></figure>

<p>加一句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/root/javaee/jdk-14.0.1</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~/javaee/apache-tomcat-9.0.34/bin# ./startup.sh </span><br><span class="line">Using CATALINA_BASE:   /root/javaee/apache-tomcat-9.0.34</span><br><span class="line">Using CATALINA_HOME:   /root/javaee/apache-tomcat-9.0.34</span><br><span class="line">Using CATALINA_TMPDIR: /root/javaee/apache-tomcat-9.0.34/temp</span><br><span class="line">Using JRE_HOME:        /root/javaee/jdk-14.0.1</span><br><span class="line">Using CLASSPATH:       /root/javaee/apache-tomcat-9.0.34/bin/bootstrap.jar:/root/javaee/apache-tomcat-9.0.34/bin/tomcat-juli.jar</span><br><span class="line">Tomcat started.</span><br></pre></td></tr></table></figure>

<img src="/images/2020/screencapture2020-05-07 PM12.21.05.jpg">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~/javaee/apache-tomcat-9.0.34/bin# ./shutdown.sh </span><br><span class="line">Using CATALINA_BASE:   /root/javaee/apache-tomcat-9.0.34</span><br><span class="line">Using CATALINA_HOME:   /root/javaee/apache-tomcat-9.0.34</span><br><span class="line">Using CATALINA_TMPDIR: /root/javaee/apache-tomcat-9.0.34/temp</span><br><span class="line">Using JRE_HOME:        /root/javaee/jdk-14.0.1</span><br><span class="line">Using CLASSPATH:       /root/javaee/apache-tomcat-9.0.34/bin/bootstrap.jar:/root/javaee/apache-tomcat-9.0.34/bin/tomcat-juli.jar</span><br><span class="line">NOTE: Picked up JDK_JAVA_OPTIONS:  --add-opens=java.base/java.lang=ALL-UNNAMED --add-opens=java.base/java.io=ALL-UNNAMED --add-opens=java.rmi/sun.rmi.transport=ALL-UNNAMED</span><br></pre></td></tr></table></figure>

<p>✌️</p>
</li>
</ol>
<hr>
<p>完工！</p>
<p>一遍过太快乐了</p>
]]></content>
      <categories>
        <category>Memo</category>
      </categories>
  </entry>
  <entry>
    <title>Anki也太优秀了吧！</title>
    <url>/2020/05/12/memo/</url>
    <content><![CDATA[<p>以前看剧的时候喜欢截屏，把不认识的词记录下来，零零散散屯了好多词</p>
<img src="/images/2020/screencapture2020-05-12 PM11.34.40.jpg">

<p>但是并不好复习，背单词的时候还是不认识</p>
<p>而Anki！加上Image Occlusion Enhanced插件！完美解决！</p>
<img src="/images/2020/screencapture2020-05-12 PM11.37.57.jpg">

<p>拖个框遮住单词就好了，再在header里面填上单词</p>
<p>以后的复习安排就不用自己管了~</p>
<img src="/images/2020/screencapture2020-05-12 PM11.38.57.jpg">

<p>一个问题是header里填的单词会在复习时显示</p>
<p>但是！</p>
<p>还能编辑卡片模板是什么神仙功能啊！注释掉header就行了嗷~</p>
<img src="/images/2020/screencapture2020-05-12 PM11.41.31.jpg">

<p>太美妙了快乐得原地转圈~</p>
<p>仿佛能看见日后蹭蹭增长的词汇量</p>
<p>我爱Anki😍😍😍</p>
<hr>
<p>发现现在真的是用了好多效率软件，简直是强迫症，为了找个满意的能从安卓应用商店到App Store到Google Play翻个遍，尤其是背单词和任务管理，扇贝不背百词斩、滴答ToDo水滴…最后剩下的都是现在最喜欢的，不知道以后还能不能发现更好的~</p>
<ul>
<li>日程管理：Apple自带的日历📅</li>
<li>任务管理：Trello</li>
<li>背单词：墨墨</li>
<li>背诗：年轮（估计要转移到Anki了哈哈）</li>
<li>习惯打卡：Dot Habit（还没用到一个月，待定）</li>
</ul>
]]></content>
      <categories>
        <category>Memo</category>
      </categories>
  </entry>
  <entry>
    <title>五月每日一题打卡完工纪念</title>
    <url>/2020/05/31/memo/</url>
    <content><![CDATA[<img src="/images/2020/screencapture2020-05-31 AM10.18.55.jpg" width=300>

<p>居然出徽章了，太戳我了</p>
<img src="/images/2020/screencapture2020-05-31 AM10.19.04.jpg" width=300>]]></content>
      <categories>
        <category>Memo</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>项目Debug记录</title>
    <url>/2020/06/16/debug/</url>
    <content><![CDATA[<h1 id="找不到’xmlModelPlugin’"><a href="#找不到’xmlModelPlugin’" class="headerlink" title="找不到’xmlModelPlugin’"></a>找不到’xmlModelPlugin’</h1><p>05.30</p>
<p>clone的工程启动失败，控制台报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Error starting ApplicationContext. To display the conditions report re-run your application with &#x27;debug&#x27; enabled.</span><br><span class="line">2020-05-30 10:57:39.476 ERROR 1335 --- [           main] o.s.boot.SpringApplication               : Application run failed</span><br><span class="line"></span><br><span class="line">org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#x27;xmlModelPlugin&#x27;: Lookup method resolution failed; nested exception is java.lang.IllegalStateException: Failed to introspect Class [springfox.documentation.schema.XmlModelPlugin] from ClassLoader [jdk.internal.loader.ClassLoaders$AppClassLoader@3d4eac69]</span><br><span class="line">	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.determineCandidateConstructors(AutowiredAnnotationBeanPostProcessor.java:289) ~[spring-beans-5.2.5.RELEASE.jar:5.2.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.determineConstructorsFromBeanPostProcessors(AbstractAutowireCapableBeanFactory.java:1286) ~[spring-beans-5.2.5.RELEASE.jar:5.2.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1201) ~[spring-beans-5.2.5.RELEASE.jar:5.2.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557) ~[spring-beans-5.2.5.RELEASE.jar:5.2.5.RELEASE]</span><br><span class="line">	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517) ~[spring-beans-5.2.5.RELEASE.jar:5.2.5.RELEASE]</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>解决</p>
<p>添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.xml.bind<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="加载yml文件错误"><a href="#加载yml文件错误" class="headerlink" title="加载yml文件错误"></a>加载yml文件错误</h1><p>06.12</p>
<p>今天新pull的工程打不开</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.lang.IllegalStateException: Failed to load property source from location &#x27;classpath:/bootstrap.yml&#x27;</span><br></pre></td></tr></table></figure>

<p>查看target -&gt; classes -&gt; bootstrap.yml</p>
<p>发现一个main被画了波浪线，说重复定义</p>
<p>发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">main:</span><br><span class="line">  allow-bean-definition-overriding: true</span><br></pre></td></tr></table></figure>

<p>写了2次</p>
<p>注释掉一个就好了</p>
<h1 id="找不到’springSecurityFilterChain’"><a href="#找不到’springSecurityFilterChain’" class="headerlink" title="找不到’springSecurityFilterChain’"></a>找不到’springSecurityFilterChain’</h1><p>06.16</p>
<p>新pull的又打不开了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#x27;springSecurityFilterChain&#x27;</span><br></pre></td></tr></table></figure>

<p>根据这里的一个回答</p>
<blockquote>
<p><a href="https://github.com/spring-guides/tut-spring-boot-oauth2/issues/68">https://github.com/spring-guides/tut-spring-boot-oauth2/issues/68</a></p>
</blockquote>
<p>加上了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.glassfish.jaxb&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;jaxb-runtime&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.3.0&lt;/version&gt; &lt;/dependency&gt;</span><br><span class="line">  &lt;!-- JAXB needs javax.activation module (jdk9) --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;javax.activation&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;javax.activation-api&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.2.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>成功启动</p>
]]></content>
      <categories>
        <category>Debug</category>
      </categories>
  </entry>
  <entry>
    <title>笔记 推荐系统</title>
    <url>/2020/06/23/recommendation/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.bilibili.com/video/av30578499/">https://www.bilibili.com/video/av30578499/</a></p>
</blockquote>
<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><img src="/images/2020/screencapture2020-06-23 AM9.48.46.jpg">

<h1 id="传统推荐系统"><a href="#传统推荐系统" class="headerlink" title="传统推荐系统"></a>传统推荐系统</h1><p>Content-based：unstructured，文字、图像等，需理解语义、提取大量特征，算法复杂延迟高</p>
<p>Collaborative filtering协同过滤：基于User、Item历史，如点击是1、不点击是0</p>
<p>Demographic：地域信息</p>
<p>Knowledge-based：根据专业知识</p>
<p>Community-based：类似Content-based，如社交网络、人群兴趣</p>
<p>Hybrid：综合</p>
<h2 id="协同过滤"><a href="#协同过滤" class="headerlink" title="协同过滤"></a>协同过滤</h2><img src="/images/2020/screencapture2020-06-23 AM9.52.31.jpg">

<p>基于相似User判断</p>
<p>计算相似性 </p>
<ul>
<li>Memery-based<ul>
<li>Item-based 如，把Item转成矩阵计算相似性</li>
<li>User-based</li>
</ul>
</li>
<li>Model-based 建立User和Item的方程，给定一个User和Item返回一个分数</li>
</ul>
<img src="/images/2020/screencapture2020-06-23 AM9.55.53.jpg">

<p>思想：根据User-Item Rating矩阵，学到User和Item低维的特征表示，用它计算相似性</p>
<p>购买为1，点击未购买为0，剩下补0</p>
<p>矩阵分解：降维 找一个矩阵代表User，一个代表Item，相乘得到</p>
<p>可做Regularization</p>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li>Easy to implement，系统简单，响应快</li>
<li>Content-independent，与用户其它特征无关，不需要获取这些信息即可实现</li>
</ul>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li>数据稀疏</li>
<li>Cold-start problem 如新用户特征向量全0，无法计算</li>
<li>Do not consider content</li>
</ul>
<h1 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h1><p>优势：表征能力强、不需要做特征工程、</p>
<p>先创建深度学习的网络结构实现协同过滤，再加入Content-based</p>
<h2 id="Neural-Collaborative-filtering"><a href="#Neural-Collaborative-filtering" class="headerlink" title="Neural Collaborative filtering"></a>Neural Collaborative filtering</h2><img src="/images/2020/screencapture2020-06-23 AM11.29.37.jpg">

<ul>
<li><p>Embedding Layers</p>
<ul>
<li>把任何一个User、Item变成一个低维向量</li>
<li>One-Hot Encoding</li>
</ul>
</li>
<li><p>Neural CF Layers</p>
<ul>
<li>做矩阵分解</li>
<li>可以加隐藏层，学习非线性表征</li>
</ul>
</li>
</ul>
<h2 id="Neural-Matrix-Factorization-Model"><a href="#Neural-Matrix-Factorization-Model" class="headerlink" title="Neural Matrix Factorization Model"></a>Neural Matrix Factorization Model</h2><img src="/images/2020/screencapture2020-06-23 AM11.36.27.jpg">

<p>线性的和非线性的结合到一起</p>
<p>问题：没有Content-based，希望加入手工提取的特征</p>
<h2 id="Wide-Deep-Neural-Network"><a href="#Wide-Deep-Neural-Network" class="headerlink" title="Wide Deep Neural Network"></a>Wide Deep Neural Network</h2><p>Wide部分输入手工特征工程的结果，如：年龄、历史记录</p>
<p>Deep部分是User、Item</p>
<p>最后结合到一起做出预测</p>
<p>Eg: Google Play</p>
<img src="/images/2020/screencapture2020-06-23 AM11.41.51.jpg">

<h2 id="传统的-Factorization-Machines"><a href="#传统的-Factorization-Machines" class="headerlink" title="传统的 Factorization Machines"></a>传统的 Factorization Machines</h2><p>直接对产品的类型信息做One-Hot Encoding</p>
<img src="/images/2020/screencapture2020-06-23 AM11.48.13.jpg">

<p>特征交叉 如性别=男，年龄=20 把对应的维相乘，数据过大是难处理</p>
<p>用矩阵分解的思想，wij变成&lt;vi,vj&gt;，其中vi,vj都是低维向量</p>
<p>变形版本：</p>
<h3 id="Field-aware-Factorization-Machines"><a href="#Field-aware-Factorization-Machines" class="headerlink" title="Field-aware Factorization Machines"></a>Field-aware Factorization Machines</h3><img src="/images/2020/screencapture2020-06-23 AM11.53.47.jpg">

<p>考虑特征是来自哪里的</p>
<p>每一个特征，与其他类别交叉时，有一个不一样的依赖向量</p>
<h2 id="Deep-Factorization-Machines"><a href="#Deep-Factorization-Machines" class="headerlink" title="Deep Factorization Machines"></a>Deep Factorization Machines</h2><img src="/images/2020/screencapture2020-06-23 AM11.56.26.jpg">

<p>左侧：传统部分</p>
<p>每个种类做Embedding</p>
<p>为了实现交叉，两两做特征交叉</p>
<p>线性部分，求和（最左的+）</p>
<p>右侧：深度部分</p>
<p>美团的测试结果：</p>
<img src="/images/2020/screencapture2020-06-23 AM11.58.58.jpg">

<p>Wide &amp; Deep 要做特征工程，DeepFM 做了一阶、二阶的特征交叉，同时用Deep神经网络做特征工程</p>
<h2 id="Deep-Cooperative-Neural-Network"><a href="#Deep-Cooperative-Neural-Network" class="headerlink" title="Deep Cooperative Neural Network"></a>Deep Cooperative Neural Network</h2><p>卷积神经网络</p>
<p>涉及图片、文字时可参考</p>
<img src="/images/2020/screencapture2020-06-23 PM12.09.24.jpg">

<p>Word-Embedding 把每个单词映射成向量（Google : word2vec）</p>
<p>最后得到User记录的低维表示，Item描述的低维表示</p>
<h2 id="Recurrent-Neural-Network"><a href="#Recurrent-Neural-Network" class="headerlink" title="Recurrent Neural Network"></a>Recurrent Neural Network</h2><img src="/images/2020/screencapture2020-06-23 PM1.22.14.jpg">

<p>给一个input，映射成低维向量，输出output</p>
<p>同时反复自己迭代</p>
<p>可学习与时间有关的信息，如不需要login的网站上用户点击的行为</p>
<h3 id="Session-based-Recommendation-with-RNN"><a href="#Session-based-Recommendation-with-RNN" class="headerlink" title="Session-based Recommendation with RNN"></a>Session-based Recommendation with RNN</h3><img src="/images/2020/screencapture2020-06-23 PM1.25.03.jpg">

<p>预测用户下一步行为</p>
<h1 id="强化学习"><a href="#强化学习" class="headerlink" title="强化学习"></a>强化学习</h1><p>因为用户行为随时在变化，传统推荐系统无法实时做出调整</p>
<img src="/images/2020/screencapture2020-06-23 PM1.27.37.jpg">

<p>State可以是用户的点击行为</p>
<p>Reward可以是点击了推荐的产品</p>
<p>根据当前的State和Reward返回下一步Action</p>
<p>用户对Action做出反应，得到新的State和Reward</p>
<p>阿里的例子：</p>
<img src="/images/2020/screencapture2020-06-23 PM1.30.26.jpg">

]]></content>
      <categories>
        <category>Note</category>
      </categories>
  </entry>
  <entry>
    <title>记录服务器安装Anaconda</title>
    <url>/2020/06/24/memo-python/</url>
    <content><![CDATA[<p>pyenv每次都要source ~/.bash_profile才能生效，扎心，卸了</p>
<p>现在笔记本上应该只有系统自带的2.7（和没卸干净的遗留文件）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">coconutnut@Ss-MacBook-Pro ~ % python -V</span><br><span class="line">Python 2.7.17</span><br><span class="line">coconutnut@Ss-MacBook-Pro ~ % pip -V</span><br><span class="line">pip 19.3.1 from /usr/local/lib/python2.7/site-packages/pip (python 2.7)</span><br></pre></td></tr></table></figure>

<p>想了下干脆装服务器上好了</p>
<hr>
<h1 id="安装Anaconda"><a href="#安装Anaconda" class="headerlink" title="安装Anaconda"></a>安装Anaconda</h1><blockquote>
<p><a href="https://blog.csdn.net/qq_41813258/article/details/102400325">https://blog.csdn.net/qq_41813258/article/details/102400325</a></p>
</blockquote>
<blockquote>
<p><a href="https://repo.anaconda.com/archive/">https://repo.anaconda.com/archive/</a></p>
</blockquote>
<p>官网下了个最新版anaconda3-2020.02-linux-x86_64.sh/</p>
<p>bash安装，配置环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># conda -V</span><br><span class="line">conda 4.8.2</span><br></pre></td></tr></table></figure>

<p>完成</p>
<p>创建一个3.7.6的环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># conda create -n env3.7 python=3.7.6</span><br><span class="line">...</span><br><span class="line">#</span><br><span class="line"># To activate this environment, use</span><br><span class="line">#</span><br><span class="line">#     $ conda activate env3.7</span><br><span class="line">#</span><br><span class="line"># To deactivate an active environment, use</span><br><span class="line">#</span><br><span class="line">#     $ conda deactivate</span><br></pre></td></tr></table></figure>

<h1 id="配置Jupyter-notebook"><a href="#配置Jupyter-notebook" class="headerlink" title="配置Jupyter notebook"></a>配置Jupyter notebook</h1><blockquote>
<p><a href="https://blog.csdn.net/qq_43058685/article/details/103804238">https://blog.csdn.net/qq_43058685/article/details/103804238</a></p>
</blockquote>
<p>端口配的2020</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jupyter notebook --ip=0.0.0.0 --no-browser --allow-root</span><br></pre></td></tr></table></figure>

<p>浏览器试了一下，ok</p>
<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 打开jupyter notebook</span><br><span class="line">jupyter notebook --allow-root</span><br><span class="line"></span><br><span class="line"># 后台运行</span><br><span class="line">nohup jupyter notebook --allow-root &amp;</span><br><span class="line"></span><br><span class="line"># 找到jupyter进程</span><br><span class="line">ps aux | grep jupyter</span><br><span class="line"></span><br><span class="line"># 关闭它</span><br><span class="line">kill XXX(pid)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Memo</category>
      </categories>
  </entry>
  <entry>
    <title>读书笔记 推荐系统实践</title>
    <url>/2020/06/24/recommender-system/</url>
    <content><![CDATA[<img src="/images/2020/recommendation_system.png">

]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>mindmap</tag>
      </tags>
  </entry>
  <entry>
    <title>读书笔记 大脑修复术</title>
    <url>/2020/07/25/brain/</url>
    <content><![CDATA[<img src="/images/2020/brain1.png">

<img src="/images/2020/brain2.png">

<img src="/images/2020/brain3.png">

<img src="/images/2020/brain4.png">]]></content>
      <categories>
        <category>Memo</category>
      </categories>
      <tags>
        <tag>mindmap</tag>
      </tags>
  </entry>
  <entry>
    <title>记录部署静态页面</title>
    <url>/2020/08/10/webpage/</url>
    <content><![CDATA[<p>把index.html和assets准备好</p>
<p>ssh连上服务器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install apache2</span><br></pre></td></tr></table></figure>

<p>把文件传到/var/www/html</p>
<p>（一开始传成了/root/var/www/html，index.html一直显示不对）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/apache2/apache2.conf</span><br></pre></td></tr></table></figure>

<p>最后加一句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ServerName ***.**.**.89</span><br></pre></td></tr></table></figure>

<p>然后</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/apache2/mods-available/dir.conf</span><br></pre></td></tr></table></figure>

<p>改成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;IfModule mod_dir.c&gt;</span><br><span class="line">DirectoryIndex  index.html</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure>

<p>重启</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apache2ctl -k restart</span><br></pre></td></tr></table></figure>

<p>浏览器访问</p>
<p><a href="http://xxx/index.html">http://xxx/index.html</a></p>
<p>ok</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
  </entry>
  <entry>
    <title>安装splinter记录</title>
    <url>/2020/09/09/note-splinter/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install splinter</span><br></pre></td></tr></table></figure>

<p>坑</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew cask install chromedriver</span><br></pre></td></tr></table></figure>

<p>特别慢，装完一跑发现版本是81</p>
<p>但是chrome://version查看是85，用不了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew cask uninstall chromedriver</span><br></pre></td></tr></table></figure>

<p>卸了</p>
<p>直接在<a href="https://sites.google.com/a/chromium.org/chromedriver/downloads">https://sites.google.com/a/chromium.org/chromedriver/downloads</a> 下载了对应版本，拖到/usr/local/bin/ 里</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">% chromedriver -v</span><br><span class="line">ChromeDriver 85.0.4183.87 (cd6713ebf92fa1cacc0f1a598df280093af0c5d7-refs/branch-heads/4183@&#123;#1689&#125;)</span><br></pre></td></tr></table></figure>

<p>成功</p>
]]></content>
      <categories>
        <category>Debug</category>
      </categories>
  </entry>
  <entry>
    <title>AR Foundation笔记01 安卓Setup</title>
    <url>/2020/09/26/note-arfoundation-01/</url>
    <content><![CDATA[<blockquote>
<p> <a href="https://www.youtube.com/watch?v=0mpsiO2lCx0&amp;list=PL6VJLOFcTt7awvyIGIbLLPOBrW6-Y1R-J&amp;index=1&amp;ab_channel=DineshPunni">https://www.youtube.com/watch?v=0mpsiO2lCx0&amp;list=PL6VJLOFcTt7awvyIGIbLLPOBrW6-Y1R-J&amp;index=1&amp;ab_channel=DineshPunni</a></p>
</blockquote>
<hr>
<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>macOS Catalina 10.15.6</p>
<p>Unity Hub 2.3.10</p>
<p>Unity 2020.1.6f1c1</p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>File -&gt; Build Settings</p>
<p>切换平台到Android</p>
<p>-&gt; Player Settings</p>
<ol>
<li><p>Other Settings -&gt; 改Package Name</p>
</li>
<li><p>Disable Multithread Rendering (Android doesn’t support yet)</p>
</li>
<li><p>Graphics APIs -&gt; disable Vulkan</p>
</li>
<li><p>Minimun API level -&gt; 26</p>
</li>
</ol>
<h1 id="Package"><a href="#Package" class="headerlink" title="Package"></a>Package</h1><p>Window -&gt; Package Manager -&gt; Packages : Unity Registry</p>
<img src="/images/2020/screencapture2020-09-26 PM5.51.57.jpg" width=400>

<h1 id="Sample-Scene"><a href="#Sample-Scene" class="headerlink" title="Sample Scene"></a>Sample Scene</h1><ol>
<li><p>删除Main Camera</p>
</li>
<li><p>Right Click -&gt; XR -&gt; AR Session Origin</p>
<p>AR Camera 标签 MainCamera</p>
</li>
<li><p>Right Click -&gt; XR -&gt; AR Session</p>
</li>
<li><p>Right Click -&gt; 3D Object -&gt; Cube<br>位置改成0，0，0<br>缩放改成0.2，0.2，0.2<br>随便转转</p>
</li>
</ol>
<h1 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h1><p>手机 -&gt; 开发者模式</p>
<p>连上</p>
<p>File -&gt; Build Settings -&gt; Run Device -&gt; 选中手机</p>
<p> Add Open Scene</p>
<p>Build and Run</p>
<img src="/images/2020/Screenshot_2020-09-26-18-10-31-833_com.coconutnut.jpg" width=400>

<p>成功<del>~</del></p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>ar</tag>
      </tags>
  </entry>
  <entry>
    <title>AR Foundation笔记02 Image Tracking</title>
    <url>/2020/09/26/note-arfoundation-02/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.youtube.com/watch?v=o_z_Eb8Yh2g&amp;list=PL6VJLOFcTt7awvyIGIbLLPOBrW6-Y1R-J&amp;index=3&amp;ab_channel=DineshPunni">https://www.youtube.com/watch?v=o_z_Eb8Yh2g&amp;list=PL6VJLOFcTt7awvyIGIbLLPOBrW6-Y1R-J&amp;index=3&amp;ab_channel=DineshPunni</a></p>
</blockquote>
<hr>
<p>AR Session Origin -&gt; Add AR Tracked Image Manager</p>
<p>Assets -&gt; Create -&gt; XR -&gt; Reference Image Library</p>
<p>拖一张图到Assets里</p>
<p>Reference Library -&gt; Add Image 把图拖进去，填Physical Size</p>
<img src="/images/2020/screencapture2020-09-26 PM6.30.20.jpg">

<p>AR Session Origin -&gt; 把Reference Library拖到AR Tracked Image Manager中</p>
<p>Assets -&gt; Create -&gt; C# Script -&gt; 重命名ImageRecognitionExample</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using UnityEngine.XR.ARFoundation;</span><br><span class="line"></span><br><span class="line">public class NewBehaviourScript : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    private ARTrackedImageManager _arTrackedImageManager;</span><br><span class="line">    </span><br><span class="line">    private void Awake()</span><br><span class="line">    &#123;</span><br><span class="line">        _arTrackedImageManager = FindObjectOfType&lt;ARTrackedImageManager&gt;();    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void OnEnable()</span><br><span class="line">    &#123;</span><br><span class="line">        _arTrackedImageManager.trackedImagesChanged += OnImageChanged;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void onDisable()</span><br><span class="line">    &#123;</span><br><span class="line">        _arTrackedImageManager.trackedImagesChanged -= OnImageChanged;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void OnImageChanged(ARTrackedImagesChangedEventArgs args)</span><br><span class="line">    &#123;</span><br><span class="line">        foreach (var trackedImage in args.added)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(trackedImage.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Create 3D Object Cube，调整位置、大小</p>
<img src="/images/2020/screencapture2020-09-26 PM6.44.08.jpg">

<p>拖进Assets（变成prefab），在SampleScene中删除</p>
<p>把prefab拖进AR Tracked Image Manager</p>
<p>Build</p>
<img src="/images/2020/Screenshot_2020-09-26-18-48-02-522_com.coconutnut.jpg" width=400>

<p>成功~</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>ar</tag>
      </tags>
  </entry>
  <entry>
    <title>AR Foundation笔记03 Plane Detection</title>
    <url>/2020/09/28/note-arfoundation-03/</url>
    <content><![CDATA[<blockquote>
<p> <a href="https://www.youtube.com/watch?v=uWWiYfPTUtU&amp;list=PL6VJLOFcTt7awvyIGIbLLPOBrW6-Y1R-J&amp;index=4&amp;ab_channel=DineshPunni">https://www.youtube.com/watch?v=uWWiYfPTUtU&amp;list=PL6VJLOFcTt7awvyIGIbLLPOBrW6-Y1R-J&amp;index=4&amp;ab_channel=DineshPunni</a></p>
</blockquote>
<hr>
<ol>
<li>add AR Plane Manager</li>
</ol>
<p>AR Session Origin-&gt; add component -&gt; AR Plane Manager</p>
<ol start="2">
<li>Build your own plane object (or use prebuilt prefab)</li>
</ol>
<p>Create Empty Object</p>
<p>Add Components</p>
<img src="/images/2020/screencapture2020-09-28 PM8.44.02.jpg" width=400>

<p>Line Renderer</p>
<img src="/images/2020/screencapture2020-09-28 PM8.46.59.jpg" width=400>

<ol start="3">
<li>Add material to Mesh Renderer</li>
</ol>
<p>Create a folder in Assets</p>
<p>Create Material</p>
<img src="/images/2020/screencapture2020-09-28 PM8.49.54.jpg">

<p>Assign to Mesh Renderer</p>
<ol start="4">
<li>Create prefab of this plane</li>
</ol>
<p>Create a folder (Prefabs)</p>
<p>Drag ARPlane to folder</p>
<p>Assign to AR Plane Manager</p>
<img src="/images/2020/screencapture2020-09-28 PM8.52.28.jpg">

<ol start="5">
<li>Build</li>
</ol>
<img src="/images/2020/Screenshot_2020-09-28-20-59-24-106_com.coconutnut.jpg" width=400>

<p>🧐很是迷惑</p>
<img src="/images/2020/Screenshot_2020-09-28-21-03-08-471_com.coconutnut.jpg" width=400>

<p>改了一下顺眼多了</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>ar</tag>
      </tags>
  </entry>
  <entry>
    <title>AR Foundation笔记04 Tap to Place Objects in AR</title>
    <url>/2020/09/28/note-arfoundation-04/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.youtube.com/watch?v=xguiSueY1Lw&amp;list=PL6VJLOFcTt7awvyIGIbLLPOBrW6-Y1R-J&amp;index=5&amp;ab_channel=DineshPunni">https://www.youtube.com/watch?v=xguiSueY1Lw&amp;list=PL6VJLOFcTt7awvyIGIbLLPOBrW6-Y1R-J&amp;index=5&amp;ab_channel=DineshPunni</a></p>
</blockquote>
<hr>
<p>(接笔记03)</p>
<p>Create New Folder (Scripts)</p>
<p>Create C# Script</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using UnityEngine.XR.ARFoundation;</span><br><span class="line">using UnityEngine.XR.ARSubsystems;</span><br><span class="line"></span><br><span class="line">[RequireComponent(typeof(ARRaycastManager))]</span><br><span class="line">public class ARTapToPlaceObject : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public GameObject gameObjectToInstantiate;</span><br><span class="line">    </span><br><span class="line">    private GameObject spawnedObject;</span><br><span class="line">    private ARRaycastManager arRaycastManager;</span><br><span class="line">    private Vector2 touchPosition;</span><br><span class="line">    </span><br><span class="line">    static List&lt;ARRaycastHit&gt; hits = new List&lt;ARRaycastHit&gt;();</span><br><span class="line">    </span><br><span class="line">    private void Awake()</span><br><span class="line">    &#123;</span><br><span class="line">        arRaycastManager = GetComponent&lt;ARRaycastManager&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    bool TryGetTouchPosition(out Vector2 touchPosition)</span><br><span class="line">    &#123;</span><br><span class="line">        if(Input.touchCount &gt; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            touchPosition = Input.GetTouch(0).position;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        touchPosition = default;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        if(!TryGetTouchPosition(out Vector2 touchPosition))</span><br><span class="line">        &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        if(arRaycastManager.Raycast(touchPosition,hits,TrackableType.PlaneWithinPolygon))</span><br><span class="line">        &#123;</span><br><span class="line">            var hitPose = hits[0].pose;</span><br><span class="line">            </span><br><span class="line">            if(spawnedObject == null)</span><br><span class="line">            &#123;</span><br><span class="line">                spawnedObject = Instantiate(gameObjectToInstantiate, hitPose.position, hitPose.rotation);</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                spawnedObject.transform.position = hitPose.position;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>把Script拖进AR Session Origin</p>
<p>Create Cube拖进Prefabs，拖进GameObjectToInstantiate</p>
<img src="/images/2020/screencapture2020-09-28 PM9.20.08.jpg">

<p>Build</p>
<img src="/images/2020/Screenshot_2020-09-28-21-25-16-503_com.coconutnut.jpg" width=400>

<p>Yeah~</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>ar</tag>
      </tags>
  </entry>
  <entry>
    <title>AR Foundation笔记05 Gaze Interaction</title>
    <url>/2020/09/28/note-arfoundation-05/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.youtube.com/watch?v=OE66gtiF8QQ&amp;ab_channel=ThirdAurora">https://www.youtube.com/watch?v=OE66gtiF8QQ&amp;ab_channel=ThirdAurora</a></p>
</blockquote>
<hr>
<h1 id="First-Try-Failed"><a href="#First-Try-Failed" class="headerlink" title="First Try (Failed)"></a>First Try (Failed)</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>start from : <a href="https://github.com/Third-Aurora/ARFoundationExample">https://github.com/Third-Aurora/ARFoundationExample</a> </p>
<p>新建一个Project03，把Assets拷进去</p>
<p>资源管理器里+ARFoundation &amp; AR Core</p>
<p>切换平台到Android，一系列设置同笔记01</p>
<h2 id="Content-Parent"><a href="#Content-Parent" class="headerlink" title="Content Parent"></a>Content Parent</h2><p>已导入资源：</p>
<img src="/images/2020/screencapture2020-09-28 PM9.39.17.jpg" width=300>

<p>Content Parent -&gt; Cube xyz都改成0.5</p>
<p>创建空对象叫SectionInfo</p>
<p>创建3D Object Quad叫InfoParent</p>
<p>把SectionInfo拖高一点 Y-&gt;1.5</p>
<p>旋转InfoParent Y-&gt;180 缩放 X-&gt;2</p>
<h2 id="Materials"><a href="#Materials" class="headerlink" title="Materials"></a>Materials</h2><p>Assets中新建文件夹Materials</p>
<p>创建材质trans，拖到InfoParent上</p>
<p>颜色：Black 0.7Opacity</p>
<p>Rendering Mode：Transparent</p>
<p>另外创建一个blue材质，拖到cube上</p>
<h2 id="InfoParent"><a href="#InfoParent" class="headerlink" title="InfoParent"></a>InfoParent</h2><p>InfoParent下创建Cube，调整一下位置</p>
<img src="/images/2020/screencapture2020-09-28 PM9.50.14.jpg">

<p>也用trans材质</p>
<p>创建Text - TextMeshPro，import TMP essentials</p>
<p>调整大小，文字居中，Auto Size（min 0，max 1000）</p>
<img src="/images/2020/screencapture2020-09-28 PM10.11.12.jpg">

<p>InfoParent拖成和SectionInfo同级</p>
<p>拖动SectionInfo的锚点高度和Cube上方对齐</p>
<p>再把InfoParent拖进去</p>
<p>此时调整SetcionInfo Scale的y，牌子像从Box里出来</p>
<p>(Text -&gt; Extra Setting -&gt; Order in Layer改成1 )</p>
<h2 id="Script"><a href="#Script" class="headerlink" title="Script"></a>Script</h2><ol>
<li>让SectionInfo出现</li>
</ol>
<p>新建Script叫InfoBehavior，拖到Cube上</p>
<p>并把SetionInfo拖到变量上</p>
<img src="/images/2020/screencapture2020-09-28 PM10.42.07.jpg">

<ol start="2">
<li>SectionInfo旋转对准摄像头</li>
</ol>
<p>新建script叫FaceCamera</p>
<p>AR Camera标签为MainCamera</p>
<p>script拖到SectionInfo上</p>
<p>此时拖动camera，牌子就会跟着动了（不行就删了script然后重新拖进去）</p>
<img src="/images/2020/screencapture2020-09-28 PM11.18.36.jpg" width=400>

<ol start="3">
<li>Gaze</li>
</ol>
<p>Cube加标签hasInfo</p>
<img src="/images/2020/screencapture2020-09-28 PM11.26.14.jpg" width=400>

<p>新建script叫Gaze，拖到MainCamera上</p>
<hr>
<p>测试并没有预期效果？</p>
<p>而且之前导入的一堆Assets并没有用到？</p>
<p>重新创建空白项目试试</p>
<hr>
<h1 id="Second-Try"><a href="#Second-Try" class="headerlink" title="Second Try"></a>Second Try</h1>]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>ar</tag>
      </tags>
  </entry>
  <entry>
    <title>读论文笔记 ANN to Detect Structural Proteins</title>
    <url>/2020/11/13/reading-note/</url>
    <content><![CDATA[<p><strong>Artificial Neural Networks Trained to Detect Viral and Phage Structural Proteins</strong></p>
<h1 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h1><p>来源：GenBank’s non-redun- dant database</p>
<p>原始数据：</p>
<ul>
<li><p>正样本：6000+噬菌体结构蛋白序列</p>
</li>
<li><p>负样本：6000+噬菌体和原核基因组非结构蛋白序列</p>
</li>
</ul>
<p>处理后的网络输入：氨基酸百分比组成（人工标记每个样本是/不是结构蛋白）</p>
<p>目的：有一段新的序列，计算氨基酸百分比组成，输入网络，预测是否为结构蛋白</p>
<h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><p>目标：找最佳的网络结构&amp;数据集划分</p>
<p>备选网络结构：</p>
<ul>
<li>隐藏层1，1~100个神经元</li>
<li>隐藏层2，1~30个神经元</li>
</ul>
<p>备选train/validation set划分：</p>
<ul>
<li>50:50, 60:40, 70:30, 80:20, 95:5</li>
</ul>
<p>验证方法：160-fold交叉验证（图3A画的是10-fold交叉验证的结果）</p>
<p>验证结果：</p>
<ol>
<li><p>输入层（20个输入单元）+ 1个隐藏层（90个神经元）+ 输出层（1个输出单元）表现最好，准确率85.6%</p>
</li>
<li><p>train/validation set划分80:20表现最好，准确率86.2%</p>
</li>
<li><p>由于没有很大差别，最终选了160个网络，投票决定</p>
</li>
</ol>
<h2 id="更多工作"><a href="#更多工作" class="headerlink" title="更多工作"></a>更多工作</h2><p>关注对结构蛋白亚类的分类结果，如：是否是衣壳结构蛋白</p>
<p>即输入数据的标记，原来标记是否为结构蛋白，现在标记是否为衣壳结构蛋白，重新训练网络，评估分类准确度</p>
<p>还做了针对古细菌和真核生物衣壳蛋白的</p>
<p>Isoelectric point？没看懂</p>
<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><p>Neural Network Toolbox 7.0 in Matlab version 7.6.0.324</p>
<p>computations and data manipulations were done with Java, UNIX shell utilities, and Perl and Bash scripts</p>
<h1 id="web-interface"><a href="#web-interface" class="headerlink" title="web interface"></a>web interface</h1><p><a href="https://vdm.sdsu.edu/ivireons/">https://vdm.sdsu.edu/ivireons/</a></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>随便上Genbank找了一个序列<a href="https://www.ncbi.nlm.nih.gov/protein/SYW18879.1">https://www.ncbi.nlm.nih.gov/protein/SYW18879.1</a></p>
<p>下载FASTA格式</p>
<p>sequence.fasta:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;SYW18879.1 putative transcriptional regulator (Immunity repressor; phage) [Oenococcus oeni]</span><br><span class="line">MENKPNIAKNIREIRIKEDLTQEKLAELSGLSINFVSRLERSNNQNVSINKLEAIASALKVDIWRLLKSN</span><br><span class="line">DSEINKKEFPLHTKILFDKLSEFDPERSDRISKTILSLLEELELKQK</span><br></pre></td></tr></table></figure>

<p>提交测试</p>
<img src="/images/2020/screencapture2020-11-14 AM11.19.45.jpg">

<p><strong>Structural, MCP, &amp; Tail Protein Network Predictions</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Annotation	Structural	</span><br><span class="line">MCP 1:1	</span><br><span class="line">MCP 2:1	</span><br><span class="line">MCP 3:1	</span><br><span class="line">MCP 4:1	</span><br><span class="line">MCP 7:1	</span><br><span class="line">MCP Lambda:1	</span><br><span class="line">MCP Lambda2:1	</span><br><span class="line">Tail 1:1	</span><br><span class="line">Tail 2:1	</span><br><span class="line">Tail 3:1	</span><br><span class="line">Tail 4:1	</span><br><span class="line">Tail 7:1	</span><br><span class="line">Tail Lambda:1	</span><br><span class="line">Tail Lambda2:1	</span><br><span class="line">SDS	SD MCP 1:1	</span><br><span class="line">SD MCP 2:1	</span><br><span class="line">SD MCP 3:1	</span><br><span class="line">SD MCP 4:1	</span><br><span class="line">SD MCP 7:1	</span><br><span class="line">SD MCP Lambda:1	</span><br><span class="line">SD MCP Lambda2:1	</span><br><span class="line">SD Tail 1:1	</span><br><span class="line">SD Tail 2:1	</span><br><span class="line">SD Tail,3:1	</span><br><span class="line">SD Tail 4:1	</span><br><span class="line">SD Tail 7:1	</span><br><span class="line">SD Tail Lambda:1	</span><br><span class="line">SD Tail Lambda2:1</span><br></pre></td></tr></table></figure>

<p><strong>Percent Compositions and Isoelectric Point Estimates (last column)</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0.0427 0.0000 0.0513 0.1197 0.0342 0.0085 0.0085 0.1026 0.1197 0.1453 0.0085 0.0855 0.0256 0.0256 0.0598 0.1026 0.0256 0.0256 0.0085 0.0000 9.07</span><br></pre></td></tr></table></figure>

<p>根据<a href="http://vdm.sdsu.edu/ivireons/interpret.html">interpret your results</a>的提示…没看懂</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>bioinformatics</tag>
      </tags>
  </entry>
  <entry>
    <title>看源码笔记 DeephageTP</title>
    <url>/2020/11/19/code-note/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://github.com/chuym726/DeephageTP">https://github.com/chuym726/DeephageTP</a></p>
</blockquote>
<h1 id="环境搭建-amp-数据准备"><a href="#环境搭建-amp-数据准备" class="headerlink" title="环境搭建&amp;数据准备"></a>环境搭建&amp;数据准备</h1><p>（已有：conda 4.9.2）</p>
<ol>
<li><p>下载<a href="https://github.com/chuym726/DeephageTP">https://github.com/chuym726/DeephageTP</a></p>
</li>
<li><p>创建新的虚拟环境deephageTP</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda create --name deephageTP python=3.6 numpy theano keras scikit-learn</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>新建工程文件夹DeephageTP-test（需要的文件从下载的DeephageTP-master拷）</p>
</li>
<li><p>PyCharm打开DeephageTP-test，激活环境</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda activate deephageTP</span><br></pre></td></tr></table></figure>

<img src="/images/2020/screencapture2020-11-19 PM5.23.40.jpg">

<p>Python Interpreter也改成deephageTP</p>
<img src="/images/2020/screencapture2020-11-19 PM5.25.35.jpg">

<img src="/images/2020/screencapture2020-11-19 PM5.26.51.jpg">

<h1 id="测试example-data-fa"><a href="#测试example-data-fa" class="headerlink" title="测试example_data.fa"></a>测试example_data.fa</h1><p>代码里面直接读的training_data.faa，X和Y应该在同一个文件里，</p>
<p>但是给的training_data.faa.X.npy.tar.gz、training_data.faa.Y.npy.tar.gz是在不同文件</p>
<p>于是先用example_data.fa试一下（遇到bug #1，解决见Debug）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(deephageTP) coconutnut@x86_64-apple-darwin13 DeephageTP-test % python DeephageTP_model_training.py</span><br><span class="line">Using TensorFlow backend.</span><br><span class="line">only amino acid code.</span><br><span class="line">ok! there is the same number (193) of labels and sequences. </span><br><span class="line">193</span><br><span class="line">193</span><br><span class="line">193</span><br><span class="line">ok! windows is 900.</span><br><span class="line">ok! raw data has been saved as a npy file example_data.fa.X/Y</span><br><span class="line">now runing is DL_Train.</span><br><span class="line">nb_filters:  50</span><br><span class="line">kernel_s:  3</span><br><span class="line">n_batch:  10</span><br><span class="line">n_echos:  20</span><br><span class="line">dropout1:  0.1</span><br><span class="line">dropout2:  0.1</span><br><span class="line">ok! the npy file example_data.fa.X/Y.npy are loaded!</span><br><span class="line">ok! all labels are in 4 kinds.</span><br><span class="line">193</span><br><span class="line">now training for all, Be noted here no test part !!!</span><br><span class="line">[[1. 0. 0. 0.]</span><br><span class="line"> [1. 0. 0. 0.]</span><br><span class="line"> [1. 0. 0. 0.]</span><br><span class="line">......</span><br><span class="line"> [0. 0. 0. 1.]</span><br><span class="line"> [0. 0. 0. 1.]</span><br><span class="line"> [0. 0. 0. 1.]</span><br><span class="line"> [0. 0. 0. 1.]]</span><br><span class="line">2020-11-19 17:30:03.895070: I tensorflow/core/platform/cpu_feature_guard.cc:145] This TensorFlow binary is optimized with Intel(R) MKL-DNN to use the following CPU instructions in performance critical operations:  SSE4.1 SSE4.2 AVX AVX2 FMA</span><br><span class="line">To enable them in non-MKL-DNN operations, rebuild TensorFlow with the appropriate compiler flags.</span><br><span class="line">2020-11-19 17:30:03.895316: I tensorflow/core/common_runtime/process_util.cc:115] Creating new thread pool with default inter op setting: 8. Tune using inter_op_parallelism_threads for best performance.</span><br><span class="line">Epoch 1/20</span><br><span class="line">193/193 [==============================] - 12s 64ms/step - loss: 1.1962 - accuracy: 0.4767</span><br><span class="line">Epoch 2/20</span><br><span class="line">193/193 [==============================] - 11s 55ms/step - loss: 0.4503 - accuracy: 0.8446</span><br><span class="line">Epoch 3/20</span><br><span class="line">193/193 [==============================] - 10s 53ms/step - loss: 0.1844 - accuracy: 0.9534</span><br><span class="line">Epoch 4/20</span><br><span class="line">193/193 [==============================] - 10s 52ms/step - loss: 0.1079 - accuracy: 0.9845</span><br><span class="line">Epoch 5/20</span><br><span class="line">193/193 [==============================] - 11s 55ms/step - loss: 0.0383 - accuracy: 1.0000</span><br><span class="line">Epoch 6/20</span><br><span class="line">193/193 [==============================] - 10s 50ms/step - loss: 0.0203 - accuracy: 1.0000</span><br><span class="line">Epoch 7/20</span><br><span class="line">193/193 [==============================] - 12s 61ms/step - loss: 0.0105 - accuracy: 1.0000</span><br><span class="line">Epoch 8/20</span><br><span class="line">193/193 [==============================] - 10s 51ms/step - loss: 0.0063 - accuracy: 1.0000</span><br><span class="line">Epoch 9/20</span><br><span class="line">193/193 [==============================] - 10s 51ms/step - loss: 0.0058 - accuracy: 1.0000</span><br><span class="line">Epoch 10/20</span><br><span class="line">193/193 [==============================] - 10s 50ms/step - loss: 0.0104 - accuracy: 0.9948</span><br><span class="line">Epoch 11/20</span><br><span class="line">193/193 [==============================] - 10s 51ms/step - loss: 0.0066 - accuracy: 1.0000</span><br><span class="line">Epoch 12/20</span><br><span class="line">193/193 [==============================] - 10s 51ms/step - loss: 0.0041 - accuracy: 1.0000</span><br><span class="line">Epoch 13/20</span><br><span class="line">193/193 [==============================] - 10s 52ms/step - loss: 0.0017 - accuracy: 1.0000</span><br><span class="line">Epoch 14/20</span><br><span class="line">193/193 [==============================] - 10s 50ms/step - loss: 0.0026 - accuracy: 1.0000</span><br><span class="line">Epoch 15/20</span><br><span class="line">193/193 [==============================] - 10s 51ms/step - loss: 0.0017 - accuracy: 1.0000</span><br><span class="line">Epoch 16/20</span><br><span class="line">193/193 [==============================] - 10s 50ms/step - loss: 0.0013 - accuracy: 1.0000</span><br><span class="line">Epoch 17/20</span><br><span class="line">193/193 [==============================] - 10s 52ms/step - loss: 0.0011 - accuracy: 1.0000</span><br><span class="line">Epoch 18/20</span><br><span class="line">193/193 [==============================] - 9s 48ms/step - loss: 8.4943e-04 - accuracy: 1.0000</span><br><span class="line">Epoch 19/20</span><br><span class="line">193/193 [==============================] - 9s 49ms/step - loss: 8.9927e-04 - accuracy: 1.0000</span><br><span class="line">Epoch 20/20</span><br><span class="line">193/193 [==============================] - 9s 49ms/step - loss: 0.0011 - accuracy: 1.0000</span><br><span class="line">the model (example_data.fa.all.h5) has saved!</span><br></pre></td></tr></table></figure>

<p>产生了3个文件</p>
<p>example_data.fa.all.h5</p>
<p>example_data.fa.X.npy</p>
<p>example_data.fa.Y.npy</p>
<p>所以给的training_data.faa.X.npy.tar.gz、training_data.faa.Y.npy.tar.gz也是生成的吗？data文件夹里就一个叫a的空文件，难道是没传training_data.faa？😧</p>
<p>看了下代码，还真是🙄</p>
<p>aa_ref2npy()用来转格式，存成one-hot编码后，X和Y分开的形式</p>
<p>DL_Train()用来训练</p>
<p>既然如此，直接用training_data.faa.X.npy.tar.gz、training_data.faa.Y.npy.tar.gz解压，不跑aa_ref2npy()，就可以直接训练了</p>
<h1 id="测试training-data-faa"><a href="#测试training-data-faa" class="headerlink" title="测试training_data.faa"></a>测试training_data.faa</h1><p>解压training_data.faa.X.npy.tar.gz、training_data.faa.Y.npy.tar.gz</p>
<p>（25.3MB解压后3.97 GB，是得有多少0啊，不愧是one-hot）</p>
<p>代码改了2处：</p>
<p>第8行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from sklearn.cross_validation import train_test_split</span><br></pre></td></tr></table></figure>

<p>改成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from sklearn.model_selection import train_test_split</span><br></pre></td></tr></table></figure>

<p>最后的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if 1:</span><br><span class="line">	aa_ref2npy(ref_Data=ref_Data,len_w=len_w)</span><br></pre></td></tr></table></figure>

<p>注释掉</p>
<p>运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(deephageTP) coconutnut@x86_64-apple-darwin13 DeephageTP-test % python DeephageTP_model_training.py</span><br><span class="line">Using TensorFlow backend.</span><br><span class="line">only amino acid code.</span><br><span class="line">now runing is DL_Train.</span><br><span class="line">nb_filters:  50</span><br><span class="line">kernel_s:  3</span><br><span class="line">n_batch:  10</span><br><span class="line">n_echos:  20</span><br><span class="line">dropout1:  0.1</span><br><span class="line">dropout2:  0.1</span><br><span class="line">ok! the npy file training_data.faa.X/Y.npy are loaded!</span><br><span class="line">ok! all labels are in 4 kinds.</span><br><span class="line">27585</span><br><span class="line">now training for all, Be noted here no test part !!!</span><br><span class="line">[[1. 0. 0. 0.]</span><br><span class="line"> [1. 0. 0. 0.]</span><br><span class="line"> [1. 0. 0. 0.]</span><br><span class="line"> ...</span><br><span class="line"> [0. 0. 0. 1.]</span><br><span class="line"> [0. 0. 0. 1.]</span><br><span class="line"> [0. 0. 0. 1.]]</span><br><span class="line">2020-11-19 17:52:30.350217: I tensorflow/core/platform/cpu_feature_guard.cc:145] This TensorFlow binary is optimized with Intel(R) MKL-DNN to use the following CPU instructions in performance critical operations:  SSE4.1 SSE4.2 AVX AVX2 FMA</span><br><span class="line">To enable them in non-MKL-DNN operations, rebuild TensorFlow with the appropriate compiler flags.</span><br><span class="line">2020-11-19 17:52:30.350529: I tensorflow/core/common_runtime/process_util.cc:115] Creating new thread pool with default inter op setting: 8. Tune using inter_op_parallelism_threads for best performance.</span><br><span class="line">Epoch 1/20</span><br><span class="line"> 1250/27585 [&gt;.............................] - ETA: 22:33 - loss: 0.5788 - accuracy: 0.8016</span><br></pre></td></tr></table></figure>

<p>太大了，不跑了</p>
<h1 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h1><p>训练部分 DeephageTP_model_training.py</p>
<h2 id="aa-ref2npy"><a href="#aa-ref2npy" class="headerlink" title="aa_ref2npy()"></a>aa_ref2npy()</h2><p>做one-hot编码用的</p>
<p>把蛋白质序列↓</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;UniRef100_A0A017QK57 PBSX family phage terminase large subunit n=1 Tax=Glaesserella parasuis str. Nagasaki TaxID=1117322 RepID=A0A017QK57_HAEPR 1</span><br><span class="line">MKIQLNLPPKLIPVFTQQNVRYRGAYGGRGSAKTRTFAKMTAVVAYQRAMQGESGVILCGREFMNSLEDSSLEEIKQAIQSEPWLTDFFEVGEKYVRTKCGRISYIFTGLRHNLDSIKSKARILLAWIDEAESVSEMAWRKLLPTVRENGSEIWLTWNPEKKGSATDLRFRQHQDESMAIVEMNYSDNPWFPDVLEQERLRDKARLDDATYRWIWEGAYLEQSEAQIFRDKFQELEFKPNGDFSGPYFGLDFGFAQDPTAAVKCWVFKDELYIEYEAGKVGLELDDTATFLQKGIVGIEQYVIRADSARPESISYLKRHGLPRIDGVSKWKGSVEDGIAHIKSYKKIYIHPRCQQTLNEFRLYSYKTDRLSGDILPVVLDENNHYIDALRYALEPLMKGRQSWFG</span><br></pre></td></tr></table></figure>

<p>one-hot编码，np.array格式，保存（分别存X和Y）</p>
<p>把X打出来看下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[[0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  对应M</span><br><span class="line"> [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],  对应K</span><br><span class="line"> [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],  对应I</span><br><span class="line"> [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],</span><br><span class="line"> [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],</span><br><span class="line"> [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],</span><br><span class="line"> [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],</span><br><span class="line"> ...</span><br></pre></td></tr></table></figure>

<p>就是和蛋白质序列MKI…一一对应的one-hot编码（还是手动写死的）</p>
<p>大小是(900, 20)，和文中描述一样</p>
<p>这里Y是0，根据每个蛋白质第一行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;UniRef100_A0A017QK57 PBSX family phage terminase large subunit n=1 Tax=Glaesserella parasuis str. Nagasaki TaxID=1117322 RepID=A0A017QK57_HAEPR 1</span><br></pre></td></tr></table></figure>

<p>最后这个数字-1表示类别</p>
<p>如下面这个蛋白的类别是2</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;UniRef100_A0A072NPV4 Phage terminase, small subunit n=1 Tax=Bacillus azotoformans MEV2011 TaxID=1348973 RepID=A0A072NPV4_BACAZ 3</span><br><span class="line">MAKDGTNRGGARVGAGAKKKPLTDKIAEGNPGGRKLTVMEFKDTADLKGLEMPEPNKMLEAIQKDGKALVAGEIYRNTWAWLNERGCAALVSPQLLERYAMSVARWIQCEEAVTEYGFLAKHPTTGNAIQSPYVAMGQNYMNQTNRLWMEIFQIVKENCTGEYSGINPQDDVMERLLTARRGK</span><br></pre></td></tr></table></figure>

<h2 id="DL-Train"><a href="#DL-Train" class="headerlink" title="DL_Train()"></a>DL_Train()</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DL_Train</span>(<span class="params">ref_Data, len_w</span>):</span></span><br><span class="line">	<span class="comment"># 参数设置</span></span><br><span class="line">	nb_filters = <span class="number">50</span></span><br><span class="line">	kernel_s = <span class="number">3</span></span><br><span class="line">	n_batch = <span class="number">10</span></span><br><span class="line">	n_echos = <span class="number">20</span></span><br><span class="line">	dropout1 = <span class="number">0.10</span></span><br><span class="line">	dropout2 = <span class="number">0.10</span></span><br><span class="line">	<span class="built_in">print</span> (<span class="string">&quot;now runing is DL_Train.&quot;</span>)</span><br><span class="line">		<span class="comment"># end_lossrint(&quot;all is ended.&quot;)</span></span><br><span class="line">	<span class="built_in">print</span> (<span class="string">&quot;nb_filters: &quot;</span>, nb_filters)</span><br><span class="line">	<span class="built_in">print</span> (<span class="string">&quot;kernel_s: &quot;</span>, kernel_s)</span><br><span class="line">	<span class="built_in">print</span> (<span class="string">&quot;n_batch: &quot;</span>, n_batch)</span><br><span class="line">	<span class="built_in">print</span> (<span class="string">&quot;n_echos: &quot;</span>, n_echos)</span><br><span class="line">	<span class="built_in">print</span> (<span class="string">&quot;dropout1: &quot;</span>, dropout1)</span><br><span class="line">	<span class="built_in">print</span> (<span class="string">&quot;dropout2: &quot;</span>, dropout2)</span><br><span class="line">	</span><br><span class="line">	<span class="comment"># 处理数据</span></span><br><span class="line">	X2 = np.load(ref_Data + <span class="string">&quot;.X.npy&quot;</span>)</span><br><span class="line">	Y2 = np.load(ref_Data + <span class="string">&quot;.Y.npy&quot;</span>)</span><br><span class="line">	<span class="built_in">print</span> (<span class="string">&quot;ok! the npy file &quot;</span> + ref_Data + <span class="string">&quot;.X/Y.npy are loaded!&quot;</span> )</span><br><span class="line">	n_classes = <span class="number">4</span>    <span class="comment">#len(np.unique(Y))</span></span><br><span class="line">	<span class="built_in">print</span> (<span class="string">&quot;ok! all labels are in &quot;</span> + <span class="built_in">str</span>(n_classes) + <span class="string">&quot; kinds.&quot;</span> )</span><br><span class="line">	YY_t = []</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> Y2:</span><br><span class="line">		ll = np.zeros(n_classes)</span><br><span class="line">		ll[i] = <span class="number">1</span></span><br><span class="line">		YY_t.append(ll)</span><br><span class="line">	YY_t = np.array(YY_t)</span><br><span class="line">	<span class="built_in">print</span>(<span class="built_in">len</span>(YY_t))</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;now training for all, Be noted here no test part !!!&quot;</span>)</span><br><span class="line">	X_train = X2.reshape(-<span class="number">1</span>,<span class="number">1</span>,len_w,matrix_size)</span><br><span class="line">	Y_train = YY_t</span><br><span class="line">	<span class="built_in">print</span>(Y_train)</span><br><span class="line">	</span><br><span class="line">	<span class="comment"># 构建模型</span></span><br><span class="line">	model = Sequential()</span><br><span class="line">	model.add(Conv2D(filters=nb_filters,kernel_size=(<span class="number">7</span>,<span class="number">1</span>),padding=<span class="string">&#x27;same&#x27;</span>,input_shape=(<span class="number">1</span>,len_w,matrix_size),data_format=<span class="string">&#x27;channels_first&#x27;</span>))</span><br><span class="line">	model.add(Activation(<span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line">	model.add(MaxPooling2D(pool_size=(<span class="number">3</span>,<span class="number">3</span>)))</span><br><span class="line">	model.add(Dropout(dropout1))</span><br><span class="line">	model.add(Flatten())</span><br><span class="line">	model.add(Dense(<span class="number">100</span>,activation=<span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line">	model.add(Dropout(dropout2))</span><br><span class="line">	model.add(Dense(n_classes,activation=<span class="string">&#x27;softmax&#x27;</span>))</span><br><span class="line">	model.<span class="built_in">compile</span>(loss=<span class="string">&#x27;categorical_crossentropy&#x27;</span>,optimizer=Adam(),metrics=[<span class="string">&#x27;accuracy&#x27;</span>])   </span><br><span class="line">	</span><br><span class="line">	<span class="comment"># 训练模型</span></span><br><span class="line">	model.fit(X_train,Y_train,batch_size=n_batch,epochs=n_echos,verbose=<span class="number">1</span>)</span><br><span class="line">	</span><br><span class="line">	<span class="comment"># 保存模型</span></span><br><span class="line">	model.save(ref_Data + <span class="string">&#x27;.all.h5&#x27;</span>)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;the model (&quot;</span> + ref_Data + <span class="string">&quot;.all.h5) has saved!&quot;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h1><h3 id="1"><a href="#1" class="headerlink" title="#1"></a>#1</h3><p>第一次跑DeephageTP_model_training.py时遇到的bug</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ModuleNotFoundError: No module named &#x27;sklearn.cross_validation&#x27;</span><br></pre></td></tr></table></figure>

<p>解决：</p>
<p><a href="https://blog.csdn.net/qq_35962520/article/details/85295228">https://blog.csdn.net/qq_35962520/article/details/85295228</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># from sklearn.cross_validation import train_test_split # cross_validation不再使用，移至model_selection</span><br><span class="line">from sklearn.model_selection import train_test_split</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>bioinformatics</tag>
      </tags>
  </entry>
  <entry>
    <title>读论文笔记 DeephageTP</title>
    <url>/2020/11/19/paper-note/</url>
    <content><![CDATA[<p><strong>DeephageTP: A Convolutional Neural Network Framework for Identifying Phage-specific Proteins from metagenomic sequencing data<br> Running title: an alignment-free deep learning framework for identifying phage- specific proteins</strong></p>
<p>参考：原文 &amp; Github <a href="https://github.com/chuym726/DeephageTP">https://github.com/chuym726/DeephageTP</a></p>
<hr>
<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p>3 specific proteins of the tailed phage:</p>
<ol>
<li>Portal (portal protein)</li>
<li>TerL (large terminase subunit protein) </li>
<li>TerS (small terminase subunit protein)</li>
</ol>
<p>Develop a <strong>CNN-based framework</strong> to identify these 3 proteins from <strong>metagenome data</strong></p>
<h1 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h1><h2 id="train-test-set"><a href="#train-test-set" class="headerlink" title="train/test set"></a>train/test set</h2><p>(原文位置：106-127行)</p>
<p>来源：Uniport(<a href="http://www.uniprot.org">www.uniprot.org</a>)</p>
<p>预处理过程：</p>
<ol>
<li><p>从数据库中获取各类蛋白质序列</p>
<blockquote>
<p>according to the taxonomy in the UniProt database, all proteins in archaea, bacteria and viruses were obtained from the database;</p>
</blockquote>
<p>看example_data.fa文件，长这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;UniRef100_A0A017QK57 PBSX family phage terminase large subunit n=1 Tax=Glaesserella parasuis str. Nagasaki TaxID=1117322 RepID=A0A017QK57_HAEPR 1</span><br><span class="line">MKIQLNLPPKLIPVFTQQNVRYRGAYGGRGSAKTRTFAKMTAVVAYQRAMQGESGVILCGREFMNSLEDSSLEEIKQAIQSEPWLTDFFEVGEKYVRTKCGRISYIFTGLRHNLDSIKSKARILLAWIDEAESVSEMAWRKLLPTVRENGSEIWLTWNPEKKGSATDLRFRQHQDESMAIVEMNYSDNPWFPDVLEQERLRDKARLDDATYRWIWEGAYLEQSEAQIFRDKFQELEFKPNGDFSGPYFGLDFGFAQDPTAAVKCWVFKDELYIEYEAGKVGLELDDTATFLQKGIVGIEQYVIRADSARPESISYLKRHGLPRIDGVSKWKGSVEDGIAHIKSYKKIYIHPRCQQTLNEFRLYSYKTDRLSGDILPVVLDENNHYIDALRYALEPLMKGRQSWFG</span><br><span class="line">&gt;UniRef100_A0A017QKX8 PBSX family phage terminase large subunit n=1 Tax=Glaesserella parasuis str. Nagasaki TaxID=1117322 RepID=A0A017QKX8_HAEPR 1</span><br><span class="line">MKIQLNLPPKLIPVFTQQNVRYRGAYGGRGSAKTRTFAKMTAVVAYQRAMQGESGVILCGREFMNSLEDSSLEEIKQAIQSEPWLANFFDVGEKYVHTKCGRISYIFTGLRHNLDSIKSKARILLAWIDEAESVSEMAWRKLLPTVRESGSEIWLTWNPEKKGSATDLRFRQYQDESMAIVEMNYNDNPWFPDVLKQERLRDKARLDDATYRWIWEGDYLEESEAQVFRGKYQELEFKPLPDFEGPYHGLDFGFAQDPTAAIKCWVFKDELYIEYEAGKVGLELDDTATFLQKGIVGIEQYVIRADSARPESISYLKRHGLPRIDGVSKWKGSVEDGIAHIKSYKKIYIHPRCQQTLNEFRLYSYKTDRLSGDVLPTLVDAHNHYIDALRYALNPRIQRKGDFSQNPLKLY</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
</li>
<li><p>去除无关数据</p>
<blockquote>
<p>the protein sequences were searched by the keywords (i.e., portal, large terminase subunit, and small terminase subunit), and the noise sequences with the uncertain keywords (e.g., hypothetical, possible, like, predicted) were removed to ensure that the selected protein sequences in the three categories are veracious;</p>
</blockquote>
</li>
<li><p>其它类过多，随机留一部分</p>
<blockquote>
<p>the remaining sequences without the keywords of interest (portal, large terminase subunit and, small terminase subunit) were labeled as the ‘others’ category. However, the size of the ‘others’ category is more than 75 times larger than that of the three categories. To relieve the class-imbalance problem brought by this situation, we randomly selected 20000 protein sequences  from the remaining sequences and labeled as the ‘others’ category;</p>
</blockquote>
</li>
<li><p>去除不正常长度的序列</p>
<blockquote>
<p>to further guarantee that the sequences from the database with the three categories are veracious, we calculated length distribution of these sequences (see Fig. S1), then manually checked the sequences with the abnormal length (&lt;5% and &gt; 95%) using Blastp (<a href="https://blast.ncbi.nlm.nih.gov/Blast.cgi">https://blast.ncbi.nlm.nih.gov/Blast.cgi</a>) against NCBI nr database, and the sequences without hitting to the targeted references were filtered out (almost all the sequences with abnormal length) and labeled as the ‘others’ category.</p>
</blockquote>
</li>
</ol>
<p>最终结果：</p>
<img src="/images/2020/screencapture2020-11-19 PM4.09.05.jpg">

<h2 id="mimic-metagenomic-dataset"><a href="#mimic-metagenomic-dataset" class="headerlink" title="mimic metagenomic dataset"></a>mimic metagenomic dataset</h2><p>(原文位置：128-140行)</p>
<p>来源：UniRef100 (<a href="https://www.uniprot.org/uniref/">https://www.uniprot.org/uniref/</a>)</p>
<p>处理过程和上面类似</p>
<p>且：2个数据库有重合，手动删除重合部分</p>
<p>用这组数据测试了模型在不同数据集大小上的表现效果</p>
<h2 id="virome-dataset"><a href="#virome-dataset" class="headerlink" title="virome dataset"></a>virome dataset</h2><p>(原文位置：141-147行)</p>
<p>用于测试模型在真实数据集上的结果</p>
<p>这组是原始数据，自行获取蛋白质序列</p>
<h2 id="3个数据集的用途"><a href="#3个数据集的用途" class="headerlink" title="3个数据集的用途"></a>3个数据集的用途</h2><p>(原文位置：193-197行 + Fig.1A)</p>
<ol>
<li>用train/test set训练模型，分析可行性</li>
<li>用mimic dataset测试cutoff value</li>
<li>用virome dataset测试真实效果</li>
</ol>
<blockquote>
<p>In summary, as shown in Fig. 1A, in this study, the proposed DeephageTP framework was firstly implemented on the training dataset for feasibility analysis, and then the trained model was applied on the mimic dataset for test and the cutoff value of each category of interest was determined according to the responding loss values distributions; finally, we applied the trained model on the real metagenomic datasets for examining the performance of our framework.</p>
</blockquote>
<img src="/images/2020/screencapture2020-11-19 PM3.47.08.jpg">

<h1 id="蛋白质序列编码"><a href="#蛋白质序列编码" class="headerlink" title="蛋白质序列编码"></a>蛋白质序列编码</h1><p>(原文位置：148-161行)</p>
<p>方法：one-hot</p>
<p>对20个氨基酸进行one-hot编码，1个氨基酸占20位</p>
<img src="/images/2020/screencapture2020-11-19 PM4.20.48.jpg" width="300px">

<p>L个氨基酸的蛋白质序列将被编码成 L * 20 的矩阵</p>
<p>输入需要固定，故设置最大长度为900，多了砍掉，少了填0</p>
<p>最终每个蛋白质序列都被编码成 900 * 20 的矩阵，作为输入</p>
<h1 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h1><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>(原文位置：163-170行)</p>
<ol>
<li><p>输入层 (ReLu)</p>
</li>
<li><p>卷积层</p>
</li>
<li><p>最大池化层 (dropout)</p>
</li>
<li><p>全连接层1 (ReLu) (dropout)</p>
</li>
<li><p>全连接层2</p>
</li>
<li><p>输出层 (SoftMax)</p>
</li>
</ol>
<img src="/images/2020/screencapture2020-11-19 PM4.20.481.jpg">

<h2 id="超参数选择"><a href="#超参数选择" class="headerlink" title="超参数选择"></a>超参数选择</h2><p>(原文位置：171-189行)</p>
<p>全连接单元数量、dropout rate、learning rate等的取值，大部分是常用的默认值；一些用5-fold cross-validation确定</p>
<p>20个氨基酸分成7组（根据dipole moments &amp; side-chain）： {A,G,V}, {I,L,F,P}, {Y,M,T,S}, {H,N,Q,W}, {R,K}, {D,E} and {C} -&gt; 卷积层filter大小设置为 7 * 1</p>
<h2 id="模型评估指标"><a href="#模型评估指标" class="headerlink" title="模型评估指标"></a>模型评估指标</h2><p>(原文位置：198-213行)</p>
<ul>
<li>Accuracy</li>
<li>Precision</li>
<li>Recall</li>
<li>F1-score</li>
</ul>
<h2 id="Loss计算"><a href="#Loss计算" class="headerlink" title="Loss计算"></a>Loss计算</h2><p>(原文位置：214-234行)</p>
<img src="/images/2020/screencapture2020-11-19 PM4.50.00.jpg">

<p>yk 第k维的序列的真实标签</p>
<p>pk 第k维的序列的预测标签</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>(原文位置：190-192行)</p>
<p>Python 3.6</p>
<p>Keras</p>
<p><a href="https://github.com/chuym726/DeephageTP">https://github.com/chuym726/DeephageTP</a></p>
<h1 id="没看懂的"><a href="#没看懂的" class="headerlink" title="没看懂的"></a>没看懂的</h1><ol>
<li>cutoff value是做什么的？怎么算的？</li>
<li>loss怎么算的？</li>
</ol>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>bioinformatics</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity笔记 Project01 Basic</title>
    <url>/2020/11/30/note-unity/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.youtube.com/watch?v=pwZpJzpE2lQ&amp;t=4178s&amp;ab_channel=Imphenzia">https://www.youtube.com/watch?v=pwZpJzpE2lQ&amp;t=4178s&amp;ab_channel=Imphenzia</a></p>
</blockquote>
<img src="/images/2020/screencapture2020-11-30 PM9.13.29.jpg">

<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><ol>
<li><p>人物跳跃，左右移动</p>
<ul>
<li><p>跳跃速度与重量无关 -&gt; ForceMode.VelocityChange</p>
</li>
<li><p>跳跃时保持左右速度 -&gt; rigidbodyComponent.velocity</p>
</li>
<li><p>不可在空中跳跃 -&gt; 检查Physics.OverlapSphere()</p>
</li>
<li><p>左右移动同时检查←→AD -&gt; Input.GetAxis(“Horizontal”)</p>
</li>
<li><p>碰到墙壁不会因为长按D贴在墙上 -&gt; 添加物理材质，摩擦力为0</p>
</li>
</ul>
</li>
<li><p>摄像头跟随角色 -&gt; 层级放在角色下即可</p>
</li>
<li><p>收集硬币</p>
<ul>
<li>不发生碰撞 -&gt; 勾选是触发器</li>
<li>检测碰撞 -&gt; OnTriggerEnter()</li>
<li>碰到后消除 -&gt; Destroy(other.gameObject);</li>
</ul>
</li>
</ol>
<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ol>
<li>在Update()中获取输入，在FixedUpdate()中apply physics</li>
<li>用[SerializeField] private，不要用public</li>
<li>减少不必要的Collider，提高效率</li>
<li>多用Prefab，善用Layer</li>
</ol>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class Player : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    [SerializeField] private Transform groundCheckTransform = null;</span><br><span class="line">    [SerializeField] private LayerMask playerMask;</span><br><span class="line">    private bool jumpKeyPressed;</span><br><span class="line">    private float horizontalInput;</span><br><span class="line">    private Rigidbody rigidbodyComponent;</span><br><span class="line"></span><br><span class="line">    // Start is called before the first frame update</span><br><span class="line">    void Start() &#123;</span><br><span class="line">        rigidbodyComponent = GetComponent&lt;Rigidbody&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Update is called once per frame</span><br><span class="line">    void Update() &#123;</span><br><span class="line">        horizontalInput = Input.GetAxis(&quot;Horizontal&quot;);</span><br><span class="line"></span><br><span class="line">        // Avoid jumping in the air (always colliding with the capsule collider)</span><br><span class="line">        if(Physics.OverlapSphere(groundCheckTransform.position, 0.1f, playerMask).Length == 0)&#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if(Input.GetKeyDown(KeyCode.Space))&#123;</span><br><span class="line">            jumpKeyPressed = true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // FixedUpdate is called once every physic update (Default 100/s)</span><br><span class="line">    private void FixedUpdate() &#123;</span><br><span class="line">        if(jumpKeyPressed)&#123;</span><br><span class="line">            rigidbodyComponent.AddForce(Vector3.up * 5,ForceMode.VelocityChange);</span><br><span class="line">            jumpKeyPressed = false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        rigidbodyComponent.velocity = new Vector3(horizontalInput * 2, rigidbodyComponent.velocity.y, 0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void OnTriggerEnter(Collider other) &#123;</span><br><span class="line">        // Collide with 9.Coin layer</span><br><span class="line">        if(other.gameObject.layer == 9)&#123;</span><br><span class="line">            Destroy(other.gameObject);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity笔记 Project03 第一人称移动</title>
    <url>/2020/12/02/unity-note-1/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.youtube.com/watch?v=_QajrabyTJc&amp;ab_channel=Brackeys">https://www.youtube.com/watch?v=_QajrabyTJc&amp;ab_channel=Brackeys</a></p>
</blockquote>
<img src="/images/2020/screencapture2020-12-02 PM5.18.52.jpg">

<h1 id="层级"><a href="#层级" class="headerlink" title="层级"></a>层级</h1><ul>
<li>Player（空物体）-&gt; 加Character Controller；PlayerMovement（Script）<ul>
<li>Body（圆柱）-&gt; 删除Collider</li>
<li>Main Camera -&gt; 放在人物头部的位置；MouseLook（Script）</li>
</ul>
</li>
</ul>
<h1 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h1><p>x轴横向旋转，转动Player和Camera</p>
<p>y轴纵向旋转，只转动Camera</p>
<h1 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h1><p>使用Character Controller的方法</p>
<h1 id="重力"><a href="#重力" class="headerlink" title="重力"></a>重力</h1><p>Character Controller不能使用Rigidbody🤪，只能代码解决</p>
<p>还需要通过GroundCheck和Layer来解决碰到地面时下落速度清零的问题</p>
<h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><ul>
<li><p>Update()中Time.deltaTime获取从上次调用Update()至今的时间</p>
</li>
<li><p>控制爬楼梯跨度&amp;斜坡角度 -&gt; Character Controller中设置</p>
</li>
</ul>
<img src="/images/2020/screencapture2020-12-02_PM2.00.44.jpg">

<p>看教程里的总结，用Character Controller和用RigidBody来控制确实挺不一样的，后面得看看用哪个更合适</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class MouseLook : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public float mouseSensitivity = 100f;</span><br><span class="line"></span><br><span class="line">    // 在Unity中把Player拖过来</span><br><span class="line">    public Transform playerBody = null;</span><br><span class="line"></span><br><span class="line">    private float xRotation = 0f;</span><br><span class="line"></span><br><span class="line">    // Start is called before the first frame update</span><br><span class="line">    void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Update is called once per frame</span><br><span class="line">    void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        // Get Input</span><br><span class="line">        float mouseX = Input.GetAxis(&quot;Mouse X&quot;) * mouseSensitivity * Time.deltaTime;</span><br><span class="line">        float mouseY = Input.GetAxis(&quot;Mouse Y&quot;) * mouseSensitivity * Time.deltaTime;</span><br><span class="line"></span><br><span class="line">        // 纵向旋转Camera</span><br><span class="line">        xRotation -= mouseY;</span><br><span class="line">        // 不直接用Rotate，因为要先限制旋转角度</span><br><span class="line">        xRotation = Mathf.Clamp(xRotation, -30f, 30f);</span><br><span class="line">        transform.localRotation = Quaternion.Euler(xRotation, 0f, 0f);</span><br><span class="line"></span><br><span class="line">        // 横向旋转Player</span><br><span class="line">        playerBody.Rotate(Vector3.up * mouseX);</span><br><span class="line">        Debug.Log(mouseX);</span><br><span class="line">        Debug.Log(&quot;R:&quot;+playerBody.transform.rotation);</span><br><span class="line">        Debug.Log(&quot;LR:&quot;+playerBody.transform.localRotation);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class PlayerMovement : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public CharacterController controller;</span><br><span class="line"></span><br><span class="line">    public float speed = 12f;</span><br><span class="line">    public float gravity = -9.81f;</span><br><span class="line">    public float jumpHeight = 3f;</span><br><span class="line"></span><br><span class="line">    public Transform groundCheck;</span><br><span class="line">    public float groundDistance = 0.4f;</span><br><span class="line">    public LayerMask groundMask;</span><br><span class="line"></span><br><span class="line">    Vector3 velocity;</span><br><span class="line">    bool isGrounded;</span><br><span class="line"></span><br><span class="line">    // Update is called once per frame</span><br><span class="line">    void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        // 防止向下的速度无限增大</span><br><span class="line">        isGrounded = Physics.CheckSphere(groundCheck.position, groundDistance, groundMask);</span><br><span class="line"></span><br><span class="line">        if(isGrounded &amp;&amp; velocity.y &lt; 0)&#123;</span><br><span class="line">            velocity.y = -2f;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 移动</span><br><span class="line">        float x = Input.GetAxis(&quot;Horizontal&quot;);</span><br><span class="line">        float z = Input.GetAxis(&quot;Vertical&quot;);</span><br><span class="line"></span><br><span class="line">        // 这样写是全局坐标，不管Player面对什么方向</span><br><span class="line">        // Vector3 move = new Vector3(x, 0f, z);</span><br><span class="line"></span><br><span class="line">        Vector3 move = transform.right * x + transform.forward * z;</span><br><span class="line">        controller.Move(move * speed * Time.deltaTime);</span><br><span class="line"></span><br><span class="line">        // 跳跃</span><br><span class="line">        if(Input.GetButtonDown(&quot;Jump&quot;) &amp;&amp; isGrounded)&#123;</span><br><span class="line">            velocity.y = Mathf.Sqrt(jumpHeight * -2f * gravity);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 模拟重力</span><br><span class="line">        velocity.y += gravity * Time.deltaTime;</span><br><span class="line">        controller.Move(velocity * Time.deltaTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity笔记 Project04 点击移动+旋转摄像头</title>
    <url>/2020/12/02/unity-note-2/</url>
    <content><![CDATA[<p>想做成点击移动，并且摄像头可以根据鼠标位置有限制的旋转</p>
<h1 id="Step-1-点击移动"><a href="#Step-1-点击移动" class="headerlink" title="Step 1 - 点击移动"></a>Step 1 - 点击移动</h1><p>参照Project02</p>
<img src="/images/2020/screencapture2020-12-02 PM5.37.22.jpg">

<p>完成~</p>
<img src="/images/2020/Dec-02-2020 17-42-53.gif">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using UnityEngine.AI;</span><br><span class="line"></span><br><span class="line">public class PlayerMovement : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public NavMeshAgent agent;</span><br><span class="line"></span><br><span class="line">    // Start is called before the first frame update</span><br><span class="line">    void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        agent = GetComponent&lt;NavMeshAgent&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Update is called once per frame</span><br><span class="line">    void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        // Click to Move</span><br><span class="line">        if(Input.GetMouseButtonDown(0))&#123;</span><br><span class="line">            RaycastHit hit;</span><br><span class="line">            Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);</span><br><span class="line">            if(Physics.Raycast(ray, out hit, Mathf.Infinity))&#123;</span><br><span class="line">                agent.SetDestination(hit.point);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Step-2-旋转摄像头"><a href="#Step-2-旋转摄像头" class="headerlink" title="Step 2 - 旋转摄像头"></a>Step 2 - 旋转摄像头</h1><p>参照Project03</p>
<img src="/images/2020/Dec-02-2020 18-05-13.gif">

<p>鼠标转向不是很方便，顺便加了方向键旋转</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class CameraLook : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public float mouseSensitivity = 100f;</span><br><span class="line">    public float keySensitivity = 100f;</span><br><span class="line">    public Transform player = null;</span><br><span class="line">    private float xRotation = 0f;</span><br><span class="line"></span><br><span class="line">    // Start is called before the first frame update</span><br><span class="line">    void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Update is called once per frame</span><br><span class="line">    void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        // Get mouse position</span><br><span class="line">        float mouseX = Input.GetAxis(&quot;Mouse X&quot;) * mouseSensitivity * Time.deltaTime;</span><br><span class="line">        float mouseY = Input.GetAxis(&quot;Mouse Y&quot;) * mouseSensitivity * Time.deltaTime;</span><br><span class="line"></span><br><span class="line">        // Get key inout</span><br><span class="line">        float keyX = Input.GetAxis(&quot;Horizontal&quot;) * keySensitivity * Time.deltaTime;</span><br><span class="line"></span><br><span class="line">        Debug.Log(mouseX);</span><br><span class="line">        Debug.Log(keyX);</span><br><span class="line"></span><br><span class="line">        // Rotate camera up and down</span><br><span class="line">        xRotation -= mouseY;</span><br><span class="line">        xRotation = Mathf.Clamp(xRotation, -30f, 30f);</span><br><span class="line">        transform.localRotation = Quaternion.Euler(xRotation, 0f, 0f);</span><br><span class="line"></span><br><span class="line">        // Rotate player left and right</span><br><span class="line">        player.Rotate(Vector3.up * (mouseX + keyX));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>耶(＾－＾)V</p>
<p>目前这个移动方式很满意，暂时就这样</p>
<p>下一步可以搭场景啦~</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity笔记 Project05 地形&amp;Asset</title>
    <url>/2020/12/02/unity-note-3/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.youtube.com/watch?v=ddy12WHqt-M&amp;ab_channel=UGuruz">https://www.youtube.com/watch?v=ddy12WHqt-M&amp;ab_channel=UGuruz</a></p>
</blockquote>
<p>试了试地形</p>
<img src="/images/2020/screencapture2020-12-02 PM8.19.30.jpg">

<p>加入人物，按Project04的方式移动</p>
<img src="/images/2020/screencapture2020-12-02 PM8.20.05.jpg">

<p>找了一组模型，能用！</p>
<img src="/images/2020/screencapture2020-12-02 PM9.53.36.jpg">

<p>感觉要起飞了🤩</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity笔记 Project02 点击移动</title>
    <url>/2020/12/02/unity-note/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.youtube.com/watch?v=y_zdW5LIX5o&ab_channel=PekkeDev">Click To Move with NavMesh - Unity 3D</a></p>
</blockquote>
<p>选中地面</p>
<p>窗口 → AI → 导航: Static &amp; Walkable</p>
<img src="/images/2020/screencapture2020-12-02_PM1.26.36.jpg">

<p>烘焙 → Bake</p>
<img src="/images/2020/screencapture2020-12-02_PM1.27.18.jpg">

<p>Player加组件Nav Mesh Agent</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using UnityEngine.AI;</span><br><span class="line"></span><br><span class="line">public class Player : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    NavMeshAgent agent;</span><br><span class="line"></span><br><span class="line">    // Start is called before the first frame update</span><br><span class="line">    void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        agent = GetComponent&lt;NavMeshAgent&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Update is called once per frame</span><br><span class="line">    void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        if(Input.GetMouseButtonDown(0))&#123;</span><br><span class="line">            RaycastHit hit;</span><br><span class="line">            Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);</span><br><span class="line">            if(Physics.Raycast(ray, out hit, Mathf.Infinity))&#123;</span><br><span class="line">                agent.SetDestination(hit.point);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Notion Offline记录</title>
    <url>/2021/02/12/notionn/</url>
    <content><![CDATA[<p>Notion的app突然Offline了</p>
<p>直接访问显示DNS_PROBE_FINISHED_NXDOMAIN</p>
<p>根据↓尝试</p>
<blockquote>
<p><a href="https://linmi.cc/6133.html">https://linmi.cc/6133.html</a></p>
</blockquote>
<p>1.加host<br>cmd中 open /etc<br>host中加一行 104.18.23.110 notion.so<br>此时可以ping通notion.so，但app仍是offline</p>
<p>2.改DNS<br>加119.29.29.29<br>114.114.114.114<br>没有用，改回默认</p>
<p>暂时还是不能用，等修复吧<br>哎，失去notion仿佛失去了半个脑子</p>
<p>更新：<br>然后发现github.io也访问不了了，是运营商的问题<br>DNS改成114.114.114.114后解决</p>
<p>再更新：<br>notion好了！我活了！</p>
]]></content>
      <categories>
        <category>Memo</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity Note - Project06 DoTween</title>
    <url>/2021/02/14/unity-note/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://www.youtube.com/watch?v=cKwz4xlQHmo&ab_channel=DilmerValecillos">Creating Dynamic animations with DOTween for Unity3d</a></p>
</blockquote>
<blockquote>
<p><a href="http://dotween.demigiant.com/documentation.php">DoTween Documentation</a></p>
</blockquote>
<ol>
<li><p>Add asset <a href="https://assetstore.unity.com/packages/tools/animation/dotween-hotween-v2-27676">DOTween (HOTween v2)</a></p>
</li>
<li><p>Add 3D Objects</p>
</li>
</ol>
<img src="/images/2021/screencapture2021-02-14 PM4.51.38.jpg">

<ol start="3">
<li>Move one way</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using DG.Tweening;</span><br><span class="line"></span><br><span class="line">public class DoTweenController : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    [SerializeField]</span><br><span class="line">    private Vector3 targetLocation = Vector3.zero;</span><br><span class="line"></span><br><span class="line">    [SerializeField, Range(1.0f, 10.0f)]</span><br><span class="line">    private float moveDuration = 1.0f;</span><br><span class="line"></span><br><span class="line">    [SerializeField]</span><br><span class="line">    private Ease moveEase = Ease.Linear;</span><br><span class="line"></span><br><span class="line">    [SerializeField]</span><br><span class="line">    private DoTweenType doTweenType = DoTweenType.MovementOneWay;</span><br><span class="line"></span><br><span class="line">    // Different types of animation</span><br><span class="line">    private enum DoTweenType</span><br><span class="line">    &#123;</span><br><span class="line">        MovementOneWay</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Start is called before the first frame update</span><br><span class="line">    void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        if(doTweenType == DoTweenType.MovementOneWay)&#123;</span><br><span class="line">            if(targetLocation == Vector3.zero)&#123;</span><br><span class="line">                // stay at original position</span><br><span class="line">                targetLocation = transform.position;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            transform.DOMove(targetLocation, moveDuration).SetEase(moveEase);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/images/2021/Feb-14-2021 17-43-05.gif">

<ol start="4">
<li>More types</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using DG.Tweening;</span><br><span class="line"></span><br><span class="line">public class DoTweenController : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    [SerializeField]</span><br><span class="line">    private Vector3 targetLocation = Vector3.zero;</span><br><span class="line"></span><br><span class="line">    [SerializeField, Range(1.0f, 10.0f)]</span><br><span class="line">    private float moveDuration = 1.0f;</span><br><span class="line"></span><br><span class="line">    [SerializeField]</span><br><span class="line">    private Ease moveEase = Ease.Linear;</span><br><span class="line"></span><br><span class="line">    [SerializeField]</span><br><span class="line">    private Color targetColor;</span><br><span class="line"></span><br><span class="line">    [SerializeField, Range(1.0f, 10.0f)]</span><br><span class="line">    private float colorChangeDuration = 1.0f;</span><br><span class="line"></span><br><span class="line">    [SerializeField, Range(0.1f, 10.0f)]</span><br><span class="line">    private float scaleMultiplier = 3.0f;</span><br><span class="line"></span><br><span class="line">    [SerializeField]</span><br><span class="line">    private DoTweenType doTweenType = DoTweenType.MovementOneWay;</span><br><span class="line"></span><br><span class="line">    // Different types of animation</span><br><span class="line">    private enum DoTweenType</span><br><span class="line">    &#123;</span><br><span class="line">        MovementOneWay,</span><br><span class="line">        MovementTwoWay,</span><br><span class="line">        MovementOneWayColorChange,</span><br><span class="line">        MomementOneWayColorChangeScaleChange</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Start is called before the first frame update</span><br><span class="line">    void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        if(targetLocation == Vector3.zero)&#123;</span><br><span class="line">                // stay at original position</span><br><span class="line">                targetLocation = transform.position;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        if(doTweenType == DoTweenType.MovementOneWay)&#123;</span><br><span class="line">            transform.DOMove(targetLocation, moveDuration).SetEase(moveEase);</span><br><span class="line">        &#125;</span><br><span class="line">        else if(doTweenType == DoTweenType.MovementTwoWay)&#123;</span><br><span class="line">            StartCoroutine(MoveWithBothWays());</span><br><span class="line">        &#125;</span><br><span class="line">        else if(doTweenType == DoTweenType.MovementOneWayColorChange)&#123;</span><br><span class="line">            // another way</span><br><span class="line">            DOTween.Sequence()</span><br><span class="line">                .Append(transform.DOMove(targetLocation, moveDuration).SetEase(moveEase))</span><br><span class="line">                .Append(transform.GetComponent&lt;Renderer&gt;().material.DOColor(targetColor, colorChangeDuration).SetEase(moveEase));</span><br><span class="line">        &#125;</span><br><span class="line">        else if(doTweenType == DoTweenType.MomementOneWayColorChangeScaleChange)&#123;</span><br><span class="line">            DOTween.Sequence()</span><br><span class="line">                .Append(transform.DOMove(targetLocation, moveDuration).SetEase(moveEase))</span><br><span class="line">                .Append(transform.GetComponent&lt;Renderer&gt;().material.DOColor(targetColor, colorChangeDuration).SetEase(moveEase))</span><br><span class="line">                .Append(transform.DOScale(scaleMultiplier, moveDuration).SetEase(moveEase));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private IEnumerator MoveWithBothWays()&#123;</span><br><span class="line">        // save original position</span><br><span class="line">        Vector3 originalLocation = transform.position;</span><br><span class="line"></span><br><span class="line">        // go to traget location</span><br><span class="line">        transform.DOMove(targetLocation, moveDuration).SetEase(moveEase);</span><br><span class="line"></span><br><span class="line">        // wait</span><br><span class="line">        yield return new WaitForSeconds(moveDuration);</span><br><span class="line"></span><br><span class="line">        // go to original location</span><br><span class="line">        transform.DOMove(originalLocation, moveDuration).SetEase(moveEase);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/images/2021/Feb-14-2021 18-16-16.gif">]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity Note - Project07 Scroll</title>
    <url>/2021/02/14/unity/</url>
    <content><![CDATA[<h1 id="Test-open-animation"><a href="#Test-open-animation" class="headerlink" title="Test open animation"></a>Test open animation</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using DG.Tweening;</span><br><span class="line"></span><br><span class="line">public class ReelController : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    [SerializeField]</span><br><span class="line">    private float radius = 0.1f; // Cylinder radius</span><br><span class="line"></span><br><span class="line">    [SerializeField]</span><br><span class="line">    private float length = 8.0f; // Quad length</span><br><span class="line"></span><br><span class="line">    [SerializeField]</span><br><span class="line">    private float innerHeight = 1.0f; // Quad height</span><br><span class="line"></span><br><span class="line">    [SerializeField]</span><br><span class="line">    private float outerHeight = 0.8f; // Cylinder height</span><br><span class="line"></span><br><span class="line">    [SerializeField]</span><br><span class="line">    private float openDuration = 1.0f;</span><br><span class="line"></span><br><span class="line">    [SerializeField]</span><br><span class="line">    private Ease moveEase = Ease.Linear;</span><br><span class="line"></span><br><span class="line">    [SerializeField]</span><br><span class="line">    private Transform leftCylinderTransform = null;</span><br><span class="line"></span><br><span class="line">    [SerializeField]</span><br><span class="line">    private Transform middleQuadTransform = null;</span><br><span class="line"></span><br><span class="line">    [SerializeField]</span><br><span class="line">    private Transform rightCylinderTransform = null;</span><br><span class="line"></span><br><span class="line">    void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        // set original position</span><br><span class="line">        middleQuadTransform.localScale = new Vector3(radius*2,innerHeight,0);</span><br><span class="line">        middleQuadTransform.position = new Vector3(0,0,radius);</span><br><span class="line"></span><br><span class="line">        leftCylinderTransform.localScale = new Vector3(radius*2,outerHeight,radius*2);</span><br><span class="line">        leftCylinderTransform.position = new Vector3(-radius,0,0);</span><br><span class="line"></span><br><span class="line">        rightCylinderTransform.localScale = new Vector3(radius*2,outerHeight,radius*2);</span><br><span class="line">        rightCylinderTransform.position = new Vector3(radius,0,0);</span><br><span class="line"></span><br><span class="line">        OpenReel();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void OpenReel()</span><br><span class="line">    &#123;</span><br><span class="line">        // open canvas</span><br><span class="line">        middleQuadTransform.DOScaleX(length + radius*2, openDuration).SetEase(moveEase);</span><br><span class="line"></span><br><span class="line">        // move cylinders</span><br><span class="line">        leftCylinderTransform.DOMoveX(leftCylinderTransform.position.x - length/2, openDuration).SetEase(moveEase);</span><br><span class="line">        rightCylinderTransform.DOMoveX(rightCylinderTransform.position.x + length/2, openDuration).SetEase(moveEase);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/images/2021/Feb-14-2021 20-11-48.gif">

<h1 id="Display-image"><a href="#Display-image" class="headerlink" title="Display image"></a>Display image</h1><p>Drag images to asset folder -&gt; Set type to Sprite -&gt; Apply</p>
<p>Canvas -&gt; Set Render Mode to World Space</p>
<p>Make sure all objects are positioned at (0, 0, 0)</p>
<img src="/images/2021/screencapture2021-02-14 PM9.43.21.jpg">

<p>Test size</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RectTransform rectTransfrom = GetComponentInChildren&lt;Image&gt;().GetComponent&lt;RectTransform&gt;();</span><br><span class="line"></span><br><span class="line">Debug.Log(&quot;rectTransfrom: &quot;+rectTransfrom);</span><br><span class="line">Debug.Log(&quot;rectTransfrom.rect: &quot;+rectTransfrom.rect);</span><br><span class="line">Debug.Log(&quot;rectTransfrom.sizeDelta: &quot;+rectTransfrom.sizeDelta);</span><br><span class="line"></span><br><span class="line">Rect rect = rectTransfrom.rect;</span><br><span class="line">rectTransfrom.sizeDelta = new Vector2(rect.width/rect.height*canvasHeight,canvasHeight);</span><br><span class="line"></span><br><span class="line">Debug.Log(&quot;rectTransfrom: &quot;+rectTransfrom);</span><br><span class="line">Debug.Log(&quot;rectTransfrom.rect: &quot;+rectTransfrom.rect);</span><br><span class="line">Debug.Log(&quot;rectTransfrom.sizeDelta: &quot;+rectTransfrom.sizeDelta);</span><br></pre></td></tr></table></figure>

<img src="/images/2021/screencapture2021-02-14 PM9.45.02.jpg">

<h1 id="Set-scroll-size"><a href="#Set-scroll-size" class="headerlink" title="Set scroll size"></a>Set scroll size</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using UnityEngine.UI;</span><br><span class="line">using DG.Tweening;</span><br><span class="line"></span><br><span class="line">public class ReelController : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    [SerializeField]</span><br><span class="line">    private float canvasHeight = 1000;</span><br><span class="line"></span><br><span class="line">    [SerializeField]</span><br><span class="line">    private float cylinderHeight = 600;</span><br><span class="line"></span><br><span class="line">    [SerializeField]</span><br><span class="line">    private float cylinderRadius = 30;</span><br><span class="line"></span><br><span class="line">    [SerializeField]</span><br><span class="line">    private float openDuration = 1.0f;</span><br><span class="line"></span><br><span class="line">    [SerializeField]</span><br><span class="line">    private Ease moveEase = Ease.Linear;</span><br><span class="line"></span><br><span class="line">    [SerializeField]</span><br><span class="line">    private Transform leftCylinderTransform = null;</span><br><span class="line"></span><br><span class="line">    [SerializeField]</span><br><span class="line">    private Transform rightCylinderTransform = null;</span><br><span class="line"></span><br><span class="line">    void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        // get image rectTransfrom</span><br><span class="line">        RectTransform rectTransfrom = GetComponentInChildren&lt;Image&gt;().GetComponent&lt;RectTransform&gt;();</span><br><span class="line">        // get original image size</span><br><span class="line">        Rect rect = rectTransfrom.rect;</span><br><span class="line">        // scale to default height</span><br><span class="line">        float canvasWidth = rect.width / rect.height * canvasHeight;</span><br><span class="line">        rectTransfrom.sizeDelta = new Vector2(canvasWidth, canvasHeight);</span><br><span class="line"></span><br><span class="line">        // set original position</span><br><span class="line">        leftCylinderTransform.localScale = new Vector3(cylinderRadius*2, cylinderHeight, cylinderRadius*2);</span><br><span class="line">        leftCylinderTransform.position = new Vector3(-cylinderRadius - canvasWidth/2,0,0);</span><br><span class="line"></span><br><span class="line">        rightCylinderTransform.localScale = new Vector3(cylinderRadius*2, cylinderHeight, cylinderRadius*2);</span><br><span class="line">        rightCylinderTransform.position = new Vector3(cylinderRadius + canvasWidth/2,0,0);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/images/2021/screencapture2021-02-14 PM10.09.59.jpg">

<h1 id="Scroll-animation"><a href="#Scroll-animation" class="headerlink" title="Scroll animation"></a>Scroll animation</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using UnityEngine.UI;</span><br><span class="line">using DG.Tweening;</span><br><span class="line"></span><br><span class="line">public class ScrollController : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    [SerializeField]</span><br><span class="line">    private float canvasHeight = 1000;</span><br><span class="line"></span><br><span class="line">    [SerializeField]</span><br><span class="line">    private float cylinderHeight = 600;</span><br><span class="line"></span><br><span class="line">    [SerializeField]</span><br><span class="line">    private float cylinderRadius = 30;</span><br><span class="line"></span><br><span class="line">    [SerializeField]</span><br><span class="line">    private float openDuration = 1.0f;</span><br><span class="line"></span><br><span class="line">    [SerializeField]</span><br><span class="line">    private Ease moveEase = Ease.Linear;</span><br><span class="line"></span><br><span class="line">    [SerializeField]</span><br><span class="line">    private Transform leftCylinderTransform = null;</span><br><span class="line"></span><br><span class="line">    [SerializeField]</span><br><span class="line">    private Transform rightCylinderTransform = null;</span><br><span class="line"></span><br><span class="line">    void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        // Open();</span><br><span class="line"></span><br><span class="line">        OpenAnimation();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void Open()</span><br><span class="line">    &#123;</span><br><span class="line">        // get image rectTransfrom</span><br><span class="line">        RectTransform rectTransfrom = GetComponentInChildren&lt;Image&gt;().GetComponent&lt;RectTransform&gt;();</span><br><span class="line">        // get original image size</span><br><span class="line">        Rect rect = rectTransfrom.rect;</span><br><span class="line">        // scale to default height</span><br><span class="line">        float canvasWidth = rect.width / rect.height * canvasHeight;</span><br><span class="line">        rectTransfrom.sizeDelta = new Vector2(canvasWidth, canvasHeight);</span><br><span class="line"></span><br><span class="line">        // set original position</span><br><span class="line">        leftCylinderTransform.localScale = new Vector3(cylinderRadius*2, cylinderHeight, cylinderRadius*2);</span><br><span class="line">        leftCylinderTransform.position = new Vector3(-cylinderRadius - canvasWidth/2,0,0);</span><br><span class="line"></span><br><span class="line">        rightCylinderTransform.localScale = new Vector3(cylinderRadius*2, cylinderHeight, cylinderRadius*2);</span><br><span class="line">        rightCylinderTransform.position = new Vector3(cylinderRadius + canvasWidth/2,0,0);</span><br><span class="line"></span><br><span class="line">        Debug.Log(&quot;Scroll opened: &quot; + rectTransfrom.rect);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void OpenAnimation()</span><br><span class="line">    &#123;</span><br><span class="line">        // get image rectTransfrom</span><br><span class="line">        RectTransform rectTransfrom = GetComponentInChildren&lt;Image&gt;().GetComponent&lt;RectTransform&gt;();</span><br><span class="line">        // get original image size</span><br><span class="line">        Rect rect = rectTransfrom.rect;</span><br><span class="line"></span><br><span class="line">        // set width to 0</span><br><span class="line">        rectTransfrom.DOScaleX(0, 0).SetEase(moveEase);</span><br><span class="line"></span><br><span class="line">        // scale to default height</span><br><span class="line">        float canvasWidth = rect.width / rect.height * canvasHeight;</span><br><span class="line">        // open canvas</span><br><span class="line">        float scaleX = canvasWidth/rect.width;</span><br><span class="line">        float scaleY = canvasHeight/rect.height;</span><br><span class="line">        rectTransfrom.DOScale(new Vector2(scaleX, scaleY), openDuration).SetEase(moveEase);</span><br><span class="line"></span><br><span class="line">        // move cylinders</span><br><span class="line">        leftCylinderTransform.localScale = new Vector3(cylinderRadius*2, cylinderHeight, cylinderRadius*2);</span><br><span class="line">        leftCylinderTransform.DOMoveX(leftCylinderTransform.position.x - canvasWidth/2, openDuration).SetEase(moveEase);</span><br><span class="line"></span><br><span class="line">        rightCylinderTransform.localScale = new Vector3(cylinderRadius*2, cylinderHeight, cylinderRadius*2);</span><br><span class="line">        rightCylinderTransform.DOMoveX(rightCylinderTransform.position.x + canvasWidth/2, openDuration).SetEase(moveEase);</span><br><span class="line"></span><br><span class="line">        Debug.Log(&quot;Scroll opened with animation: &quot; + rectTransfrom.rect);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/images/2021/Feb-14-2021 22-58-33.gif">]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity Note - Project09 Movement</title>
    <url>/2021/02/15/unity-09/</url>
    <content><![CDATA[<p>最终想要做的移动方式：</p>
<ul>
<li>点击地面导航</li>
<li>拖拽旋转</li>
<li>缩放平移</li>
<li>点击画导航</li>
</ul>
<p>交互方式参考：</p>
<blockquote>
<p><a href="https://sketchfab.com/3d-models/richards-art-gallery-audio-tour-0e3e19faa6474fd5974e6a7ed1b221d8">https://sketchfab.com/3d-models/richards-art-gallery-audio-tour-0e3e19faa6474fd5974e6a7ed1b221d8</a></p>
</blockquote>
<h1 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h1><h2 id="点击移动"><a href="#点击移动" class="headerlink" title="点击移动"></a>点击移动</h2><p>参考Project02，AI导航+NavMeshAgent</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(Input.GetMouseButtonDown(0))&#123;</span><br><span class="line">  RaycastHit hit;</span><br><span class="line">  Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);</span><br><span class="line">  if(Physics.Raycast(ray, out hit, Mathf.Infinity))&#123;</span><br><span class="line">    agent.SetDestination(hit.point);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>判断落点，只有是地面才移动（地面打Tag）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(Input.GetMouseButtonDown(0))&#123;</span><br><span class="line">	RaycastHit hit;</span><br><span class="line">	Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);</span><br><span class="line">	if(Physics.Raycast(ray, out hit, Mathf.Infinity))&#123;</span><br><span class="line">		if(hit.transform.tag == &quot;Floor&quot;)&#123;</span><br><span class="line">			agent.SetDestination(hit.point);</span><br><span class="line">		&#125; </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>点击特效</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// click to navigate</span><br><span class="line">if(Input.GetMouseButtonDown(0))&#123;</span><br><span class="line">    RaycastHit hit;</span><br><span class="line">    Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);</span><br><span class="line">    if(Physics.Raycast(ray, out hit, Mathf.Infinity))&#123;</span><br><span class="line">        // move when hit floor</span><br><span class="line">        if(hit.transform.tag == &quot;Floor&quot;)&#123;</span><br><span class="line">            agent.SetDestination(hit.point);</span><br><span class="line"></span><br><span class="line">            // click effect</span><br><span class="line">            GameObject clickEffectObject = Instantiate(clickEffect);</span><br><span class="line">            clickEffectObject.transform.position = hit.point;</span><br><span class="line">            Destroy(clickEffectObject, 0.5f);</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="拖拽旋转视角"><a href="#拖拽旋转视角" class="headerlink" title="拖拽旋转视角"></a>拖拽旋转视角</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// get mouse position</span><br><span class="line">float mouseX = Input.GetAxis(&quot;Mouse X&quot;) * mouseSensitivity * Time.deltaTime;</span><br><span class="line">float mouseY = Input.GetAxis(&quot;Mouse Y&quot;) * mouseSensitivity * Time.deltaTime;</span><br><span class="line"></span><br><span class="line">// rotate camera up and down</span><br><span class="line">cameraRotation -= mouseY;</span><br><span class="line">cameraRotation = Mathf.Clamp(cameraRotation, -30f, 30f);</span><br><span class="line">cameraTransform.localRotation = Quaternion.Euler(cameraRotation, 0f, 0f);</span><br><span class="line"></span><br><span class="line">// rotate player left and right</span><br><span class="line">transform.Rotate(Vector3.up * (mouseX));</span><br></pre></td></tr></table></figure>

<p>此时长按拖拽和点击寻路会混，加一个mouseDownCount计数</p>
<h2 id="缩放前后移动"><a href="#缩放前后移动" class="headerlink" title="缩放前后移动"></a>缩放前后移动</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// stop navigation</span><br><span class="line">agent.ResetPath();</span><br><span class="line"></span><br><span class="line">// scroll to move forward and backward</span><br><span class="line">Vector3 move = transform.forward * Input.GetAxis(&quot;Mouse ScrollWheel&quot;) * scrollSensitivity;</span><br><span class="line">agent.Move(move * Time.deltaTime);</span><br></pre></td></tr></table></figure>

<p>！这里一定要先停止寻路，否则会乱抖</p>
<h1 id="最终"><a href="#最终" class="headerlink" title="最终"></a>最终</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class PlayerController : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    [SerializeField, Range(0f,100f)]</span><br><span class="line">    private float scrollSensitivity = 10f;</span><br><span class="line"></span><br><span class="line">    [SerializeField, Range(0f,500f)]</span><br><span class="line">    private float mouseSensitivity = 200f;</span><br><span class="line"></span><br><span class="line">    [SerializeField]</span><br><span class="line">    private Transform cameraTransform = null;</span><br><span class="line"></span><br><span class="line">    private float cameraRotation = 0f;</span><br><span class="line">    private int mouseDownCount = 0;</span><br><span class="line"></span><br><span class="line">    UnityEngine.AI.NavMeshAgent agent;</span><br><span class="line"></span><br><span class="line">    GameObject clickEffect;</span><br><span class="line"></span><br><span class="line">    void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        agent = GetComponent&lt;UnityEngine.AI.NavMeshAgent&gt;();</span><br><span class="line"></span><br><span class="line">        clickEffect = Resources.Load&lt;GameObject&gt;(&quot;Prefabs/ClickEffect&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        if(Input.GetMouseButtonUp(0))&#123;</span><br><span class="line">            // if is click</span><br><span class="line">            if(mouseDownCount &lt; 2)&#123;</span><br><span class="line">                // click to navigate</span><br><span class="line">                RaycastHit hit;</span><br><span class="line">                Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);</span><br><span class="line">                if(Physics.Raycast(ray, out hit, Mathf.Infinity))&#123;</span><br><span class="line">                    // move when hit floor</span><br><span class="line">                    if(hit.transform.tag == &quot;Floor&quot;)&#123;</span><br><span class="line">                        agent.SetDestination(hit.point);</span><br><span class="line"></span><br><span class="line">                        // click effect</span><br><span class="line">                        GameObject clickEffectObject = Instantiate(clickEffect);</span><br><span class="line">                        clickEffectObject.transform.position = hit.point;</span><br><span class="line">                        Destroy(clickEffectObject, 1);</span><br><span class="line">                    &#125; </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            mouseDownCount = 0;</span><br><span class="line">        &#125;else if(Input.GetAxis(&quot;Mouse ScrollWheel&quot;) != 0)&#123;</span><br><span class="line">            // stop navigation</span><br><span class="line">            agent.ResetPath();</span><br><span class="line"></span><br><span class="line">            // scroll to move forward and backward</span><br><span class="line">            Vector3 move = transform.forward * Input.GetAxis(&quot;Mouse ScrollWheel&quot;) * scrollSensitivity;</span><br><span class="line">            agent.Move(move * Time.deltaTime);</span><br><span class="line">        &#125;else if(Input.GetMouseButton(0))&#123;</span><br><span class="line">            // stop navigation</span><br><span class="line">            agent.ResetPath();</span><br><span class="line"></span><br><span class="line">            // get mouse position</span><br><span class="line">            float mouseX = Input.GetAxis(&quot;Mouse X&quot;) * mouseSensitivity * Time.deltaTime;</span><br><span class="line">            float mouseY = Input.GetAxis(&quot;Mouse Y&quot;) * mouseSensitivity * Time.deltaTime;</span><br><span class="line"></span><br><span class="line">            // rotate camera up and down</span><br><span class="line">            cameraRotation -= mouseY;</span><br><span class="line">            cameraRotation = Mathf.Clamp(cameraRotation, -30f, 30f);</span><br><span class="line">            cameraTransform.localRotation = Quaternion.Euler(cameraRotation, 0f, 0f);</span><br><span class="line"></span><br><span class="line">            // rotate player left and right</span><br><span class="line">            transform.Rotate(Vector3.up * (mouseX));</span><br><span class="line"></span><br><span class="line">            mouseDownCount++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>点击寻路</p>
<img src="/images/2021/Feb-16-2021 16-49-06.gif">

<p>滚动前后平移</p>
<img src="/images/2021/Feb-16-2021 16-49-24.gif">

<p>拖拽旋转视角</p>
<img src="/images/2021/Feb-16-2021 16-49-34.gif">

<p>且寻路过程中，滚动或拖拽均打断寻路</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity Note - Project08 Gallery</title>
    <url>/2021/02/15/unity/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://learn.unity.com/project/create-a-personal-3d-gallery-project-with-unity">Create a Personal 3D Gallery Project with Unity</a></p>
</blockquote>
<ol>
<li><p>Use the [first person controller](First Person All-in-One) in asset store</p>
</li>
<li><p>Model scale ~= Cube 40*40</p>
</li>
</ol>
<img src="/images/2021/screencapture2021-02-15 PM6.13.09.jpg">

<ol start="3">
<li><p>Add Component-&gt;Physic-&gt;Mesh Collider to models</p>
</li>
<li><p>Light: turn off shadow &amp; increase range to 20</p>
</li>
<li><p>Sound effect for different walking materials</p>
<p>Change Material in Mesh Collider, not Mesh Renderer</p>
</li>
</ol>
<img src="/images/2021/screencapture2021-02-15 PM6.26.31.jpg">

<ol start="6">
<li><p>Add UI-&gt;Text</p>
<p>When setting Rect Transform, press Alt(Option) to set position as well</p>
</li>
<li><p>Add Tag to Text</p>
</li>
<li><p>Add Image: Drag jpg onto Plane</p>
</li>
<li><p>Close to display text</p>
</li>
</ol>
<p>drag script onto image</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using UnityEngine.UI;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class Proximity : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public string newTitle;</span><br><span class="line">    public string newAuthor;</span><br><span class="line">    public string newDesc;</span><br><span class="line">    private Transform other;</span><br><span class="line">    private Text myTitle;</span><br><span class="line">    private Text myAuthor;</span><br><span class="line">    private Text myDesc;</span><br><span class="line">    private float dist;</span><br><span class="line">    private GameObject player;</span><br><span class="line">    private GameObject message1;</span><br><span class="line">    private GameObject message2;</span><br><span class="line">    private GameObject message3;</span><br><span class="line">    private bool check;</span><br><span class="line"></span><br><span class="line">    // Start is called before the first frame update</span><br><span class="line">    void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        player = GameObject.FindWithTag(&quot;Player&quot;);</span><br><span class="line">        other = player.GetComponent&lt;Transform&gt;();</span><br><span class="line">        message1 = GameObject.FindWithTag(&quot;ArtTitle&quot;);</span><br><span class="line">        message2 = GameObject.FindWithTag(&quot;ArtAuthor&quot;);</span><br><span class="line">        message3 = GameObject.FindWithTag(&quot;ArtDescription&quot;);</span><br><span class="line">        myTitle = message1.GetComponent&lt;Text&gt;();</span><br><span class="line">        myTitle.text = &quot;&quot;;</span><br><span class="line">        myAuthor = message2.GetComponent&lt;Text&gt;();</span><br><span class="line">        myAuthor.text = &quot;&quot;;</span><br><span class="line">        myDesc = message3.GetComponent&lt;Text&gt;();</span><br><span class="line">        myDesc.text = &quot;&quot;;</span><br><span class="line">        check = false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Update is called once per frame</span><br><span class="line">    void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        if (other)</span><br><span class="line">        &#123;</span><br><span class="line">            dist = Vector3.Distance(transform.position, other.position);</span><br><span class="line">            print(&quot;Distance to player: &quot; + dist);</span><br><span class="line">            if (dist &lt; 4)</span><br><span class="line">            &#123;</span><br><span class="line">                myTitle.text = newTitle;</span><br><span class="line">                myAuthor.text = newAuthor;</span><br><span class="line">                myDesc.text = newDesc;</span><br><span class="line">                check = true;</span><br><span class="line">            &#125;</span><br><span class="line">            if (dist &gt; 4 &amp;&amp; check == true)</span><br><span class="line">            &#123;</span><br><span class="line">                Start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Project V0.1 Record</title>
    <url>/2021/02/16/unity/</url>
    <content><![CDATA[<p>做了个初版试试水~😃</p>
<h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><h2 id="点击寻路"><a href="#点击寻路" class="headerlink" title="点击寻路"></a>点击寻路</h2><img src="/images/2021/Feb-16-2021 18-29-31.gif">

<h2 id="靠近显示介绍"><a href="#靠近显示介绍" class="headerlink" title="靠近显示介绍"></a>靠近显示介绍</h2><img src="/images/2021/Feb-16-2021 18-29-44.gif">

<h2 id="鼠标滚动前后平移"><a href="#鼠标滚动前后平移" class="headerlink" title="鼠标滚动前后平移"></a>鼠标滚动前后平移</h2><img src="/images/2021/Feb-16-2021 18-30-18.gif">

<h2 id="键盘前后左右平移"><a href="#键盘前后左右平移" class="headerlink" title="键盘前后左右平移"></a>键盘前后左右平移</h2><img src="/images/2021/Feb-16-2021 18-30-32.gif">

<h2 id="鼠标拖拽旋转视角"><a href="#鼠标拖拽旋转视角" class="headerlink" title="鼠标拖拽旋转视角"></a>鼠标拖拽旋转视角</h2><img src="/images/2021/Feb-16-2021 18-30-55.gif">

<h1 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h1><img src="/images/2021/screencapture2021-02-16 PM6.27.11.jpg">

<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="PlayerController"><a href="#PlayerController" class="headerlink" title="PlayerController"></a>PlayerController</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class PlayerController : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    [SerializeField, Range(0f,500f)]</span><br><span class="line">    private float mouseLookSensitivity = 200f;</span><br><span class="line"></span><br><span class="line">    [SerializeField, Range(0f,100f)]</span><br><span class="line">    private float mouseMoveSensitivity = 10f;</span><br><span class="line"></span><br><span class="line">    [SerializeField, Range(0f,10f)]</span><br><span class="line">    private float keyMoveSensitivity = 5f;</span><br><span class="line"></span><br><span class="line">    [SerializeField]</span><br><span class="line">    private Transform cameraTransform = null;</span><br><span class="line"></span><br><span class="line">    private float cameraRotation = 0f;</span><br><span class="line">    private int mouseDownCount = 0;</span><br><span class="line"></span><br><span class="line">    UnityEngine.AI.NavMeshAgent agent;</span><br><span class="line"></span><br><span class="line">    GameObject clickEffect;</span><br><span class="line"></span><br><span class="line">    void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        agent = GetComponent&lt;UnityEngine.AI.NavMeshAgent&gt;();</span><br><span class="line"></span><br><span class="line">        clickEffect = Resources.Load&lt;GameObject&gt;(&quot;Prefabs/ClickEffect&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        if(Input.GetMouseButtonUp(0))&#123;</span><br><span class="line">            // if is click</span><br><span class="line">            if(mouseDownCount &lt; 2)&#123;</span><br><span class="line">                // click to navigate</span><br><span class="line">                RaycastHit hit;</span><br><span class="line">                Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);</span><br><span class="line">                if(Physics.Raycast(ray, out hit, Mathf.Infinity))&#123;</span><br><span class="line">                    // move when hit floor</span><br><span class="line">                    if(hit.transform.tag == &quot;Floor&quot;)&#123;</span><br><span class="line">                        agent.SetDestination(hit.point);</span><br><span class="line"></span><br><span class="line">                        // click effect</span><br><span class="line">                        GameObject clickEffectObject = Instantiate(clickEffect);</span><br><span class="line">                        clickEffectObject.transform.position = hit.point;</span><br><span class="line">                        Destroy(clickEffectObject, 1);</span><br><span class="line">                    &#125; </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            mouseDownCount = 0;</span><br><span class="line"></span><br><span class="line">        &#125;else if(Input.GetMouseButton(0))&#123;</span><br><span class="line">            // stop navigation</span><br><span class="line">            agent.ResetPath();</span><br><span class="line"></span><br><span class="line">            // get mouse position</span><br><span class="line">            float mouseX = Input.GetAxis(&quot;Mouse X&quot;) * mouseLookSensitivity * Time.deltaTime;</span><br><span class="line">            float mouseY = Input.GetAxis(&quot;Mouse Y&quot;) * mouseLookSensitivity * Time.deltaTime;</span><br><span class="line"></span><br><span class="line">            // rotate camera up and down</span><br><span class="line">            cameraRotation -= mouseY;</span><br><span class="line">            cameraRotation = Mathf.Clamp(cameraRotation, -30f, 30f);</span><br><span class="line">            cameraTransform.localRotation = Quaternion.Euler(cameraRotation, 0f, 0f);</span><br><span class="line"></span><br><span class="line">            // rotate player left and right</span><br><span class="line">            transform.Rotate(Vector3.up * (mouseX));</span><br><span class="line"></span><br><span class="line">            mouseDownCount++;</span><br><span class="line"></span><br><span class="line">        &#125;else if(Input.GetAxis(&quot;Mouse ScrollWheel&quot;)!=0 || Input.GetAxis(&quot;Horizontal&quot;)!=0 || Input.GetAxis(&quot;Vertical&quot;)!=0)&#123;</span><br><span class="line">            // stop navigation</span><br><span class="line">            agent.ResetPath();</span><br><span class="line"></span><br><span class="line">            // mouse scroll input</span><br><span class="line">            float mouseV = Input.GetAxis(&quot;Mouse ScrollWheel&quot;);</span><br><span class="line">            // keyborad input</span><br><span class="line">            float keyV = Input.GetAxis(&quot;Vertical&quot;);</span><br><span class="line">            float keyH = Input.GetAxis(&quot;Horizontal&quot;);</span><br><span class="line"></span><br><span class="line">            Vector3 move = transform.forward * (mouseV * mouseMoveSensitivity + keyV * keyMoveSensitivity)</span><br><span class="line">                        + transform.right * keyH * keyMoveSensitivity;</span><br><span class="line"></span><br><span class="line">            agent.Move(move * Time.deltaTime);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ArtTextController"><a href="#ArtTextController" class="headerlink" title="ArtTextController"></a>ArtTextController</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using UnityEngine.UI;</span><br><span class="line"></span><br><span class="line">public class ArtTextController : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    [SerializeField]</span><br><span class="line">    private string title;</span><br><span class="line"></span><br><span class="line">    [SerializeField]</span><br><span class="line">    private string description;</span><br><span class="line"></span><br><span class="line">    [SerializeField, Range(0f,10f)]</span><br><span class="line">    private float displayTextDistance = 5f;</span><br><span class="line"></span><br><span class="line">    private Transform playerTransform;</span><br><span class="line"></span><br><span class="line">    private Text displayArtTitle;</span><br><span class="line">    private Text displayArtDescription;</span><br><span class="line"></span><br><span class="line">    private float dist;</span><br><span class="line"></span><br><span class="line">    private bool check;</span><br><span class="line"></span><br><span class="line">    void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        // get player transform</span><br><span class="line">        playerTransform = GameObject.FindWithTag(&quot;Player&quot;).GetComponent&lt;Transform&gt;();</span><br><span class="line"></span><br><span class="line">        // get UI text</span><br><span class="line">        displayArtTitle = GameObject.FindWithTag(&quot;ArtTitle&quot;).GetComponent&lt;Text&gt;();</span><br><span class="line">        displayArtDescription = GameObject.FindWithTag(&quot;ArtDescription&quot;).GetComponent&lt;Text&gt;();</span><br><span class="line"></span><br><span class="line">        // set default text</span><br><span class="line">        displayArtTitle.text = &quot;&quot;;</span><br><span class="line">        displayArtDescription.text = &quot;&quot;;</span><br><span class="line"></span><br><span class="line">        check = false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Update is called once per frame</span><br><span class="line">    void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        if(playerTransform)</span><br><span class="line">        &#123;</span><br><span class="line">            // distance between art and player</span><br><span class="line">            dist = Vector3.Distance(transform.position, playerTransform.position);</span><br><span class="line">            if (dist &lt; displayTextDistance)</span><br><span class="line">            &#123;</span><br><span class="line">                displayArtTitle.text = title;</span><br><span class="line">                displayArtDescription.text = description;</span><br><span class="line">                check = true;</span><br><span class="line">            &#125;</span><br><span class="line">            // turn off display</span><br><span class="line">            if (dist &gt; displayTextDistance &amp;&amp; check == true)</span><br><span class="line">            &#123;</span><br><span class="line">                Start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="构建测试"><a href="#构建测试" class="headerlink" title="构建测试"></a>构建测试</h1><p>MacOS 没问题</p>
<p>Android 试了一下，场景没问题，操作混乱</p>
<p>​    安卓导出参考<a href="https://coconutnutx.github.io/2020/09/26/note-arfoundation-01/">AR Foundation笔记01 安卓Setup</a></p>
<p>​    目前的操作方式针对电脑，手机端以后再看要不要做</p>
<p>WebGL 整了半天</p>
<p>​    参考<a href="https://www.youtube.com/watch?v=G7TK0-vbEYc&ab_channel=UGuruz">WebGL Export in Unity 2020</a></p>
<p>​    成功发布到itch.io，但是靠近显示介绍没有了？</p>
<p>​    本地Firefox打开，也没有</p>
<h2 id="WebGL-Debug"><a href="#WebGL-Debug" class="headerlink" title="WebGL Debug"></a>WebGL Debug</h2><p>Unity里跑没问题</p>
<p>Debug.Log人物和画的距离，可以显示，所以可能是</p>
<p>​    UI显示出了问题</p>
<p>​    文字没有赋值成功</p>
<p>​    位置偏了</p>
<p>给Text设了默认值，再试</p>
<img src="/images/2021/screencapture2021-02-16 PM9.59.05.jpg">

<p>默认值显示了</p>
<img src="/images/2021/screencapture2021-02-16 PM9.59.12.jpg">

<p>靠近没有了</p>
<p>所以应该是位置不对</p>
<p>不过后面准备改显示方法，暂时MARK，以后放UI的时候也有可能碰到这个问题</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Project V0.1.1 Record - UI,Event</title>
    <url>/2021/02/17/unity/</url>
    <content><![CDATA[<h1 id="Canvas大小"><a href="#Canvas大小" class="headerlink" title="Canvas大小"></a>Canvas大小</h1><blockquote>
<p><a href="https://www.youtube.com/watch?v=OKK69bmjmJE&amp;ab_channel=Creagines">https://www.youtube.com/watch?v=OKK69bmjmJE&amp;ab_channel=Creagines</a></p>
</blockquote>
<p>Canvas Scaler-&gt; 缩放模式 -&gt; 屏幕大小缩放</p>
<p>解决了上次文字飞掉的问题</p>
<p>可以下一步啦</p>
<img src="/images/2021/screencapture2021-02-17 PM5.26.42.jpg">

<h1 id="点击按钮"><a href="#点击按钮" class="headerlink" title="点击按钮"></a>点击按钮</h1><blockquote>
<p><a href="https://www.cnblogs.com/Peng18233754457/p/7792442.html">https://www.cnblogs.com/Peng18233754457/p/7792442.html</a></p>
</blockquote>
<p>一开始事件用的是Button的onClick()</p>
<p>发现Event System更好用</p>
<img src="/images/2021/screencapture2021-02-17 PM8.10.25.jpg">

<ul>
<li>Button上鼠标单击()里+ （其它事件可以添加组件触发）</li>
<li>EventTest.cs中 public void A()</li>
</ul>
<p>Button这样就可以了</p>
<p>3D物体要使用，还要先给Main Camera加一个Physics Raycaster组件</p>
<h1 id="点击寻路"><a href="#点击寻路" class="headerlink" title="点击寻路"></a>点击寻路</h1><p>Player监听点击实现，更改寻路</p>
<blockquote>
<p><a href="https://www.youtube.com/watch?v=wlo-ZvV3ovg&amp;ab_channel=JasonWeimann">https://www.youtube.com/watch?v=wlo-ZvV3ovg&amp;ab_channel=JasonWeimann</a></p>
</blockquote>
<p>参考↑通过Action实现，避免到处reference</p>
<h1 id="寻路转向"><a href="#寻路转向" class="headerlink" title="寻路转向"></a>寻路转向</h1><p>寻路完成后转向board</p>
<p>设置了一个isNavigating变量，记录状态</p>
<p>到达后用DOTWeen转向</p>
<h1 id="寻路打断"><a href="#寻路打断" class="headerlink" title="寻路打断"></a>寻路打断</h1><p>每次有输入时，打断寻路，同时将设置成false</p>
<p>一个小问题是，第一次点击board时将isNavigating设成true，但同时Input.GetMouseButtonUp(0)也会为true，所以额外用了一个firstClick判断是否为第一次点击</p>
<p>最后相关代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">private bool isNavigating = false;</span><br><span class="line">private bool firstClick = true;</span><br><span class="line">private Vector3 turnPosition;</span><br><span class="line"></span><br><span class="line">void Update()</span><br><span class="line">&#123;</span><br><span class="line">  if(Input.GetMouseButtonUp(0))&#123;</span><br><span class="line">    if(isNavigating)&#123;</span><br><span class="line">      if(firstClick)&#123;</span><br><span class="line">        firstClick = false;</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">        isNavigating = false;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">      firstClick = true; </span><br><span class="line">      // 这里可能有点点问题，isNavigating设成false之后，要下一次Update才能检测到，但是Update调得很快，基本感觉不到，所以暂时就这样写了，看着舒服些。但MARK一下，以后如果有问题，再把这里拆出去单独判断。</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">		// ...</span><br><span class="line"></span><br><span class="line">  &#125;else if(Input.GetMouseButton(0))&#123;</span><br><span class="line">    isNavigating = false;</span><br><span class="line"></span><br><span class="line">   // ...</span><br><span class="line"></span><br><span class="line">  &#125;else if(Input.GetAxis(&quot;Mouse ScrollWheel&quot;)!=0 || Input.GetAxis(&quot;Horizontal&quot;)!=0 || Input.GetAxis(&quot;Vertical&quot;)!=0)&#123;</span><br><span class="line">    isNavigating = false;</span><br><span class="line"></span><br><span class="line">    // ...</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void SetNewDestination(Vector3 destination, Vector3 boardPosition) &#123;</span><br><span class="line">  // set new destination</span><br><span class="line">  agent.SetDestination(destination);</span><br><span class="line"></span><br><span class="line">  // set turn destination</span><br><span class="line">  turnPosition = boardPosition;</span><br><span class="line">  isNavigating = true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="02-19-update"><a href="#02-19-update" class="headerlink" title="02.19 update"></a>02.19 update</h2><p>后续做导游时发现，点击UI寻路按钮时，事件发生的顺序是：</p>
<ul>
<li>GetMouseButton</li>
<li>Set Destination</li>
<li>GetMouseButtonUp</li>
</ul>
<p>而再次GetMouseButton和GetMouseButtonUp都需要打断，用之前的方法很混乱</p>
<p>于是改成三种状态，只能按顺序切换</p>
<ol>
<li><p>GuideStatus.Static 默认状态</p>
</li>
<li><p>GuideStatus.Ready 设置寻路后，Static-&gt;Ready</p>
</li>
<li><p>GuideStatus.On</p>
<ul>
<li>Ready状态获取到一次GetMouseButtonUp，变成On</li>
<li>On状态时，GetMouseButton或GetMouseButtonUp均会打断寻路，变成Static</li>
<li>On状态到达目的地后，变成Static</li>
</ul>
</li>
</ol>
<p>测试目前没什么问题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">private Vector3 turnPosition;</span><br><span class="line">private GuideStatus currentGuideStatus = GuideStatus.Static;</span><br><span class="line">private enum GuideStatus</span><br><span class="line">&#123;</span><br><span class="line">  Static,</span><br><span class="line">  Ready,</span><br><span class="line">  On</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Update()</span><br><span class="line">&#123;</span><br><span class="line">  if(Input.GetMouseButtonUp(0))&#123;</span><br><span class="line">    // if is click</span><br><span class="line">    if(mouseDownCount &lt; 2)&#123;</span><br><span class="line">      if(currentGuideStatus == GuideStatus.Ready)&#123;</span><br><span class="line">        currentGuideStatus = GuideStatus.On;</span><br><span class="line">      &#125;else if(currentGuideStatus == GuideStatus.On)&#123;</span><br><span class="line">        currentGuideStatus = GuideStatus.Static;</span><br><span class="line">        Debug.Log(&quot;[guide] disrupted by GetMouseButtonUp-Click&quot;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      // ...</span><br><span class="line">    mouseDownCount = 0;</span><br><span class="line"></span><br><span class="line">  &#125;else if(Input.GetMouseButton(0))&#123;</span><br><span class="line">    if(currentGuideStatus==GuideStatus.On)&#123;</span><br><span class="line">      currentGuideStatus = GuideStatus.Static;</span><br><span class="line">      Debug.Log(&quot;[guide] disrupted by GetMouseButton&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // ...</span><br><span class="line"></span><br><span class="line">    mouseDownCount++;</span><br><span class="line"></span><br><span class="line">  &#125;else if(Input.GetAxis(&quot;Mouse ScrollWheel&quot;)!=0 || Input.GetAxis(&quot;Horizontal&quot;)!=0 || Input.GetAxis(&quot;Vertical&quot;)!=0)&#123;</span><br><span class="line">      if(currentGuideStatus==GuideStatus.On)&#123;</span><br><span class="line">        currentGuideStatus = GuideStatus.Static;</span><br><span class="line">        Debug.Log(&quot;[guide] disrupted by Movement&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      // ...</span><br><span class="line">    </span><br><span class="line">  &#125;else&#123;</span><br><span class="line">    if(currentGuideStatus==GuideStatus.On &amp;&amp; agent.remainingDistance==0)&#123;</span><br><span class="line">      Debug.Log(&quot;[guide] look at &quot;+turnPosition);</span><br><span class="line">      transform.DOLookAt(turnPosition,turnDuration,AxisConstraint.Y);</span><br><span class="line">      currentGuideStatus = GuideStatus.Static;</span><br><span class="line">      Debug.Log(&quot;[guide] end&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void SetNewDestination(Vector3 destination, Vector3 destination2) &#123;</span><br><span class="line">  Debug.Log(&quot;[guide] start&quot;);</span><br><span class="line">  currentGuideStatus = GuideStatus.Ready;</span><br><span class="line"></span><br><span class="line">  // set new destination</span><br><span class="line">  agent.SetDestination(destination);</span><br><span class="line"></span><br><span class="line">  // set turn destination</span><br><span class="line">  turnPosition = destination2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h1 id="UI遮盖Raycast"><a href="#UI遮盖Raycast" class="headerlink" title="UI遮盖Raycast"></a>UI遮盖Raycast</h1><p>加完导航寻路的UI之后，发现raycast仍可以穿透UI，同时点击寻路</p>
<p>看到一种解决是用EventSystem.current.IsPointerOverGameObject()</p>
<p>但是Canvas是全屏大小，点击哪里都是true</p>
<p>Canvas Group也没有用</p>
<blockquote>
<p><a href="https://stackoverflow.com/questions/52654002/unity-not-ignoring-button-click-in-ignore-raycast-layer">https://stackoverflow.com/questions/52654002/unity-not-ignoring-button-click-in-ignore-raycast-layer</a></p>
</blockquote>
<p>最后参考这个</p>
<blockquote>
<p><a href="https://gameinstitute.qq.com/community/detail/129017">https://gameinstitute.qq.com/community/detail/129017</a></p>
</blockquote>
<p>给所有的Button加了tag来判断</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">private bool IsPointerOverUIObject()&#123;</span><br><span class="line">    // get mouse position</span><br><span class="line">    PointerEventData eventDataCurrentPosition = new PointerEventData(EventSystem.current);</span><br><span class="line">    eventDataCurrentPosition.position = new Vector2(Input.mousePosition.x, Input.mousePosition.y);</span><br><span class="line"></span><br><span class="line">    // get all raycast result</span><br><span class="line">    List&lt;RaycastResult&gt; results = new List&lt;RaycastResult&gt;();</span><br><span class="line">    EventSystem.current.RaycastAll(eventDataCurrentPosition, results);</span><br><span class="line">    </span><br><span class="line">    // check UI tag</span><br><span class="line">    foreach(RaycastResult r in results)&#123;</span><br><span class="line">        if(r.gameObject.tag == &quot;UI&quot;)&#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="脚本执行顺序问题"><a href="#脚本执行顺序问题" class="headerlink" title="脚本执行顺序问题"></a>脚本执行顺序问题</h1><p>做了导航栏之后，发现初始化顺序有点问题</p>
<p>导航栏要使用Board上的数字和名字，有时会为默认值</p>
<p>选中任意一个script，调整Inspector-&gt;Execution Order，解决</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity Note - Project10 Wave</title>
    <url>/2021/02/21/unity/</url>
    <content><![CDATA[<p>尝试做个波浪动画，最后效果：</p>
<img src="/images/2021/Feb-21-2021 15-51-45.gif">

<hr>
<p>strip做成Prefab</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using DG.Tweening;</span><br><span class="line"></span><br><span class="line">public class Strip : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public void Activate(float waitSecond, float moveDistance, float moveDuration)</span><br><span class="line">    &#123;</span><br><span class="line">        StartCoroutine(ActivateMovement(waitSecond, moveDistance, moveDuration));</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    private IEnumerator ActivateMovement(float waitSecond, float moveDistance, float moveDuration)</span><br><span class="line">    &#123;</span><br><span class="line">        // wait for some time</span><br><span class="line">        yield return new WaitForSeconds(waitSecond);</span><br><span class="line">        </span><br><span class="line">        // set movement</span><br><span class="line">        DOTween.Sequence()</span><br><span class="line">            .Append(transform.DOMoveY(moveDistance, moveDuration).SetEase(Ease.InOutSine))</span><br><span class="line">            .SetLoops(-1,LoopType.Yoyo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>加一个controller</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class StripController : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    // object setting</span><br><span class="line">    [SerializeField] private int stripNum = 10;</span><br><span class="line">    [SerializeField] private Vector3 stripScale = new Vector3(0.2f,5,0.01f);</span><br><span class="line">    [SerializeField] private Vector3 stripInterval = new Vector3(0.25f,0,0);</span><br><span class="line"></span><br><span class="line">    // movement setting</span><br><span class="line">    [SerializeField] private float moveDistance = 2f;</span><br><span class="line">    [SerializeField] private float moveDuration = 2f;</span><br><span class="line">    [SerializeField] private float moveInterval = 0.1f;</span><br><span class="line"></span><br><span class="line">    private Strip stripPrefab;</span><br><span class="line">    private Strip[] strips;</span><br><span class="line">    </span><br><span class="line">    void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        stripPrefab = Resources.Load&lt;Strip&gt;(&quot;strip&quot;);</span><br><span class="line">        CreateStrips();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void CreateStrips()</span><br><span class="line">    &#123;</span><br><span class="line">        strips = new Strip[stripNum];</span><br><span class="line">        for(int i=0; i&lt;stripNum; i++)&#123;</span><br><span class="line">            // create cube</span><br><span class="line">            Strip obj = Instantiate(stripPrefab);</span><br><span class="line">            // set position</span><br><span class="line">            obj.transform.position = transform.position + stripInterval * i;</span><br><span class="line">            obj.transform.localScale = stripScale;</span><br><span class="line">            // activate movement</span><br><span class="line">            obj.Activate(moveInterval*(i+5), moveDistance, moveDuration);</span><br><span class="line">            // add to array</span><br><span class="line">            strips[i] = obj;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>奇怪的一点，前几个条的起始时间总是有点问题，暂时找不出来为什么，先把所有起始时间往后挪一点 MARK</p>
<img src="/images/2021/screencapture2021-02-21 PM3.21.01.jpg">

<p>这样就没问题了</p>
<img src="/images/2021/screencapture2021-02-21 PM3.23.48.jpg">

<hr>
<p>关于WaitForSeconds()</p>
<blockquote>
<p><a href="https://forum.unity.com/threads/waitforseconds-in-c.75411/">https://forum.unity.com/threads/waitforseconds-in-c.75411/</a></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">private void executeWait()</span><br><span class="line">&#123;</span><br><span class="line">  Debug.Log(&quot;wait start&quot;);</span><br><span class="line">  StartCoroutine(Wait(20.0f));</span><br><span class="line">  Debug.Log(&quot;This gets called after starting the Coroutine&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private IEnumerator Wait(float seconds)</span><br><span class="line">&#123;</span><br><span class="line">  Debug.Log(&quot;waiting&quot;);</span><br><span class="line">  yield return new WaitForSeconds(seconds);</span><br><span class="line">  Debug.Log(&quot;wait end&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>现在这个波浪效果一个问题是DOTWeen消耗太大</p>
<img src="/images/2021/screencapture2021-02-21 PM3.56.56.jpg">

<p>也许还是直接用波浪形物体平移？</p>
<hr>
<p>一个很喜欢的chrome插件几枝是用noise做的波浪，试一下Mathf.PerlinNoise()</p>
<p>参考：</p>
<blockquote>
<p><a href="https://blog.csdn.net/FumikiSAMA/article/details/80212432">https://blog.csdn.net/FumikiSAMA/article/details/80212432</a></p>
<p><a href="https://docs.unity3d.com/ScriptReference/Mathf.PerlinNoise.html">https://docs.unity3d.com/ScriptReference/Mathf.PerlinNoise.html</a></p>
</blockquote>
<p>网格拓扑绘制图形</p>
<blockquote>
<p><a href="https://www.jianshu.com/p/1f79e33308a6">https://www.jianshu.com/p/1f79e33308a6</a></p>
</blockquote>
<p>试着画了一个四面体</p>
<img src="/images/2021/screencapture2021-02-21 PM5.09.05.jpg">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Vector3[] vertices = new Vector3[4];</span><br><span class="line">vertices[0] = new Vector3(0, 0, 0);</span><br><span class="line">vertices[1] = new Vector3((float)System.Math.Sqrt(3), 1, 0);</span><br><span class="line">vertices[2] = new Vector3(0, 2, 0);</span><br><span class="line">vertices[3] = new Vector3((float)System.Math.Sqrt(1/3), 1, (float)System.Math.Sqrt(8/3));</span><br><span class="line"></span><br><span class="line">int[] triangle = new int[12] &#123;0,2,1,0,1,3,1,2,3,2,0,3&#125;;</span><br><span class="line"></span><br><span class="line">// get mesh</span><br><span class="line">Mesh mesh = GetComponent&lt;MeshFilter&gt;().mesh;</span><br><span class="line"></span><br><span class="line">// clear original mesh</span><br><span class="line">mesh.Clear();</span><br><span class="line"></span><br><span class="line">// set new vertices</span><br><span class="line">mesh.vertices = vertices;</span><br><span class="line"></span><br><span class="line">// set new triangles</span><br><span class="line">mesh.triangles = triangle;</span><br><span class="line"></span><br><span class="line">// calculate mesh</span><br><span class="line">mesh.RecalculateNormals();</span><br></pre></td></tr></table></figure>

<p>下次用这个画波浪试试</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity Note - Project11 Wave2</title>
    <url>/2021/03/08/unity/</url>
    <content><![CDATA[<p>按照上次的设想：</p>
<ul>
<li><p>PerlinNoise生成波浪</p>
<blockquote>
<p><a href="https://docs.unity3d.com/cn/current/ScriptReference/Mathf.PerlinNoise.html">https://docs.unity3d.com/cn/current/ScriptReference/Mathf.PerlinNoise.html</a></p>
</blockquote>
</li>
<li><p>用Mesh绘制</p>
</li>
<li><p>随时间更新</p>
</li>
</ul>
<img src="/images/2021/Mar-08-2021 12-02-11.gif">

<p>效果还不错</p>
<p>加了几个，调下参数</p>
<img src="/images/2021/Mar-08-2021 12-35-32.gif">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class WaveCreator : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    [SerializeField] private int waveLength = 100; // length of wave</span><br><span class="line">    [SerializeField] private float segLen = 0.2f; // length of each segment</span><br><span class="line">    [SerializeField] private float samplingInterval = 20f;</span><br><span class="line">    [SerializeField] private float maxHeight = 10f;</span><br><span class="line"></span><br><span class="line">    [SerializeField] private string colorHex = &quot;#45b787&quot;;</span><br><span class="line">    [SerializeField] private float colorAlpha = 0.8f;</span><br><span class="line"></span><br><span class="line">    private Color waveColor;</span><br><span class="line">    private float seedX = 0;</span><br><span class="line">    private float seedY = 0;</span><br><span class="line">    </span><br><span class="line">    void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        // generate random seed</span><br><span class="line">        seedX = Random.value * 100f;</span><br><span class="line">        seedY = Random.value * 100f;</span><br><span class="line"></span><br><span class="line">        // set material</span><br><span class="line">        GetComponent&lt;MeshRenderer&gt;().material = InitMaterial();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void Update() &#123;</span><br><span class="line">        float[] arr = GenerateNoiseArray(waveLength);</span><br><span class="line">        DrawWave(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private float[] GenerateNoiseArray(int len)&#123;</span><br><span class="line">        // generate wave height array</span><br><span class="line">        float[] arr = new float[len];</span><br><span class="line">        for(int i=0; i&lt;arr.Length; i++)&#123;</span><br><span class="line">            float x = (i + seedX + Time.time) / samplingInterval;</span><br><span class="line">            float y = (i + seedY) / samplingInterval;</span><br><span class="line">            // noise between 0.0 and 1.0</span><br><span class="line">            arr[i] = Mathf.PerlinNoise(x, y) * maxHeight;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void DrawWave(float[] arr)&#123;</span><br><span class="line">        int n = arr.Length;</span><br><span class="line"></span><br><span class="line">        Vector3[] vertices = new Vector3[2*n];</span><br><span class="line">        List&lt;int&gt; triangleList = new List&lt;int&gt;();</span><br><span class="line"></span><br><span class="line">        // add vertices</span><br><span class="line">        for(int i=0; i&lt;n; i++)&#123;</span><br><span class="line">            vertices[2*i] = new Vector3(segLen*(i+1), 0, 0);</span><br><span class="line">            vertices[2*i + 1] = new Vector3(segLen*(i+1), arr[i], 0);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // add triangles</span><br><span class="line">        for(int i=0;i&lt;n-1;i++)&#123;</span><br><span class="line">            // clockwise order</span><br><span class="line">            triangleList.Add(2*i);</span><br><span class="line">            triangleList.Add(2*i + 1);</span><br><span class="line">            triangleList.Add(2*i + 2);</span><br><span class="line"></span><br><span class="line">            triangleList.Add(2*i + 2);</span><br><span class="line">            triangleList.Add(2*i + 1);</span><br><span class="line">            triangleList.Add(2*i + 3);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        int[] triangles = triangleList.ToArray();</span><br><span class="line"></span><br><span class="line">        // get mesh</span><br><span class="line">        Mesh mesh = GetComponent&lt;MeshFilter&gt;().mesh;</span><br><span class="line"></span><br><span class="line">        // clear original mesh</span><br><span class="line">        mesh.Clear();</span><br><span class="line"></span><br><span class="line">        // set new vertices</span><br><span class="line">        mesh.vertices = vertices;</span><br><span class="line"></span><br><span class="line">        // set new triangles</span><br><span class="line">        mesh.triangles = triangles;</span><br><span class="line"></span><br><span class="line">        // calculate mesh</span><br><span class="line">        mesh.RecalculateNormals();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private Material InitMaterial()&#123;</span><br><span class="line">        Material material = new Material(Shader.Find(&quot;Standard&quot;));</span><br><span class="line"></span><br><span class="line">        // set rendering mode</span><br><span class="line">        SetFade(material);</span><br><span class="line"></span><br><span class="line">        // set color</span><br><span class="line">        ColorUtility.TryParseHtmlString(colorHex, out waveColor);</span><br><span class="line">        waveColor.a = colorAlpha;</span><br><span class="line">        material.SetColor(&quot;_Color&quot;, waveColor);</span><br><span class="line"></span><br><span class="line">        return material;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void SetFade(Material material)&#123;</span><br><span class="line">        // set rendering mode to fade to show alpha</span><br><span class="line">        material.SetInt(&quot;_SrcBlend&quot;, (int)UnityEngine.Rendering.BlendMode.SrcAlpha);</span><br><span class="line">        material.SetInt(&quot;_DstBlend&quot;, (int)UnityEngine.Rendering.BlendMode.OneMinusSrcAlpha);</span><br><span class="line">        material.SetInt(&quot;_ZWrite&quot;, 0);</span><br><span class="line">        material.DisableKeyword(&quot;_ALPHATEST_ON&quot;);</span><br><span class="line">        material.EnableKeyword(&quot;_ALPHABLEND_ON&quot;);</span><br><span class="line">        material.DisableKeyword(&quot;_ALPHAPREMULTIPLY_ON&quot;);</span><br><span class="line">        material.renderQueue = 3000;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Project V0.1.2 Record</title>
    <url>/2021/03/09/unity/</url>
    <content><![CDATA[<h1 id="描述部分"><a href="#描述部分" class="headerlink" title="描述部分"></a>描述部分</h1><p>给导航栏加了一个按钮，点击显示描述</p>
<p>以及一个查看大图的按钮，打开一个新页面</p>
<h1 id="查看大图"><a href="#查看大图" class="headerlink" title="查看大图"></a>查看大图</h1><p>关于图画细节的浏览，设想过几种方案：</p>
<ul>
<li><p>在Unity内放大图，通过移动人物或滚动图片来查看细节</p>
<p>但是移动的操作会比较复杂，和现有的控制冲突</p>
<p>滚动图片的话，各张图的大小差别太大，也不好放</p>
<p>还有一个是图片的版权问题，下载大图放在工程里感觉还是不太好</p>
</li>
<li><p>内嵌网页</p>
<p>寻找了一些实现方式，但是都比较局限，没有官方的解决方案</p>
</li>
<li><p>打开新页面</p>
<p>简单粗暴，虽然要跳出一下，但是专业的网站看图也好操作</p>
</li>
</ul>
<p>于是暂且就这样了</p>
<h1 id="图画信息和展板管理"><a href="#图画信息和展板管理" class="headerlink" title="图画信息和展板管理"></a>图画信息和展板管理</h1><p>以前是直接把文字信息放在展板的Object上</p>
<p>但是随着以后展厅的引入，会很麻烦</p>
<p>于是将主要信息存到了csv里，并且新增了一个单例的ArtManager，用于管理所有的文本信息和模型中展板的引用。其它Board以及GuideBar中要用到这些信息时，直接通过ArtManager获得。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class ArtManager : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public static ArtManager instance;</span><br><span class="line"></span><br><span class="line">    // reference to each board in each hall</span><br><span class="line">    [SerializeField] private Board[] boardsInHall0 = null;</span><br><span class="line">    [SerializeField] private Board[] boardsInHall1 = null;</span><br><span class="line"></span><br><span class="line">    // number of halls</span><br><span class="line">    private int numOfHalls = 2;</span><br><span class="line"></span><br><span class="line">    // store art info in each hall</span><br><span class="line">    private Dictionary&lt;int, ArtInfo&gt;[] artInfoStore;</span><br><span class="line"></span><br><span class="line">    void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        if(instance != null)&#123;</span><br><span class="line">            GameObject.Destroy(this.gameObject);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        instance = this;</span><br><span class="line"></span><br><span class="line">        // load art info</span><br><span class="line">        artInfoStore = new Dictionary&lt;int, ArtInfo&gt;[numOfHalls];</span><br><span class="line">        for(int i=0; i&lt;artInfoStore.Length; i++)&#123;</span><br><span class="line">            artInfoStore[i] = new Dictionary&lt;int, ArtInfo&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        ArtInfoLoader.LoadArtInfo(artInfoStore);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // ---------- Functions for Board &amp; GuidBar ----------</span><br><span class="line">    public ArtInfo GetArtInfo(int hall, int index)&#123;</span><br><span class="line">        return artInfoStore[hall][index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // ---------- Functions for GuideBar ----------</span><br><span class="line">    public string getGuideMenuText(int hall, int index)&#123;</span><br><span class="line">        return artInfoStore[hall][index].title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getBoardNumInHall(int hall)&#123;</span><br><span class="line">        return artInfoStore[hall].Count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Vector3[] getDestination(int hall, int index)&#123;</span><br><span class="line">        Vector3[] ret = null;</span><br><span class="line"></span><br><span class="line">        if(hall == 0)&#123;</span><br><span class="line">            ret = boardsInHall0[index - 1].GetDesitination(); // index begin with 1</span><br><span class="line">        &#125;else if(hall == 1)&#123;</span><br><span class="line">            ret = boardsInHall1[index - 1].GetDesitination();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里不同展厅的展板分了不同的数组，因为二维数组没法在Unity里拖引用，只好退而求其次了</p>
<p>还有一个细节是，画的index都是从1开始，这个也统一在ArtManager中处理了，其它类中就不用管了</p>
<h1 id="生成构建Debug"><a href="#生成构建Debug" class="headerlink" title="生成构建Debug"></a>生成构建Debug</h1><p>生成WebGL后，部分文字显示不全</p>
<p>查到一种解决方式：把颜色空间改成Linear，有错误提示，然后又把自动API取消勾选了。Graphics API变成了WebGL2.0。没用</p>
<p>popup和按钮中的中文都没有了，难道是字体的问题？</p>
<p>改了字体，重新生成，可以显示</p>
<p>但是，每次第一次打开总是没有？要先点过一次左或者右，后续才有显示。也许是加载顺序的问题？</p>
<p>调了几次顺序，还是不行</p>
<p>不仅是文字显示，有时刚开始滚动条也没有，后面慢慢解决吧</p>
<p>MARK 未解决的Bug：</p>
<p>新加载后，第一次点更多，无文字</p>
<p>点一次左/右后，有文字，但无法显示滚动条</p>
<p>重新点开更多，有滚动条</p>
<h1 id="寻路转向Debug"><a href="#寻路转向Debug" class="headerlink" title="寻路转向Debug"></a>寻路转向Debug</h1><p>有的时候寻路到了终点不会自动转向</p>
<p>发现设置GuideStatus为Ready后，有时Agent的remainingDistance仍是0（也许是有延迟），于是就直接到了stop状态</p>
<p>于是改成在Update()中修改状态，当前为Ready且remainingDistance!=0，状态改为On</p>
<p>当前为On且remainingDistance==0，设置转向，状态改为Static</p>
<p>但是这样又出现一个问题，即在原地点击寻路，状态无法变成On</p>
<p>于是在SetNewDestination()中先做一次判断，如果当前位置已经是目的位置，直接将状态设置成On</p>
<p>之前Ready和On状态是为了处理鼠标点击的一些问题，目前关于鼠标：</p>
<ul>
<li>途中 OK</li>
<li>原地（已经到达，测试转向）<ul>
<li>导航栏 OK</li>
<li>展板<ul>
<li>快点【被打断】</li>
<li>慢点 OK</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>就很迷惑，先这样吧</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Project V0.2 Record</title>
    <url>/2021/03/16/unity/</url>
    <content><![CDATA[<p>重新搭建了场景，unity中运行没问题</p>
<h1 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h1><p>构建后遇到一些bug</p>
<h2 id="按钮文字缺失"><a href="#按钮文字缺失" class="headerlink" title="按钮文字缺失"></a>按钮文字缺失</h2><p>构建mac版本后，按钮上的文字消失了，但是其它地方（详情、场景中）都正常</p>
<p>发现原本的按钮使用了TextMeshPro，但是没有必要，改成了用Text的</p>
<p>代码也修改成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// [SerializeField] private TextMeshProUGUI guideText = null;</span><br><span class="line">    [SerializeField] private Text guideText = null;</span><br></pre></td></tr></table></figure>

<p>重新构建，就没有问题了</p>
<p>顺便上一版中第一次点开详情没有文字的bug也消失了</p>
<h2 id="unityFramework-is-not-defined"><a href="#unityFramework-is-not-defined" class="headerlink" title="unityFramework is not defined"></a>unityFramework is not defined</h2><p>构建webgl版本后，firefox浏览器加载时进度条卡在80%左右，控制台报错</p>
<p>Uncaught ReferenceError: unityFramework is not defined</p>
<p>（但是发布到itch.io后可以正常显示）</p>
<p><a href="https://forum.unity.com/threads/uncaught-referenceerror-unityframework-is-not-defined-at-htmlscriptelement-script-onload-webgl.803967/">https://forum.unity.com/threads/uncaught-referenceerror-unityframework-is-not-defined-at-htmlscriptelement-script-onload-webgl.803967/</a></p>
<p>参考↑中一个回答：Try to disable compression</p>
<p>解决😄</p>
<p>之前看教程的时候应该是调过这个参数的，这次搞忘了</p>
<h1 id="V0-2-1"><a href="#V0-2-1" class="headerlink" title="V0.2.1"></a>V0.2.1</h1><h2 id="新标签页打开网页"><a href="#新标签页打开网页" class="headerlink" title="新标签页打开网页"></a>新标签页打开网页</h2><p>mac版本中，点查看大图会打开浏览器新页面</p>
<p>webgl版本中，点查看大图会直接在当前页跳转</p>
<p>想改成新标签页</p>
<p>参考<a href="https://stackoverflow.com/questions/62348214/how-to-open-a-link-on-a-new-tab-using-webgl-c-through-unity">https://stackoverflow.com/questions/62348214/how-to-open-a-link-on-a-new-tab-using-webgl-c-through-unity</a></p>
<blockquote>
<p>using .jslib file</p>
<p>Assets/plugins/plugin.jslib</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var plugin = &#123;</span><br><span class="line">    OpenNewTab : function(url)</span><br><span class="line">    &#123;</span><br><span class="line">        url = Pointer_stringify(url);</span><br><span class="line">        window.open(url,&#x27;_blank&#x27;);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">mergeInto(LibraryManager.library, plugin);</span><br></pre></td></tr></table></figure>

<p>Your C# script</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using System.Runtime.InteropServices;</span><br><span class="line"></span><br><span class="line">public class OpenURL : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    [DllImport(&quot;__Internal&quot;)]</span><br><span class="line">    private static extern void OpenNewTab(string url);</span><br><span class="line"></span><br><span class="line">    public void openIt(string url)</span><br><span class="line">    &#123;</span><br><span class="line">#if !UNITY_EDITOR &amp;&amp; UNITY_WEBGL</span><br><span class="line">             OpenNewTab(url);</span><br><span class="line">#endif</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        if (Input.GetKeyDown(KeyCode.Return))</span><br><span class="line">        &#123;</span><br><span class="line">            openIt(&quot;www.wateverurluwant.com&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>firefox和itch.io测试均可~</p>
<h2 id="帮助按钮"><a href="#帮助按钮" class="headerlink" title="帮助按钮"></a>帮助按钮</h2><p>还需要把帮助按钮加回来</p>
<p>并且默认首次打开程序时弹出显示</p>
<h1 id="V0-2-2"><a href="#V0-2-2" class="headerlink" title="V0.2.2"></a>V0.2.2</h1><h2 id="图片模糊问题"><a href="#图片模糊问题" class="headerlink" title="图片模糊问题"></a>图片模糊问题</h2><p>把所有图片加进去了</p>
<p>发现千里江山图导入之后很模糊</p>
<img src="/images/2021/screencapture2021-03-18 PM2.38.54.jpg">

<p>发现可以调最大尺寸，就清晰了</p>
<img src="/images/2021/screencapture2021-03-18 PM2.41.11.jpg">

<hr>
<p>测试发布的时候V0.2.2，build里面data文件有235.4MB，itch.io无法加载</p>
<p>将图片全体降了一个清晰度，变成114MB，可以加载了，但还是很大</p>
<p>将5种花删成2种，变成104.7MB</p>
<p>把波浪长椅换成和其它地方一样的竹椅，墙外的竹子叶子全删到最少，变成102.1MB</p>
<p>墙外竹子全删掉，变成91.3MB</p>
<p>V0.2.1的时候是42.3MB，看来还是画最占空间</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity Project 版本记录</title>
    <url>/2021/03/21/unity-project-memo/</url>
    <content><![CDATA[<h1 id="02-16-V0-1"><a href="#02-16-V0-1" class="headerlink" title="02.16 V0.1"></a>02.16 V0.1</h1><h2 id="新增基础移动操作"><a href="#新增基础移动操作" class="headerlink" title="新增基础移动操作"></a>新增基础移动操作</h2><ul>
<li><p>点击寻路</p>
<img src="/images/2021/Feb-16-2021 18-29-31.gif">
</li>
<li><p>靠近显示介绍</p>
</li>
<li><p>鼠标滚动前后平移</p>
</li>
<li><p>键盘前后左右平移</p>
<img src="/images/2021/Feb-16-2021 18-30-32.gif">
</li>
<li><p>鼠标拖拽旋转视角</p>
</li>
</ul>
<h1 id="02-19-V0-1-1"><a href="#02-19-V0-1-1" class="headerlink" title="02.19 V0.1.1"></a>02.19 V0.1.1</h1><h2 id="新增介绍牌"><a href="#新增介绍牌" class="headerlink" title="新增介绍牌"></a>新增介绍牌</h2><ul>
<li><p>删除靠近显示介绍</p>
</li>
<li><p>介绍牌鼠标移入高亮</p>
</li>
<li><p>点击介绍牌寻路</p>
<img src="/images/2021/Feb-19-2021 17-25-59.gif">

<ul>
<li>寻路中任意操作打断</li>
<li>到达目的地后转向介绍牌</li>
</ul>
</li>
</ul>
<h2 id="新增导游栏"><a href="#新增导游栏" class="headerlink" title="新增导游栏"></a>新增导游栏</h2><ul>
<li><p>点击中间按钮寻路</p>
</li>
<li><p>点击左右按钮更新导游栏并寻路</p>
<img src="/images/2021/Feb-19-2021 17-26-58.gif">

<ul>
<li>最左/最右时按钮不可用</li>
</ul>
</li>
</ul>
<h2 id="新增菜单栏"><a href="#新增菜单栏" class="headerlink" title="新增菜单栏"></a>新增菜单栏</h2><ul>
<li>点击帮助按钮弹出介绍</li>
</ul>
<h1 id="03-09-V0-1-2"><a href="#03-09-V0-1-2" class="headerlink" title="03.09 V0.1.2"></a>03.09 V0.1.2</h1><h2 id="新增介绍"><a href="#新增介绍" class="headerlink" title="新增介绍"></a>新增介绍</h2><ul>
<li><p>点击导航栏中按钮，显示简介</p>
<ul>
<li>文字超出时显示滚动条</li>
</ul>
<img src="/images/2021/Mar-09-2021 17-34-17.gif">

<ul>
<li>点击查看大图打开新页面</li>
</ul>
</li>
</ul>
<h1 id="03-11-V0-2"><a href="#03-11-V0-2" class="headerlink" title="03.11 V0.2"></a>03.11 V0.2</h1><h2 id="重建展厅"><a href="#重建展厅" class="headerlink" title="重建展厅"></a>重建展厅</h2><ul>
<li><p>初始放入隋到五代的8张画</p>
</li>
<li><p>调整介绍牌样式</p>
</li>
<li><p>加入天花板和灯</p>
<img src="/images/2021/Mar-11-2021 16-54-44.gif">

</li>
</ul>
<h1 id="03-16-V0-2-1"><a href="#03-16-V0-2-1" class="headerlink" title="03.16 V0.2.1"></a>03.16 V0.2.1</h1><h2 id="加入帮助按钮"><a href="#加入帮助按钮" class="headerlink" title="加入帮助按钮"></a>加入帮助按钮</h2><ul>
<li><p>点击显示操作说明</p>
<img src="/images/2021/Mar-16-2021 11-50-45.gif">

</li>
</ul>
<h2 id="调整"><a href="#调整" class="headerlink" title="调整"></a>调整</h2><ul>
<li>点击查看大图时，在新窗口打开页面</li>
<li>调整点击寻路粒子效果</li>
</ul>
<h1 id="03-20-V0-2-2"><a href="#03-20-V0-2-2" class="headerlink" title="03.20 V0.2.2"></a>03.20 V0.2.2</h1><h2 id="HallA搭建基本完成"><a href="#HallA搭建基本完成" class="headerlink" title="HallA搭建基本完成"></a>HallA搭建基本完成</h2><ul>
<li><p>共28张画作</p>
<img src="/images/2021/Mar-21-2021 22-30-25.gif">
</li>
<li><p>设置座椅、绿植、花瓶等</p>
<img src="/images/2021/Mar-21-2021 22-32-51.gif">

</li>
</ul>
<h1 id="03-25-V0-2-3"><a href="#03-25-V0-2-3" class="headerlink" title="03.25 V0.2.3"></a>03.25 V0.2.3</h1><ul>
<li><p>修改导航栏高亮效果</p>
</li>
<li><p>新增装饰效果</p>
<img src="/images/2021/Mar-26-2021 10-03-52.gif">

</li>
</ul>
<h2 id="新增音乐"><a href="#新增音乐" class="headerlink" title="新增音乐"></a>新增音乐</h2><ul>
<li>移动时添加脚步音效</li>
<li>千里江山图走廊中添加流水音效</li>
</ul>
<h1 id="03-31-V0-2-4"><a href="#03-31-V0-2-4" class="headerlink" title="03.31 V0.2.4"></a>03.31 V0.2.4</h1><p>修改UI</p>
<ul>
<li><p>修改导航栏图标为文字，避免左右箭头与移动方向不一致影响体验</p>
</li>
<li><p>新增上下左右移动按钮</p>
<img src="/images/2021/Apr-02-2021 09-24-45.gif">
</li>
<li><p>导航栏初始显示0展览介绍，此时只有下一幅按钮可点击</p>
</li>
</ul>
<p>修改展厅</p>
<ul>
<li>新增展览介绍，默认进入场景时面向展览介绍，点下一幅来到第一幅画作</li>
<li>调整朝代介绍位置，使导航到画作时能完整浏览</li>
<li>新增出口</li>
<li>新增方向指示牌，将部分地上的花瓶移动到指示牌平台上</li>
</ul>
<p>修改导航模块</p>
<ul>
<li>点击画作也可导航</li>
</ul>
<h1 id="04-02-V0-3"><a href="#04-02-V0-3" class="headerlink" title="04.02 V0.3"></a>04.02 V0.3</h1><p>新增影厅</p>
<ul>
<li><p>开始和暂停视频</p>
<img src="/images/2021/Apr-02-2021 09-18-14.gif">

</li>
</ul>
<p>导航栏新增展开按钮</p>
<ul>
<li>点击展开去影厅和回起点按钮</li>
<li>去影厅导航到影厅</li>
<li>会起点导航到展厅介绍</li>
</ul>
]]></content>
      <categories>
        <category>Memo</category>
      </categories>
      <tags>
        <tag>unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity Debug WebGL播放视频</title>
    <url>/2021/04/02/unity-debug/</url>
    <content><![CDATA[<p>Unity内运行时播放视频没问题，导出后用火狐打开就放不了，看控制台报错是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">已拦截跨源请求：同源策略禁止读取位于 file:///Users/.../unity/Backups/WebV0.3/sharedassets0.resource 的远程资源。（原因：CORS 请求不是 http）。</span><br></pre></td></tr></table></figure>

<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><ol>
<li><p>WebGL只能通过URL播放视频</p>
<blockquote>
<p><a href="https://blog.csdn.net/wuyt2008/article/details/107592492?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161752087116780265448826%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=161752087116780265448826&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~times_rank-10-107592492.first_rank_v2_pc_rank_v29&utm_term=unity+webgl+%E8%A7%86%E9%A2%91%E9%BB%91%E5%B1%8F">Unity2019在WebGL下播放视频</a></p>
</blockquote>
</li>
<li><p>火狐浏览器设置允许跨域</p>
<p>security.fileuri.strict_origin_policy改false</p>
<blockquote>
<p><a href="https://blog.csdn.net/qq_28867949/article/details/99890103?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-1&spm=1001.2101.3001.4242">Firefox火狐浏览器访问本地文件-提示跨域问题</a></p>
</blockquote>
</li>
<li><p>火狐浏览器设置允许播放视频</p>
<blockquote>
<p><a href="https://blog.csdn.net/qq_34243277/article/details/114398872?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-1&spm=1001.2101.3001.4242">Unity2018发布webgl视频无法播放</a></p>
</blockquote>
</li>
</ol>
<h1 id="各种失败尝试记录"><a href="#各种失败尝试记录" class="headerlink" title="各种失败尝试记录"></a>各种失败尝试记录</h1><p>1.</p>
<blockquote>
<p><a href="https://blog.kongregate.com/unity-html5-cors-and-you/">https://blog.kongregate.com/unity-html5-cors-and-you/</a></p>
</blockquote>
<p>写了问题原因，但是没看到针对Unity怎么解决</p>
<p>2.</p>
<blockquote>
<p><a href="https://www.jianshu.com/p/78904381ba32">https://www.jianshu.com/p/78904381ba32</a></p>
</blockquote>
<p>说把privacy.file_unique_origin改成false，但是它已经是false了</p>
<p>3.</p>
<p>发现Unity中Video Player的视频源有视频剪辑和URL两种方式</p>
<p>之前用的是视频剪辑，直接把mp4文件拖进去</p>
<p>改用URL试试，从浏览中找到同一个文件，测试也可以播放。试了一个网络上的mp4的URL，测试也可以</p>
<p>那或许可以尝试把mp4上传，然后用URL访问</p>
<blockquote>
<p><a href="https://blog.csdn.net/weixin_33912453/article/details/94087306?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-6.baidujs&amp;dist_request_id=&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-6.baidujs">https://blog.csdn.net/weixin_33912453/article/details/94087306?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-6.baidujs&amp;dist_request_id=&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-6.baidujs</a></p>
</blockquote>
<p>试试这个用爱奇艺开放平台的</p>
<p>发现注册应用必须有url</p>
<p>4.</p>
<p>再找一下有没有视频托管网站</p>
<p><a href="https://www.zhihu.com/question/23036186/answer/1716470191">https://www.zhihu.com/question/23036186/answer/1716470191</a></p>
<p>找了一个酷播云，视频要审核，等会再看（似乎不能直接拿到URL，可能要凉）</p>
<p><a href="http://www.stonepoll.com/helpcenter/hc/kb/article/fcc34c50-301a-822a-df8c-e690f5af5bb5/">http://www.stonepoll.com/helpcenter/hc/kb/article/fcc34c50-301a-822a-df8c-e690f5af5bb5/</a></p>
<p>腾讯云要买服务，算了先</p>
<p>又传了一个优酷的，等会看审核</p>
<p>得，拿不到mp4的URL</p>
<p>5.</p>
<p>还是从浏览器入手吧，试试允许跨域</p>
<p><a href="https://blog.csdn.net/nju_zjy/article/details/108870385">https://blog.csdn.net/nju_zjy/article/details/108870385</a></p>
<p>参考这个，装一个火狐插件</p>
<p>没用</p>
<p>多试了几个插件，都没用</p>
<p>6.</p>
<p>有找到一个调浏览器设置的</p>
<p><a href="https://blog.csdn.net/qq_28867949/article/details/99890103?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-1&amp;spm=1001.2101.3001.4242">https://blog.csdn.net/qq_28867949/article/details/99890103?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-1&amp;spm=1001.2101.3001.4242</a></p>
<p>把security.fileuri.strict_origin_policy改成false</p>
<p>【重启后不报错了！】</p>
<p>但是视频还是播放不了</p>
<p>7.</p>
<p><a href="https://blog.csdn.net/qq_38229886/article/details/103139228?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-2&amp;spm=1001.2101.3001.4242">https://blog.csdn.net/qq_38229886/article/details/103139228?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-2&amp;spm=1001.2101.3001.4242</a></p>
<p>WebGL不支持mp4？！…</p>
<p>转成ogv。没用</p>
<p>8.</p>
<p>找了一个在线的mp4地址，本地ok</p>
<p>导出WebGL运行，不报错，播放不了</p>
<p>9.</p>
<p><a href="https://blog.csdn.net/weixin_43779625/article/details/103410836">https://blog.csdn.net/weixin_43779625/article/details/103410836</a></p>
<p>改用Render Texture的方式（以前是材质覆盖）</p>
<p>不行（甚至本地都显示不了视频，只有声音）</p>
<p>10.</p>
<p><a href="https://blog.csdn.net/JLX_Sir/article/details/82684491?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-2.baidujs&amp;dist_request_id=&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-2.baidujs">https://blog.csdn.net/JLX_Sir/article/details/82684491?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-2.baidujs&amp;dist_request_id=&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-2.baidujs</a></p>
<p>说WebGL不支持高分辨率</p>
<p>试试在检查器里设置转码 1/4分辨率，比特率模式低，空间质量低</p>
<p>导出，不行</p>
<p>11.</p>
<p><a href="https://blog.csdn.net/qq_34243277/article/details/114398872?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-1&amp;spm=1001.2101.3001.4242">https://blog.csdn.net/qq_34243277/article/details/114398872?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-1&amp;spm=1001.2101.3001.4242</a></p>
<p>火狐还有阻止音视频的默认设置？？关掉</p>
<p>mp4和ogv都不行</p>
<p>12.</p>
<p><a href="https://blog.csdn.net/s1314_JHC/article/details/80618252">https://blog.csdn.net/s1314_JHC/article/details/80618252</a></p>
<p>还有说是WebGL不支持MovieTexture的，用插件</p>
<p>导出后是黑的，疯狂报错</p>
<p>13.</p>
<p><a href="https://blog.csdn.net/wuyt2008/article/details/107592492?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161752087116780265448826%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=161752087116780265448826&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~times_rank-10-107592492.first_rank_v2_pc_rank_v29&amp;utm_term=unity+webgl+%E8%A7%86%E9%A2%91%E9%BB%91%E5%B1%8F">https://blog.csdn.net/wuyt2008/article/details/107592492?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161752087116780265448826%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=161752087116780265448826&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~times_rank-10-107592492.first_rank_v2_pc_rank_v29&amp;utm_term=unity+webgl+%E8%A7%86%E9%A2%91%E9%BB%91%E5%B1%8F</a></p>
<p>这个说WebGL只能通过url播放</p>
<p>现在调过火狐的设置了，再试试url吧</p>
<p>!!!!!!!!!!!!成功了😭!!!!!!!!!!!!</p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>unity</tag>
      </tags>
  </entry>
  <entry>
    <title>记录anki卡片</title>
    <url>/2021/04/21/anki/</url>
    <content><![CDATA[<p>打算用anki背法语单词，用Fast Word Query加发音</p>
<p>字段：</p>
<img src="/images/2021/screencapture2021-04-21 AM11.48.55.jpg" width="400px">

<p>卡片：</p>
<p>正面模板</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;/br&gt;</span><br><span class="line">&lt;center&gt;</span><br><span class="line">&lt;div class=&quot;background&quot;&gt;</span><br><span class="line">	&lt;div&gt;&#123;&#123;word&#125;&#125;&lt;/div&gt;&lt;/br&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/center&gt;</span><br></pre></td></tr></table></figure>

<p>背面模板</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;center&gt;</span><br><span class="line">&lt;div class=&quot;background&quot;&gt;</span><br><span class="line">	&#123;&#123;FrontSide&#125;&#125;</span><br><span class="line">	&lt;hr id=answer&gt;</span><br><span class="line">	&lt;div&gt;&#123;&#123;pronunciation&#125;&#125;&lt;/div&gt;</span><br><span class="line">	&lt;div&gt;&#123;&#123;explanation&#125;&#125;&lt;/div&gt;</span><br><span class="line">	&lt;div&gt;&#123;&#123;example&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/center&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;var initVoice = function () &#123;</span><br><span class="line">    var player = document.getElementById(&#x27;dictVoice&#x27;);</span><br><span class="line">    document.addEventListener(&#x27;click&#x27;, function (e) &#123;</span><br><span class="line">        var target = e.target;</span><br><span class="line">        if (target.hasAttribute(&#x27;role&#x27;) &amp;&amp; target.getAttribute(&#x27;role&#x27;).indexOf(&#x27;dict_audio_js&#x27;) &gt;= 0) &#123;</span><br><span class="line">            var url = target.getAttribute(&#x27;data-rel&#x27;);</span><br><span class="line">            player.setAttribute(&#x27;src&#x27;, url);</span><br><span class="line">            player.volume = 1;</span><br><span class="line">            player.play();</span><br><span class="line">            e.preventDefault();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, false);</span><br><span class="line">&#125;;</span><br><span class="line">initVoice();&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>Fast Word Query配置：</p>
<img src="/images/2021/screencapture2021-04-21 AM11.47.38.jpg">

<p>试了一下法语助手只能查到发音，没有解释，于是解释用了有道</p>
<p>此时效果：</p>
<img src="/images/2021/screencapture2021-04-21 AM11.51.40.jpg">

<p>翻面自动发音，例句的语音也可以点</p>
<p>但有个问题是，查到的例句是白色，背景也是白色</p>
<p>选中example框，在编辑html中找到了这几个div的class，卡片中改样式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.card &#123;</span><br><span class="line">font-family: arial;</span><br><span class="line">font-size: 20px;</span><br><span class="line">&#125;</span><br><span class="line">.background&#123;</span><br><span class="line">max-width: 800px;</span><br><span class="line">&#125;</span><br><span class="line">.mcols-layout&#123;</span><br><span class="line"> background-color:#333335</span><br><span class="line">&#125;</span><br><span class="line">.trans-container&#123;</span><br><span class="line">background-color: #333335;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>搞定~</p>
<img src="/images/2021/screencapture2021-04-21 PM12.22.46.jpg">

<hr>
<p>又加了个pre字段，可以放le la之类的，显示时在word之前 </p>
<p>查的时候忽略（在Fast Word Query中Ignore掉），仍只查word，避免查不到解释</p>
]]></content>
      <categories>
        <category>Memo</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>DA project0 test record</title>
    <url>/2021/10/19/DA-project-test/</url>
    <content><![CDATA[<p>Project0要求实现Perfect Link，给了测试用的tc.py用来修改网络情况，stress.py模拟发消息。（Distributed Algorithms 2021-2022 Project Validation.pdf）</p>
<p>想测一下试试。</p>
<p>注：以下几个测试都没有改tc.py的参数，即↓</p>
<img src="/images/2021/screencapture2021-10-19 PM6.43.30.jpg">

<h1 id="Round-1"><a href="#Round-1" class="headerlink" title="Round 1"></a>Round 1</h1><p>参数如图：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">testConfig = &#123;</span><br><span class="line">        <span class="string">&#x27;concurrency&#x27;</span> : <span class="number">8</span>, <span class="comment"># How many threads are interferring with the running processes</span></span><br><span class="line">        <span class="string">&#x27;attempts&#x27;</span> : <span class="number">8</span>, <span class="comment"># How many interferring attempts each threads does</span></span><br><span class="line">        <span class="string">&#x27;attemptsDistribution&#x27;</span> : &#123; <span class="comment"># Probability with which an interferring thread will</span></span><br><span class="line">            <span class="string">&#x27;STOP&#x27;</span>: <span class="number">0.48</span>,          <span class="comment"># select an interferring action (make sure they add up to 1)</span></span><br><span class="line">            <span class="string">&#x27;CONT&#x27;</span>: <span class="number">0.48</span>,</span><br><span class="line">            <span class="string">&#x27;TERM&#x27;</span>:<span class="number">0.04</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3 stress.py -r ../template_java/run.sh -t perfect -l output -p <span class="number">10</span> -m <span class="number">10</span></span><br></pre></td></tr></table></figure>

<p>testConfig在stress.py最后，这里全是默认，10个process，每个发10条消息（config中只有一行 10 1）</p>
<p>理论上来说，应该是2-9号都要给1号发10条，总共90条</p>
<p>但是出来的数据不完全是90</p>
<img src="/images/2021/screencapture2021-10-19 PM6.46.31.jpg">

<p>（这里统计输出写了个简单工具，见最后）</p>
<p>根据后面测试的结果推测，问题在testConfig这里。concurrency和attempts数值都是8，也就是有8个捣乱线程各干预8次。STOP和CONT只是暂停和继续，不会干扰最后的结果。但是这里还有0.04的概率会发TERM，直接把正在干活的process杀了。所以最后有的只发了79、80</p>
<h1 id="Round-2"><a href="#Round-2" class="headerlink" title="Round 2"></a>Round 2</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;concurrency&#x27;</span> : <span class="number">16</span></span><br><span class="line"><span class="string">&#x27;attempts&#x27;</span> : <span class="number">16</span></span><br><span class="line"><span class="string">&#x27;attemptsDistribution&#x27;</span> : </span><br><span class="line">            <span class="string">&#x27;STOP&#x27;</span>: <span class="number">0.48</span>,</span><br><span class="line">            <span class="string">&#x27;CONT&#x27;</span>: <span class="number">0.48</span>,</span><br><span class="line">            <span class="string">&#x27;TERM&#x27;</span>:<span class="number">0.04</span></span><br><span class="line"></span><br><span class="line">-p <span class="number">20</span> -m <span class="number">20</span></span><br></pre></td></tr></table></figure>

<p>试了几次这个参数，情况差不多。应该有19*20=380条，但是结果分别是：267、299、360、319</p>
<h1 id="突然"><a href="#突然" class="headerlink" title="突然"></a>突然</h1><p>经另一位当值的昆虫馆管理员提醒，测试进程数是有上限的</p>
<img src="/images/2021/screencapture2021-10-19 PM6.08.42.jpg">

<p>对不起我的CPU🙇‍♂️</p>
<p>（但是这里到底是在说9 100是上限，还是举个例子说如果9 100，让跑25分钟？？？）</p>
<h1 id="Round-3"><a href="#Round-3" class="headerlink" title="Round 3"></a>Round 3</h1><p>于是就把p和m直接设成9和100</p>
<p>意识到TERM可能会对correctness有影响，这里把TERM也调成了0</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;concurrency&#x27;</span> : <span class="number">8</span></span><br><span class="line"><span class="string">&#x27;attempts&#x27;</span> : <span class="number">8</span></span><br><span class="line"><span class="string">&#x27;attemptsDistribution&#x27;</span> : </span><br><span class="line">            <span class="string">&#x27;STOP&#x27;</span>: <span class="number">0.5</span>,</span><br><span class="line">            <span class="string">&#x27;CONT&#x27;</span>: <span class="number">0.5</span>,</span><br><span class="line">            <span class="string">&#x27;TERM&#x27;</span>:<span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">-p <span class="number">9</span> -m <span class="number">100</span></span><br></pre></td></tr></table></figure>

<img src="/images/2021/screencapture2021-10-19 PM7.06.12.jpg">

<p>输出没毛病</p>
<h1 id="Round-4"><a href="#Round-4" class="headerlink" title="Round 4"></a>Round 4</h1><p>然后把TERM改回去</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;concurrency&#x27;</span> : <span class="number">8</span></span><br><span class="line"><span class="string">&#x27;attempts&#x27;</span> : <span class="number">8</span></span><br><span class="line"><span class="string">&#x27;attemptsDistribution&#x27;</span> : </span><br><span class="line">            <span class="string">&#x27;STOP&#x27;</span>: <span class="number">0.48</span>,</span><br><span class="line">            <span class="string">&#x27;CONT&#x27;</span>: <span class="number">0.48</span>,</span><br><span class="line">            <span class="string">&#x27;TERM&#x27;</span>:<span class="number">0.04</span></span><br><span class="line"></span><br><span class="line">-p <span class="number">9</span> -m <span class="number">100</span></span><br></pre></td></tr></table></figure>

<img src="/images/2021/screencapture2021-10-19 PM7.07.10.jpg">

<p>左边是运行中部分输出</p>
<p>可以发现有的process被SIGTERM杀掉了，第一次SIGTERM多一些，最后收到的少一些。第二次最后才有一个SIGTERM，此时已经发完了</p>
<p>符合预期</p>
<h1 id="Tool"><a href="#Tool" class="headerlink" title="Tool"></a>Tool</h1><p>由于输出长得实在没眼看，不好debug，写了个工具统计一下</p>
<p>这两放一个目录下：</p>
<ul>
<li>count.py</li>
<li>output.txt</li>
</ul>
<p>output.txt是stress.py的输出（只是process 1的output，全是deliver没有broadcast的，长这样↓）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">d 2 81</span><br><span class="line">d 2 87</span><br><span class="line">d 2 85</span><br><span class="line">d 6 48</span><br><span class="line">d 6 58</span><br><span class="line">d 6 86</span><br><span class="line">d 6 90</span><br><span class="line">d 6 93</span><br><span class="line">d 6 95</span><br><span class="line">d 6 99</span><br><span class="line">d 6 94</span><br><span class="line">d 2 11</span><br><span class="line">d 2 61</span><br><span class="line">d 2 92</span><br><span class="line">d 2 2</span><br><span class="line">d 2 9</span><br><span class="line">d 6 54</span><br><span class="line">d 2 21</span><br><span class="line">d 2 14</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>count.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">	data = f.readlines()</span><br><span class="line"></span><br><span class="line">	<span class="built_in">dict</span> = &#123;&#125;</span><br><span class="line">	count = <span class="number">0</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> line <span class="keyword">in</span> data:</span><br><span class="line">		splited = line.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">		sender = <span class="built_in">int</span>(splited[<span class="number">1</span>])</span><br><span class="line">		seq = <span class="built_in">int</span>(splited[<span class="number">2</span>])</span><br><span class="line">		</span><br><span class="line">		<span class="built_in">dict</span>.setdefault(sender,[]).append(seq)</span><br><span class="line">		count += <span class="number">1</span></span><br><span class="line">		</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;\nTotal number of senders: &quot;</span> , <span class="built_in">len</span>(<span class="built_in">dict</span>), <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;Total number of messages: &quot;</span>,  count, <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;Details (S: sender id; T: total message received, Q: seq)\n&quot;</span>)</span><br><span class="line">		</span><br><span class="line">	keys = []</span><br><span class="line">	<span class="keyword">for</span> sender <span class="keyword">in</span> <span class="built_in">dict</span>.keys():</span><br><span class="line">		keys.append(<span class="built_in">int</span>(sender))</span><br><span class="line">	keys.sort()</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> sender <span class="keyword">in</span> keys:</span><br><span class="line">		<span class="built_in">dict</span>[sender].sort()</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;S:&quot;</span>, <span class="built_in">format</span>(sender,<span class="string">&quot;&lt;4&quot;</span>), <span class="string">&quot; T:&quot;</span>, <span class="built_in">format</span>(<span class="built_in">len</span>(<span class="built_in">dict</span>[sender]),<span class="string">&quot;&lt;5&quot;</span>), <span class="string">&quot; Q:&quot;</span>, <span class="built_in">dict</span>[sender])</span><br><span class="line">		<span class="comment"># print(&quot;S:&quot;, format(sender,&quot;&lt;4&quot;), &quot; T:&quot;, format(len(dict[sender]),&quot;&lt;5&quot;))</span></span><br></pre></td></tr></table></figure>

<p>后面输出多了，可以把具体的SEQ删掉掉，前面少的时候可以看看有没有重复</p>
]]></content>
      <categories>
        <category>Memo</category>
      </categories>
      <tags>
        <tag>distributed_algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>CountSketch Matrix</title>
    <url>/2021/10/27/countsketch/</url>
    <content><![CDATA[<p>Drew a simple example to help understanding what I learned in class.</p>
<img src="/images/2021/2021-10-27-225725.png">
<img src="/images/2021/2021-10-27-225726.png">]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>sublinear_algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Summary on basic register reductions</title>
    <url>/2021/10/31/register/</url>
    <content><![CDATA[<img src="/images/2021/screencapture2021-10-31 PM5.58.54.jpg">
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>distributed_algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>sync example note1</title>
    <url>/2021/11/13/concurrent/</url>
    <content><![CDATA[<p>Cync example for C concurrent programing</p>
<h1 id="Threads"><a href="#Threads" class="headerlink" title="Threads"></a>Threads</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RUNS (4096 * 256)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> THREADS 4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">count</span><span class="params">(<span class="keyword">void</span>* null)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;New thread created\n&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// declare an array of 4 threads</span></span><br><span class="line">  <span class="keyword">pthread_t</span> handlers[THREADS];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">intptr_t</span> i = <span class="number">0</span>; i &lt; THREADS; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> res = pthread_create(&amp;handlers[i], <span class="literal">NULL</span>, count, <span class="literal">NULL</span>);</span><br><span class="line">    assert(!res);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; THREADS; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> res = pthread_join(handlers[i], <span class="literal">NULL</span>);</span><br><span class="line">    assert(!res);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (counter != RUNS * THREADS) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Didn&#x27;t count so well. :/, found %d\n&quot;</span>, counter);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Counted up to %d.\n&quot;</span>, counter);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;lock.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">count</span><span class="params">(<span class="keyword">void</span>* null)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; RUNS; r++) &#123;</span><br><span class="line">    lock_acquire(&amp;lock);</span><br><span class="line">    counter++;</span><br><span class="line">    lock_release(&amp;lock);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Better version: use lock_wait(&amp;lock) and lock_wake_up(&amp;lock) to prevent bucy wait, but rely on a notification.</p>
<h1 id="Atomic-variable"><a href="#Atomic-variable" class="headerlink" title="Atomic  variable"></a>Atomic  variable</h1><p>Atomic variables (~atomic registers) do not enforce atomic operation blocks.</p>
<p>Need to use atomic operation.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">atomic_int</span> counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">count</span><span class="params">(<span class="keyword">void</span>* null)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; RUNS; r++) &#123;</span><br><span class="line">    atomic_fetch_add(&amp;counter, <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Another example</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> expected = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (atomic_compare_exchange_strong(&amp;leader[r], &amp;expected, tid)) &#123;</span><br><span class="line">	atomic_fetch_add(&amp;nb_leaders[r], <span class="number">1</span>); <span class="comment">// used to check correctness</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h1><p>当有include .h时，报错</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">clang: error: linker command failed with <span class="built_in">exit</span> code <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>可以在Terminal</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">gcc election2.c lock.c -o ekection2.o</span><br><span class="line">./election2.o</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>concurrent_algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>sync example note2：memory order</title>
    <url>/2021/11/13/concurrent2/</url>
    <content><![CDATA[<p>Producer consumer example</p>
<p>There might be conflict on buffer[], but consumed_until and produced_until prevent that (if used correctly).</p>
<p>So, only need to make sure consumed_until and produced_until accessed correctly under concurrency.</p>
<h1 id="Using-locks"><a href="#Using-locks" class="headerlink" title="Using locks"></a>Using locks</h1><p>In each round of produce()</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  lock_acquire(&amp;lock);</span><br><span class="line">  <span class="keyword">if</span> (consumed_until + BUFFER_SIZE &gt; r) <span class="keyword">break</span>;</span><br><span class="line">  lock_release(&amp;lock);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">produced[r] = ...</span><br><span class="line">buffer[r % BUFFER_SIZE] = produced[r];</span><br><span class="line">produced_until++;</span><br><span class="line">lock_release(&amp;lock);</span><br></pre></td></tr></table></figure>

<p>Two locks:</p>
<ol>
<li>check if can produce: conflict on consumed_until</li>
<li>conflict on produced_until</li>
</ol>
<p>In each round of consume()</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  lock_acquire(&amp;lock);</span><br><span class="line">  <span class="keyword">if</span> (produced_until &gt; r) <span class="keyword">break</span>;</span><br><span class="line">  lock_release(&amp;lock);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">consumed[r] = buffer[r % BUFFER_SIZE];</span><br><span class="line">consumed_until++;</span><br><span class="line">lock_release(&amp;lock);</span><br></pre></td></tr></table></figure>

<p>Two locks:</p>
<ol>
<li>check if can consume: conflict on produced_until</li>
<li>conflict on consumed_until</li>
</ol>
<h1 id="Using-atomic-vairables"><a href="#Using-atomic-vairables" class="headerlink" title="Using atomic vairables"></a>Using atomic vairables</h1><p>In produce, two locks can be modified:</p>
<ol>
<li><p>check if can produce: conflict on consumed_until</p>
<p>no ordering constraints -&gt; memory_order_relaxed</p>
</li>
<li><p>conflict on produced_until</p>
<p>store produced_until should happen after all operations -&gt; load-store + store-store = release</p>
</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="comment">// The memory order can be relaxed as we don&#x27;t read anything &quot;produced&quot; by the consumer.</span></span><br><span class="line">  <span class="keyword">int</span> local_cu = atomic_load_explicit(&amp;consumed_until, memory_order_relaxed);</span><br><span class="line">  <span class="keyword">if</span> (local_cu + BUFFER_SIZE &gt; r) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">produced[r] = ...</span><br><span class="line">buffer[r % BUFFER_SIZE] = produced[r];</span><br><span class="line"><span class="comment">// We want to increment &quot;produced_until&quot; after the buffer has been written.</span></span><br><span class="line"><span class="comment">// By using memory_order_release, we prevent the STOREs on buffer from being</span></span><br><span class="line"><span class="comment">// reordered after the atomic operation.</span></span><br><span class="line">atomic_fetch_add_explicit(&amp;produced_until, <span class="number">1</span>, memory_order_release);</span><br></pre></td></tr></table></figure>

<p>In consume, two locks can be modified:</p>
<ol>
<li><p>check if can consume: conflict on produced_until</p>
<p>load produced_until should happen before all operations -&gt; load-load + load-store = acquire</p>
</li>
<li><p>conflict on consumed_until</p>
<p>store consumed_until should happen after all operations -&gt; load-store + store-store = release</p>
</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="comment">// We don&#x27;t want to access the buffer before checking the atomic variable.</span></span><br><span class="line">  <span class="comment">// The memory_order_acquire prevents this reordering.</span></span><br><span class="line">  <span class="keyword">int</span> local_pu = atomic_load_explicit(&amp;produced_until, memory_order_acquire);</span><br><span class="line">  <span class="keyword">if</span> (local_pu &gt; r) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">consumed[r] = buffer[r % BUFFER_SIZE];</span><br><span class="line">atomic_fetch_add_explicit(&amp;consumed_until, <span class="number">1</span>, memory_order_release);</span><br></pre></td></tr></table></figure>



<h1 id="Memory-barriers"><a href="#Memory-barriers" class="headerlink" title="Memory barriers"></a>Memory barriers</h1><blockquote>
<p><a href="https://en.cppreference.com/w/cpp/atomic/memory_order">std::memory_order</a></p>
<p><a href="https://www.modernescpp.com/index.php/fences-as-memory-barriers">Fences are Memory Barriers</a></p>
<p><a href="https://www.youtube.com/watch?v=qlkMbxUbKfw&ab_channel=CodeBlacksmith">Memory Barriers - Learn Modern C++</a></p>
</blockquote>
<ul>
<li><p>memory_order_relaxed: no ordering constraints</p>
</li>
<li><p>memory_order_consume</p>
</li>
<li><p>memory_order_acquire: load-load + load-store</p>
<img src="/images/2021/screencapture2021-11-13 AM10.59.57.jpg">
</li>
<li><p>memory_order_release: load-store + store-store</p>
<img src="/images/2021/screencapture2021-11-13 AM11.00.42.jpg">
</li>
<li><p>memory_order_acq_rel</p>
</li>
<li><p>memory_order_seq_cst</p>
</li>
</ul>
<img src="/images/2021/screencapture2021-11-13 AM10.55.43.jpg">



<img src="/images/2021/screencapture2021-11-13 AM10.57.03.jpg">
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>concurrent_algorithm</tag>
      </tags>
  </entry>
</search>
